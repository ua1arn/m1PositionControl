
m1PositionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009120  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e4  080096e4  000204e4  2**0
                  CONTENTS
  4 .ARM          00000008  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096ec  080096ec  000204e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  080096f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  200004e4  08009bd8  000204e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a3c  08009bd8  00021a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002bb0d  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00055ecd  00000000  00000000  0004c021  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007f6b  00000000  00000000  000a1eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d20  00000000  00000000  000a9e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010062f  00000000  00000000  000abb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000052d0  00000000  00000000  001ac1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000278c9  00000000  00000000  001b1480  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002b84b  00000000  00000000  001d8d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00204594  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000595c  00000000  00000000  00204610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200004e4 	.word	0x200004e4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080092e0 	.word	0x080092e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200004e8 	.word	0x200004e8
 8000214:	080092e0 	.word	0x080092e0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490e      	ldr	r1, [pc, #56]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0b      	ldr	r4, [pc, #44]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000542:	f003 fc89 	bl	8003e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000546:	f008 fe93 	bl	8009270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f000 fb9d 	bl	8000c88 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 800055c:	080096f4 	.word	0x080096f4
  ldr r2, =_sbss
 8000560:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8000564:	20001a3c 	.word	0x20001a3c

08000568 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <BusFault_Handler>
	...

0800056c <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800056c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800056e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000570:	4604      	mov	r4, r0
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000572:	6940      	ldr	r0, [r0, #20]
 8000574:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000576:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000578:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->ASPEP_State = ASPEP_IDLE;
 800057c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000580:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000584:	6960      	ldr	r0, [r4, #20]
 8000586:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000588:	f104 011c 	add.w	r1, r4, #28
 800058c:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 800058e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000592:	4718      	bx	r3

08000594 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000594:	b470      	push	{r4, r5, r6}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000596:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000598:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800059a:	784e      	ldrb	r6, [r1, #1]
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800059c:	788d      	ldrb	r5, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800059e:	4c1c      	ldr	r4, [pc, #112]	; (8000610 <ASPEP_sendBeacon+0x7c>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005a0:	01db      	lsls	r3, r3, #7
 80005a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a6:	f043 0305 	orr.w	r3, r3, #5
 80005aa:	78ca      	ldrb	r2, [r1, #3]
 80005ac:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80005b0:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 80005b4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005b8:	b2da      	uxtb	r2, r3
  header &= 0x0fffffffU;
 80005ba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005be:	5ca2      	ldrb	r2, [r4, r2]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005c0:	4d14      	ldr	r5, [pc, #80]	; (8000614 <ASPEP_sendBeacon+0x80>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005c2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005c6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005c8:	5ca2      	ldrb	r2, [r4, r2]
 80005ca:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005ce:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005d0:	5ca2      	ldrb	r2, [r4, r2]
 80005d2:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005d6:	5caa      	ldrb	r2, [r5, r2]
 80005d8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005dc:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005de:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005e2:	b143      	cbz	r3, 80005f6 <ASPEP_sendBeacon+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
 80005e4:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005e6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005ea:	b913      	cbnz	r3, 80005f2 <ASPEP_sendBeacon+0x5e>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005f2:	bc70      	pop	{r4, r5, r6}
 80005f4:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005f6:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005fa:	2303      	movs	r3, #3
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005fc:	6481      	str	r1, [r0, #72]	; 0x48
        pHandle->ctrlBuffer.state = readLock;
 80005fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000602:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000604:	2204      	movs	r2, #4
 8000606:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000608:	6940      	ldr	r0, [r0, #20]
}
 800060a:	bc70      	pop	{r4, r5, r6}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800060c:	4718      	bx	r3
 800060e:	bf00      	nop
 8000610:	08009308 	.word	0x08009308
 8000614:	080092f8 	.word	0x080092f8

08000618 <ASPEP_sendPing>:
{
 8000618:	b470      	push	{r4, r5, r6}
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800061a:	0312      	lsls	r2, r2, #12
 800061c:	f042 0206 	orr.w	r2, r2, #6
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000620:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000624:	f890 6063 	ldrb.w	r6, [r0, #99]	; 0x63
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000628:	4c1b      	ldr	r4, [pc, #108]	; (8000698 <ASPEP_sendPing+0x80>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800062a:	ea42 1301 	orr.w	r3, r2, r1, lsl #4
 800062e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000632:	f005 0201 	and.w	r2, r5, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000636:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800063a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 800063e:	f006 020f 	and.w	r2, r6, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000642:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000646:	b2da      	uxtb	r2, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000648:	4914      	ldr	r1, [pc, #80]	; (800069c <ASPEP_sendPing+0x84>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800064a:	5ca2      	ldrb	r2, [r4, r2]
 800064c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000650:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000652:	5ca2      	ldrb	r2, [r4, r2]
 8000654:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000658:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800065a:	5ca2      	ldrb	r2, [r4, r2]
 800065c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000660:	5c8a      	ldrb	r2, [r1, r2]
 8000662:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000666:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800066a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800066c:	b143      	cbz	r3, 8000680 <ASPEP_sendPing+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 800066e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000670:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000674:	b913      	cbnz	r3, 800067c <ASPEP_sendPing+0x64>
          pHandle->ctrlBuffer.state = pending;
 8000676:	2302      	movs	r3, #2
 8000678:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800067c:	bc70      	pop	{r4, r5, r6}
 800067e:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000680:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000684:	2303      	movs	r3, #3
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000686:	6481      	str	r1, [r0, #72]	; 0x48
        pHandle->ctrlBuffer.state = readLock;
 8000688:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800068c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800068e:	2204      	movs	r2, #4
 8000690:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000692:	6940      	ldr	r0, [r0, #20]
}
 8000694:	bc70      	pop	{r4, r5, r6}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000696:	4718      	bx	r3
 8000698:	08009308 	.word	0x08009308
 800069c:	080092f8 	.word	0x080092f8

080006a0 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006a0:	2a0a      	cmp	r2, #10
{
 80006a2:	b410      	push	{r4}
 80006a4:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80006a6:	d00b      	beq.n	80006c0 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006a8:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d921      	bls.n	80006f4 <ASPEP_getBuffer+0x54>
 80006b0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d911      	bls.n	80006dc <ASPEP_getBuffer+0x3c>
        result = false;
 80006b8:	2000      	movs	r0, #0
}
 80006ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006be:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006c0:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006c4:	2a01      	cmp	r2, #1
 80006c6:	d8f7      	bhi.n	80006b8 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006ca:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006cc:	3204      	adds	r2, #4
  bool result = true;
 80006ce:	4620      	mov	r0, r4
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006d0:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006d2:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
}
 80006d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006da:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006dc:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006de:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006e2:	2001      	movs	r0, #1
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e4:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006e6:	641c      	str	r4, [r3, #64]	; 0x40
          pHandle->asyncBufferB.state = writeLock;
 80006e8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006ec:	600a      	str	r2, [r1, #0]
}
 80006ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006f2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006f4:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006f6:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006fa:	2001      	movs	r0, #1
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006fc:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006fe:	641c      	str	r4, [r3, #64]	; 0x40
          pHandle->asyncBufferA.state = writeLock;
 8000700:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000704:	600a      	str	r2, [r1, #0]
}
 8000706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800070a:	4770      	bx	lr

0800070c <ASPEP_sendPacket>:
{
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800070e:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 8000712:	2c02      	cmp	r4, #2
 8000714:	d140      	bne.n	8000798 <ASPEP_sendPacket+0x8c>
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000716:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 800071a:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800071e:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 8000722:	2c01      	cmp	r4, #1
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000724:	f1a1 0604 	sub.w	r6, r1, #4
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000728:	d039      	beq.n	800079e <ASPEP_sendPacket+0x92>
      if (MCTL_SYNC == syncAsync)
 800072a:	2b0a      	cmp	r3, #10
 800072c:	d104      	bne.n	8000738 <ASPEP_sendPacket+0x2c>
        if (pSupHandle->MCP_PacketAvailable)
 800072e:	7c04      	ldrb	r4, [r0, #16]
 8000730:	2c00      	cmp	r4, #0
 8000732:	d03e      	beq.n	80007b2 <ASPEP_sendPacket+0xa6>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000734:	2400      	movs	r4, #0
 8000736:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 8000738:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800073c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000828 <ASPEP_sendPacket+0x11c>
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000740:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 800082c <ASPEP_sendPacket+0x120>
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000744:	b2e5      	uxtb	r5, r4
  header &= 0x0fffffffU;
 8000746:	f024 4770 	bic.w	r7, r4, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800074a:	f81c 5005 	ldrb.w	r5, [ip, r5]
 800074e:	ea85 2517 	eor.w	r5, r5, r7, lsr #8
 8000752:	b2ed      	uxtb	r5, r5
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000754:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000756:	f81c 5005 	ldrb.w	r5, [ip, r5]
 800075a:	ea85 4517 	eor.w	r5, r5, r7, lsr #16
 800075e:	b2ed      	uxtb	r5, r5
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000760:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000762:	f81c 5005 	ldrb.w	r5, [ip, r5]
 8000766:	ea85 6717 	eor.w	r7, r5, r7, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800076a:	f81e 5007 	ldrb.w	r5, [lr, r7]
 800076e:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8000772:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000776:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000778:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800077a:	b381      	cbz	r1, 80007de <ASPEP_sendPacket+0xd2>
  __ASM volatile ("cpsie i" : : : "memory");
 800077c:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800077e:	2b09      	cmp	r3, #9
 8000780:	d01a      	beq.n	80007b8 <ASPEP_sendPacket+0xac>
      else if (MCTL_SYNC == dataType)
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d025      	beq.n	80007d2 <ASPEP_sendPacket+0xc6>
      else if(ASPEP_CTRL == dataType)
 8000786:	2b00      	cmp	r3, #0
 8000788:	d140      	bne.n	800080c <ASPEP_sendPacket+0x100>
        if (pHandle->ctrlBuffer.state != available)
 800078a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800078e:	bb22      	cbnz	r2, 80007da <ASPEP_sendPacket+0xce>
          pHandle->ctrlBuffer.state = pending;
 8000790:	2202      	movs	r2, #2
 8000792:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8000796:	e000      	b.n	800079a <ASPEP_sendPacket+0x8e>
      result = ASPEP_NOT_CONNECTED;
 8000798:	2302      	movs	r3, #2
}
 800079a:	4618      	mov	r0, r3
 800079c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 800079e:	188c      	adds	r4, r1, r2
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80007a0:	25ca      	movs	r5, #202	; 0xca
 80007a2:	548d      	strb	r5, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80007a4:	1c97      	adds	r7, r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80007a6:	25fe      	movs	r5, #254	; 0xfe
      if (MCTL_SYNC == syncAsync)
 80007a8:	2b0a      	cmp	r3, #10
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80007aa:	b2ba      	uxth	r2, r7
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80007ac:	7065      	strb	r5, [r4, #1]
      if (MCTL_SYNC == syncAsync)
 80007ae:	d0be      	beq.n	800072e <ASPEP_sendPacket+0x22>
 80007b0:	e7c2      	b.n	8000738 <ASPEP_sendPacket+0x2c>
          result = MCTL_SYNC_NOT_EXPECTED;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (NULL == pHandle->asyncNextBuffer)
 80007b8:	e9d0 1410 	ldrd	r1, r4, [r0, #64]	; 0x40
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007bc:	680b      	ldr	r3, [r1, #0]
          result = ASPEP_BUFFER_ERROR;
 80007be:	429e      	cmp	r6, r3
 80007c0:	bf14      	ite	ne
 80007c2:	2303      	movne	r3, #3
 80007c4:	2300      	moveq	r3, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007c6:	b904      	cbnz	r4, 80007ca <ASPEP_sendPacket+0xbe>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007c8:	6441      	str	r1, [r0, #68]	; 0x44
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007ca:	2002      	movs	r0, #2
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007cc:	808a      	strh	r2, [r1, #4]
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007ce:	7188      	strb	r0, [r1, #6]
 80007d0:	e7e3      	b.n	800079a <ASPEP_sendPacket+0x8e>
        if (pHandle -> syncBuffer.state != writeLock)
 80007d2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d01a      	beq.n	8000810 <ASPEP_sendPacket+0x104>
          result = ASPEP_BUFFER_ERROR;
 80007da:	2303      	movs	r3, #3
 80007dc:	e7dd      	b.n	800079a <ASPEP_sendPacket+0x8e>
      if (MCTL_ASYNC == dataType)
 80007de:	2b09      	cmp	r3, #9
 80007e0:	d01c      	beq.n	800081c <ASPEP_sendPacket+0x110>
      else if (MCTL_SYNC == dataType)
 80007e2:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007e4:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007e8:	bf0b      	itete	eq
 80007ea:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007ee:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 80007f2:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007f6:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007fa:	6483      	str	r3, [r0, #72]	; 0x48
 80007fc:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000800:	6940      	ldr	r0, [r0, #20]
 8000802:	4631      	mov	r1, r6
 8000804:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t result = ASPEP_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	e7c4      	b.n	800079a <ASPEP_sendPacket+0x8e>
          pHandle->syncBuffer.state = pending;
 8000810:	2302      	movs	r3, #2
 8000812:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000816:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	e7be      	b.n	800079a <ASPEP_sendPacket+0x8e>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 800081c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800081e:	2103      	movs	r1, #3
 8000820:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000822:	6483      	str	r3, [r0, #72]	; 0x48
 8000824:	e7ea      	b.n	80007fc <ASPEP_sendPacket+0xf0>
 8000826:	bf00      	nop
 8000828:	08009308 	.word	0x08009308
 800082c:	080092f8 	.word	0x080092f8

08000830 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000830:	b538      	push	{r3, r4, r5, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000832:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000836:	2b03      	cmp	r3, #3
{
 8000838:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800083a:	d012      	beq.n	8000862 <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 800083c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800083e:	2100      	movs	r1, #0
 8000840:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000842:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000846:	2a02      	cmp	r2, #2
 8000848:	d129      	bne.n	800089e <ASPEP_HWDataTransmittedIT+0x6e>
    {
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800084a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800084e:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000850:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000852:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000854:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000856:	6960      	ldr	r0, [r4, #20]
 8000858:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 800085a:	2303      	movs	r3, #3
 800085c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000860:	bd38      	pop	{r3, r4, r5, pc}
    if (pHandle->syncBuffer.state == pending)
 8000862:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000866:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000868:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 800086a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 800086e:	d0ec      	beq.n	800084a <ASPEP_HWDataTransmittedIT+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000874:	b333      	cbz	r3, 80008c4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000876:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000878:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800087a:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800087c:	6819      	ldr	r1, [r3, #0]
        pHandle->asyncNextBuffer->state = readLock;
 800087e:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000880:	6960      	ldr	r0, [r4, #20]
 8000882:	889a      	ldrh	r2, [r3, #4]
 8000884:	47a8      	blx	r5
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000886:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800088a:	2b02      	cmp	r3, #2
 800088c:	d014      	beq.n	80008b8 <ASPEP_HWDataTransmittedIT+0x88>
 800088e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000892:	2b02      	cmp	r3, #2
 8000894:	d010      	beq.n	80008b8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000896:	2300      	movs	r3, #0
 8000898:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800089a:	b662      	cpsie	i
}
 800089c:	bd38      	pop	{r3, r4, r5, pc}
    else if (pHandle->ctrlBuffer.state == pending)
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d1e6      	bne.n	8000870 <ASPEP_HWDataTransmittedIT+0x40>
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80008a2:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80008a6:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80008a8:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80008aa:	2204      	movs	r2, #4
 80008ac:	6940      	ldr	r0, [r0, #20]
 80008ae:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 80008b0:	2303      	movs	r3, #3
 80008b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80008b6:	bd38      	pop	{r3, r4, r5, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008ba:	0063      	lsls	r3, r4, #1
 80008bc:	3368      	adds	r3, #104	; 0x68
 80008be:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008c0:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008c2:	e7ea      	b.n	800089a <ASPEP_HWDataTransmittedIT+0x6a>
        pHandle->lockBuffer = NULL;
 80008c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80008c6:	e7e8      	b.n	800089a <ASPEP_HWDataTransmittedIT+0x6a>

080008c8 <ASPEP_RXframeProcess>:
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008c8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008cc:	69c2      	ldr	r2, [r0, #28]
{
 80008ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 80008d2:	2500      	movs	r5, #0
{
 80008d4:	4604      	mov	r4, r0
    *packetLength = 0;
 80008d6:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008d8:	b1d3      	cbz	r3, 8000910 <ASPEP_RXframeProcess+0x48>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008da:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008de:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d03e      	beq.n	8000964 <ASPEP_RXframeProcess+0x9c>
 80008e6:	d34b      	bcc.n	8000980 <ASPEP_RXframeProcess+0xb8>
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d108      	bne.n	80008fe <ASPEP_RXframeProcess+0x36>
          break;
        }

        case ASPEP_CONNECTED:
        {
          if (BEACON == pHandle->rxPacketType)
 80008ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80008ee:	2b05      	cmp	r3, #5
 80008f0:	f000 809e 	beq.w	8000a30 <ASPEP_RXframeProcess+0x168>
            {
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
            }
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	f000 810b 	beq.w	8000b10 <ASPEP_RXframeProcess+0x248>
          {
            packetNumber = pHandle->rxHeader[1];
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
          }
          else if (DATA_PACKET == pHandle->rxPacketType)
 80008fa:	2b09      	cmp	r3, #9
 80008fc:	d04c      	beq.n	8000998 <ASPEP_RXframeProcess+0xd0>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000900:	6960      	ldr	r0, [r4, #20]
 8000902:	2204      	movs	r2, #4
 8000904:	f104 011c 	add.w	r1, r4, #28
 8000908:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 800090a:	4628      	mov	r0, r5
 800090c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000910:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0f8      	beq.n	800090a <ASPEP_RXframeProcess+0x42>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000918:	042b      	lsls	r3, r5, #16
 800091a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
 800091e:	f045 050f 	orr.w	r5, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000922:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000926:	4a8c      	ldr	r2, [pc, #560]	; (8000b58 <ASPEP_RXframeProcess+0x290>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000928:	498c      	ldr	r1, [pc, #560]	; (8000b5c <ASPEP_RXframeProcess+0x294>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800092a:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000934:	5cd3      	ldrb	r3, [r2, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000936:	5ccb      	ldrb	r3, [r1, r3]
 8000938:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 800093c:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000940:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000942:	b3ab      	cbz	r3, 80009b0 <ASPEP_RXframeProcess+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000944:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000946:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800094a:	b913      	cbnz	r3, 8000952 <ASPEP_RXframeProcess+0x8a>
          pHandle->ctrlBuffer.state = pending;
 800094c:	2302      	movs	r3, #2
 800094e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000952:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000954:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000956:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800095a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800095c:	4798      	blx	r3
}
 800095e:	4628      	mov	r0, r5
 8000960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000964:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000966:	2905      	cmp	r1, #5
 8000968:	d02e      	beq.n	80009c8 <ASPEP_RXframeProcess+0x100>
          else if (PING == pHandle->rxPacketType)
 800096a:	2906      	cmp	r1, #6
 800096c:	d1c7      	bne.n	80008fe <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800096e:	4619      	mov	r1, r3
 8000970:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000974:	f7ff fe50 	bl	8000618 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000978:	2302      	movs	r3, #2
 800097a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800097e:	e7be      	b.n	80008fe <ASPEP_RXframeProcess+0x36>
          if (BEACON == pHandle->rxPacketType)
 8000980:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000982:	2b05      	cmp	r3, #5
 8000984:	f000 8081 	beq.w	8000a8a <ASPEP_RXframeProcess+0x1c2>
          else if (PING == pHandle->rxPacketType)
 8000988:	2b06      	cmp	r3, #6
 800098a:	d1b8      	bne.n	80008fe <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 800098c:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000990:	4629      	mov	r1, r5
 8000992:	f7ff fe41 	bl	8000618 <ASPEP_sendPing>
 8000996:	e7b2      	b.n	80008fe <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000998:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 800099c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 80009a0:	6985      	ldr	r5, [r0, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 80009a2:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80009a4:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 80009a6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80009aa:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 80009ac:	800a      	strh	r2, [r1, #0]
 80009ae:	e7a6      	b.n	80008fe <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009b0:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80009b4:	2303      	movs	r3, #3
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009b6:	6481      	str	r1, [r0, #72]	; 0x48
        pHandle->ctrlBuffer.state = readLock;
 80009b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80009bc:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009be:	2204      	movs	r2, #4
 80009c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80009c2:	6940      	ldr	r0, [r0, #20]
 80009c4:	4798      	blx	r3
 80009c6:	e7c4      	b.n	8000952 <ASPEP_RXframeProcess+0x8a>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009c8:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ca:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009ce:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009d0:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d4:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d8:	f894 c06f 	ldrb.w	ip, [r4, #111]	; 0x6f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009dc:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e2:	42ab      	cmp	r3, r5
 80009e4:	4698      	mov	r8, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009e6:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009ea:	bf28      	it	cs
 80009ec:	46a8      	movcs	r8, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ee:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009f0:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009f4:	bf28      	it	cs
 80009f6:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009f8:	42b7      	cmp	r7, r6
 80009fa:	46b9      	mov	r9, r7
 80009fc:	bf28      	it	cs
 80009fe:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a00:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a02:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a06:	46f0      	mov	r8, lr
 8000a08:	bf28      	it	cs
 8000a0a:	46e0      	movcs	r8, ip
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a0c:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a0e:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a12:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a16:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a1a:	d97e      	bls.n	8000b1a <ASPEP_RXframeProcess+0x252>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a22:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff fdb4 	bl	8000594 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	e766      	b.n	80008fe <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a30:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a32:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a36:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a38:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a3c:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a40:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a44:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4a:	42b3      	cmp	r3, r6
 8000a4c:	4699      	mov	r9, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a4e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a52:	bf28      	it	cs
 8000a54:	46b1      	movcs	r9, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a56:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a58:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a5c:	bf28      	it	cs
 8000a5e:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a60:	45bc      	cmp	ip, r7
 8000a62:	46e2      	mov	sl, ip
 8000a64:	bf28      	it	cs
 8000a66:	46ba      	movcs	sl, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a68:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6a:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a6e:	46c1      	mov	r9, r8
 8000a70:	bf28      	it	cs
 8000a72:	46f1      	movcs	r9, lr
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a74:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a76:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a7a:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a7e:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a82:	d95b      	bls.n	8000b3c <ASPEP_RXframeProcess+0x274>
 8000a84:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a88:	e7cb      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a8a:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a8c:	f890 706c 	ldrb.w	r7, [r0, #108]	; 0x6c
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a90:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a92:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a96:	f890 c06e 	ldrb.w	ip, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a9a:	f890 806f 	ldrb.w	r8, [r0, #111]	; 0x6f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a9e:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000aa0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa4:	42bb      	cmp	r3, r7
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000aa6:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aaa:	469a      	mov	sl, r3
 8000aac:	bf28      	it	cs
 8000aae:	46ba      	movcs	sl, r7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab0:	42a9      	cmp	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000ab2:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab6:	bf28      	it	cs
 8000ab8:	4629      	movcs	r1, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aba:	45e6      	cmp	lr, ip
 8000abc:	4670      	mov	r0, lr
 8000abe:	bf28      	it	cs
 8000ac0:	4660      	movcs	r0, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ac2:	45c1      	cmp	r9, r8
 8000ac4:	464e      	mov	r6, r9
 8000ac6:	bf28      	it	cs
 8000ac8:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aca:	42bb      	cmp	r3, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000acc:	f884 a06c 	strb.w	sl, [r4, #108]	; 0x6c
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ad0:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad4:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad8:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000adc:	d8a1      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ade:	428d      	cmp	r5, r1
 8000ae0:	d89f      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ae2:	45e6      	cmp	lr, ip
 8000ae4:	d89d      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000ae6:	45c1      	cmp	r9, r8
 8000ae8:	d89b      	bhi.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000aea:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000aee:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000af2:	429d      	cmp	r5, r3
 8000af4:	d195      	bne.n	8000a22 <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000af6:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000af8:	1c42      	adds	r2, r0, #1
 8000afa:	0152      	lsls	r2, r2, #5
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afc:	015b      	lsls	r3, r3, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000afe:	01b6      	lsls	r6, r6, #6
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b00:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b02:	81a2      	strh	r2, [r4, #12]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b04:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b08:	81e6      	strh	r6, [r4, #14]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b0a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b0e:	e788      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b10:	7f42      	ldrb	r2, [r0, #29]
 8000b12:	2101      	movs	r1, #1
 8000b14:	f7ff fd80 	bl	8000618 <ASPEP_sendPing>
 8000b18:	e6f1      	b.n	80008fe <ASPEP_RXframeProcess+0x36>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b1a:	4288      	cmp	r0, r1
 8000b1c:	f63f af7e 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b20:	42b7      	cmp	r7, r6
 8000b22:	f63f af7b 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b26:	45e6      	cmp	lr, ip
 8000b28:	f63f af78 	bhi.w	8000a1c <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b2c:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8000b30:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b34:	4299      	cmp	r1, r3
 8000b36:	f47f af71 	bne.w	8000a1c <ASPEP_RXframeProcess+0x154>
 8000b3a:	e772      	b.n	8000a22 <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b3c:	4288      	cmp	r0, r1
 8000b3e:	d8a1      	bhi.n	8000a84 <ASPEP_RXframeProcess+0x1bc>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b40:	45bc      	cmp	ip, r7
 8000b42:	d89f      	bhi.n	8000a84 <ASPEP_RXframeProcess+0x1bc>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b44:	45f0      	cmp	r8, lr
 8000b46:	d89d      	bhi.n	8000a84 <ASPEP_RXframeProcess+0x1bc>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b48:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b4c:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b50:	1aeb      	subs	r3, r5, r3
 8000b52:	425d      	negs	r5, r3
 8000b54:	415d      	adcs	r5, r3
 8000b56:	e795      	b.n	8000a84 <ASPEP_RXframeProcess+0x1bc>
 8000b58:	08009308 	.word	0x08009308
 8000b5c:	080092f8 	.word	0x080092f8

08000b60 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b60:	b538      	push	{r3, r4, r5, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b62:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8000b66:	b13b      	cbz	r3, 8000b78 <ASPEP_HWDataReceivedIT+0x18>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d104      	bne.n	8000b76 <ASPEP_HWDataReceivedIT+0x16>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b6c:	2200      	movs	r2, #0
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b6e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b72:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b76:	bd38      	pop	{r3, r4, r5, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b78:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <ASPEP_HWDataReceivedIT+0x98>)
 8000b7c:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b84:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b8c:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b94:	5c53      	ldrb	r3, [r2, r1]
 8000b96:	b9fb      	cbnz	r3, 8000bd8 <ASPEP_HWDataReceivedIT+0x78>
 8000b98:	7f03      	ldrb	r3, [r0, #28]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8000b9e:	2b05      	cmp	r3, #5
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000ba0:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000ba2:	d321      	bcc.n	8000be8 <ASPEP_HWDataReceivedIT+0x88>
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d91b      	bls.n	8000be0 <ASPEP_HWDataReceivedIT+0x80>
 8000ba8:	2b09      	cmp	r3, #9
 8000baa:	d11d      	bne.n	8000be8 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bac:	8b83      	ldrh	r3, [r0, #28]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bb4:	b1a3      	cbz	r3, 8000be0 <ASPEP_HWDataReceivedIT+0x80>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bb6:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d318      	bcc.n	8000bf0 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bbe:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bc2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bca:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 8000bce:	47a8      	blx	r5
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bde:	bd38      	pop	{r3, r4, r5, pc}
              pHandle->NewPacketAvailable = true;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
}
 8000be6:	bd38      	pop	{r3, r4, r5, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bee:	bd38      	pop	{r3, r4, r5, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bf6:	bd38      	pop	{r3, r4, r5, pc}
 8000bf8:	08009308 	.word	0x08009308

08000bfc <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000bfc:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c04:	311c      	adds	r1, #28
 8000c06:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c08:	6940      	ldr	r0, [r0, #20]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4718      	bx	r3
 8000c0e:	bf00      	nop

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b510      	push	{r4, lr}
 8000c12:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c14:	2238      	movs	r2, #56	; 0x38
 8000c16:	2100      	movs	r1, #0
 8000c18:	a806      	add	r0, sp, #24
 8000c1a:	f008 fb58 	bl	80092ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c20:	4618      	mov	r0, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c22:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000c26:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000c2a:	9305      	str	r3, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c2c:	f004 f9f0 	bl	8005010 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c32:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c38:	2403      	movs	r4, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3a:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3c:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c3e:	2106      	movs	r1, #6
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c40:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c44:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c4a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c4c:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f004 fa62 	bl	800511c <HAL_RCC_OscConfig>
 8000c58:	b108      	cbz	r0, 8000c5e <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5a:	b672      	cpsid	i
 8000c5c:	e7fe      	b.n	8000c5c <SystemClock_Config+0x4c>
 8000c5e:	4603      	mov	r3, r0
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c62:	a801      	add	r0, sp, #4
 8000c64:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c70:	f004 fca6 	bl	80055c0 <HAL_RCC_ClockConfig>
 8000c74:	b108      	cbz	r0, 8000c7a <SystemClock_Config+0x6a>
 8000c76:	b672      	cpsid	i
 8000c78:	e7fe      	b.n	8000c78 <SystemClock_Config+0x68>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c7a:	f004 fe71 	bl	8005960 <HAL_RCC_EnableCSS>
}
 8000c7e:	b014      	add	sp, #80	; 0x50
 8000c80:	bd10      	pop	{r4, pc}
 8000c82:	bf00      	nop
 8000c84:	0000      	movs	r0, r0
	...

08000c88 <main>:
{
 8000c88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f04f 0800 	mov.w	r8, #0
{
 8000c90:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000c92:	f003 f911 	bl	8003eb8 <HAL_Init>
  SystemClock_Config();
 8000c96:	f7ff ffbb 	bl	8000c10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	e9cd 881c 	strd	r8, r8, [sp, #112]	; 0x70
 8000c9e:	e9cd 881e 	strd	r8, r8, [sp, #120]	; 0x78

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4f9f      	ldr	r7, [pc, #636]	; (8000f20 <main+0x298>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000caa:	489e      	ldr	r0, [pc, #632]	; (8000f24 <main+0x29c>)
  hadc1.Instance = ADC1;
 8000cac:	4c9e      	ldr	r4, [pc, #632]	; (8000f28 <main+0x2a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	9305      	str	r3, [sp, #20]
 8000cbc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc0:	f043 0320 	orr.w	r3, r3, #32
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc8:	f003 0320 	and.w	r3, r3, #32
 8000ccc:	9306      	str	r3, [sp, #24]
 8000cce:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	9307      	str	r3, [sp, #28]
 8000ce0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000cf2:	4642      	mov	r2, r8
 8000cf4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000cfa:	f004 f983 	bl	8005004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d06:	a91c      	add	r1, sp, #112	; 0x70
 8000d08:	4886      	ldr	r0, [pc, #536]	; (8000f24 <main+0x29c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f004 f897 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	a91c      	add	r1, sp, #112	; 0x70
 8000d20:	4882      	ldr	r0, [pc, #520]	; (8000f2c <main+0x2a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d26:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70

  /*Configure GPIO pins : M1_PWM_EN_U_Pin M1_PWM_EN_V_Pin M1_PWM_EN_W_Pin */
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2601      	movs	r6, #1
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f004 f88a 	bl	8004e44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d30:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000d32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	a91c      	add	r1, sp, #112	; 0x70
 8000d38:	487a      	ldr	r0, [pc, #488]	; (8000f24 <main+0x29c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	e9cd 361c 	strd	r3, r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	e9cd 551e 	strd	r5, r5, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f004 f87f 	bl	8004e44 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d5a:	4333      	orrs	r3, r6
 8000d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000d60:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d64:	4033      	ands	r3, r6
 8000d66:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d68:	4641      	mov	r1, r8
 8000d6a:	223c      	movs	r2, #60	; 0x3c
 8000d6c:	a81c      	add	r0, sp, #112	; 0x70
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	9b04      	ldr	r3, [sp, #16]
  ADC_MultiModeTypeDef multimode = {0};
 8000d70:	e9cd 8810 	strd	r8, r8, [sp, #64]	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d74:	f008 faab 	bl	80092ce <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d78:	4641      	mov	r1, r8
 8000d7a:	a814      	add	r0, sp, #80	; 0x50
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	f008 faa6 	bl	80092ce <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d82:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
  hadc1.Instance = ADC1;
 8000d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8a:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8c:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8e:	e9c4 8801 	strd	r8, r8, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d92:	e9c4 8604 	strd	r8, r6, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d96:	f884 801c 	strb.w	r8, [r4, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9a:	f884 801d 	strb.w	r8, [r4, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000d9e:	6225      	str	r5, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da0:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da4:	e9c4 880b 	strd	r8, r8, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da8:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dac:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000db0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
  hadc1.Instance = ADC1;
 8000db4:	6023      	str	r3, [r4, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000db6:	f8c4 b00c 	str.w	fp, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dba:	61a7      	str	r7, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbc:	f003 f8a2 	bl	8003f04 <HAL_ADC_Init>
 8000dc0:	b108      	cbz	r0, 8000dc6 <main+0x13e>
 8000dc2:	b672      	cpsid	i
 8000dc4:	e7fe      	b.n	8000dc4 <main+0x13c>
 8000dc6:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dc8:	a90f      	add	r1, sp, #60	; 0x3c
 8000dca:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dcc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dce:	f003 fea3 	bl	8004b18 <HAL_ADCEx_MultiModeConfigChannel>
 8000dd2:	4684      	mov	ip, r0
 8000dd4:	b108      	cbz	r0, 8000dda <main+0x152>
 8000dd6:	b672      	cpsid	i
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x150>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000dda:	4a55      	ldr	r2, [pc, #340]	; (8000f30 <main+0x2a8>)
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000ddc:	9524      	str	r5, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000dde:	2309      	movs	r3, #9
 8000de0:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000de4:	2204      	movs	r2, #4
 8000de6:	2300      	movs	r3, #0
 8000de8:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000dec:	f04f 0801 	mov.w	r8, #1
 8000df0:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df8:	a91c      	add	r1, sp, #112	; 0x70
 8000dfa:	4620      	mov	r0, r4
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000dfc:	f88d c094 	strb.w	ip, [sp, #148]	; 0x94
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e00:	f88d c095 	strb.w	ip, [sp, #149]	; 0x95
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e04:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e08:	f88d c0a0 	strb.w	ip, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e0c:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000e10:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e14:	f003 fbb6 	bl	8004584 <HAL_ADCEx_InjectedConfigChannel>
 8000e18:	b108      	cbz	r0, 8000e1e <main+0x196>
 8000e1a:	b672      	cpsid	i
 8000e1c:	e7fe      	b.n	8000e1c <main+0x194>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000e1e:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <main+0x2ac>)
 8000e20:	931c      	str	r3, [sp, #112]	; 0x70
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e22:	f240 1a0f 	movw	sl, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e26:	a91c      	add	r1, sp, #112	; 0x70
 8000e28:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e2a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e2e:	f003 fba9 	bl	8004584 <HAL_ADCEx_InjectedConfigChannel>
 8000e32:	b108      	cbz	r0, 8000e38 <main+0x1b0>
 8000e34:	b672      	cpsid	i
 8000e36:	e7fe      	b.n	8000e36 <main+0x1ae>
  sConfig.Channel = ADC_CHANNEL_2;
 8000e38:	493f      	ldr	r1, [pc, #252]	; (8000f38 <main+0x2b0>)
 8000e3a:	9114      	str	r1, [sp, #80]	; 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3c:	2206      	movs	r2, #6
  sConfig.Offset = 0;
 8000e3e:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e42:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	a914      	add	r1, sp, #80	; 0x50
 8000e46:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000e48:	9716      	str	r7, [sp, #88]	; 0x58
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4a:	9215      	str	r2, [sp, #84]	; 0x54
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e4c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4e:	f003 f969 	bl	8004124 <HAL_ADC_ConfigChannel>
 8000e52:	b108      	cbz	r0, 8000e58 <main+0x1d0>
 8000e54:	b672      	cpsid	i
 8000e56:	e7fe      	b.n	8000e56 <main+0x1ce>
  sConfig.Channel = ADC_CHANNEL_8;
 8000e58:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <main+0x2b4>)
 8000e5a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e5e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e62:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e64:	f003 f95e 	bl	8004124 <HAL_ADC_ConfigChannel>
 8000e68:	b108      	cbz	r0, 8000e6e <main+0x1e6>
 8000e6a:	b672      	cpsid	i
 8000e6c:	e7fe      	b.n	8000e6c <main+0x1e4>
  hadc2.Instance = ADC2;
 8000e6e:	4c34      	ldr	r4, [pc, #208]	; (8000f40 <main+0x2b8>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e70:	9001      	str	r0, [sp, #4]
 8000e72:	4601      	mov	r1, r0
 8000e74:	223c      	movs	r2, #60	; 0x3c
 8000e76:	a81c      	add	r0, sp, #112	; 0x70
 8000e78:	f008 fa29 	bl	80092ce <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e7c:	9b01      	ldr	r3, [sp, #4]
  hadc2.Instance = ADC2;
 8000e7e:	4a31      	ldr	r2, [pc, #196]	; (8000f44 <main+0x2bc>)
  hadc2.Init.NbrOfConversion = 1;
 8000e80:	6226      	str	r6, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e82:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e84:	e9c4 3604 	strd	r3, r6, [r4, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e88:	6063      	str	r3, [r4, #4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e8a:	e9c4 3b02 	strd	r3, fp, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	61a7      	str	r7, [r4, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e90:	7723      	strb	r3, [r4, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e92:	7763      	strb	r3, [r4, #29]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e94:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e98:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e9c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hadc2.Instance = ADC2;
 8000ea2:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ea4:	f003 f82e 	bl	8003f04 <HAL_ADC_Init>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	b108      	cbz	r0, 8000eb0 <main+0x228>
 8000eac:	b672      	cpsid	i
 8000eae:	e7fe      	b.n	8000eae <main+0x226>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000eb0:	a319      	add	r3, pc, #100	; (adr r3, 8000f18 <main+0x290>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	2704      	movs	r7, #4
 8000eb8:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8000ebc:	f04f 0800 	mov.w	r8, #0
 8000ec0:	e9cd 7820 	strd	r7, r8, [sp, #128]	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ec4:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000ec6:	2780      	movs	r7, #128	; 0x80
 8000ec8:	f04f 0880 	mov.w	r8, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ecc:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000ece:	9524      	str	r5, [sp, #144]	; 0x90
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ed0:	f88d 6094 	strb.w	r6, [sp, #148]	; 0x94
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ed4:	f88d 6095 	strb.w	r6, [sp, #149]	; 0x95
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000ed8:	f88d 6096 	strb.w	r6, [sp, #150]	; 0x96
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000edc:	e9cd 7826 	strd	r7, r8, [sp, #152]	; 0x98
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000ee0:	f88d 60a0 	strb.w	r6, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000ee4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ee8:	f003 fb4c 	bl	8004584 <HAL_ADCEx_InjectedConfigChannel>
 8000eec:	b108      	cbz	r0, 8000ef2 <main+0x26a>
 8000eee:	b672      	cpsid	i
 8000ef0:	e7fe      	b.n	8000ef0 <main+0x268>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <main+0x2c0>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ef4:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ef8:	4620      	mov	r0, r4
 8000efa:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000efc:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000efe:	f003 fb41 	bl	8004584 <HAL_ADCEx_InjectedConfigChannel>
 8000f02:	b108      	cbz	r0, 8000f08 <main+0x280>
 8000f04:	b672      	cpsid	i
 8000f06:	e7fe      	b.n	8000f06 <main+0x27e>
  hcordic.Instance = CORDIC;
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <main+0x2c4>)
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <main+0x2c8>)
 8000f0c:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f0e:	f003 fe71 	bl	8004bf4 <HAL_CORDIC_Init>
 8000f12:	b1f8      	cbz	r0, 8000f54 <main+0x2cc>
 8000f14:	b672      	cpsid	i
 8000f16:	e7fe      	b.n	8000f16 <main+0x28e>
 8000f18:	1d500080 	.word	0x1d500080
 8000f1c:	00000009 	.word	0x00000009
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000800 	.word	0x48000800
 8000f28:	20001784 	.word	0x20001784
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	04300002 	.word	0x04300002
 8000f34:	1d500080 	.word	0x1d500080
 8000f38:	08600004 	.word	0x08600004
 8000f3c:	21800100 	.word	0x21800100
 8000f40:	20001718 	.word	0x20001718
 8000f44:	50000100 	.word	0x50000100
 8000f48:	19200040 	.word	0x19200040
 8000f4c:	20001850 	.word	0x20001850
 8000f50:	40020c00 	.word	0x40020c00
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f54:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8000f56:	4d9b      	ldr	r5, [pc, #620]	; (80011c4 <main+0x53c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f58:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	2234      	movs	r2, #52	; 0x34
 8000f5e:	a81c      	add	r0, sp, #112	; 0x70
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f60:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000f64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	9409      	str	r4, [sp, #36]	; 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000f6a:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000f70:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000f74:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8000f78:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000f7e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000f82:	f44f 7680 	mov.w	r6, #256	; 0x100
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f86:	f008 f9a2 	bl	80092ce <memset>
  htim1.Instance = TIM1;
 8000f8a:	498f      	ldr	r1, [pc, #572]	; (80011c8 <main+0x540>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000f8c:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f8e:	2220      	movs	r2, #32
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000f92:	f640 3311 	movw	r3, #2833	; 0xb11
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000f96:	2401      	movs	r4, #1
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f98:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8000f9a:	6029      	str	r1, [r5, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f9c:	60aa      	str	r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000f9e:	e9c5 3603 	strd	r3, r6, [r5, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000fa2:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa4:	f004 fe30 	bl	8005c08 <HAL_TIM_Base_Init>
 8000fa8:	b108      	cbz	r0, 8000fae <main+0x326>
 8000faa:	b672      	cpsid	i
 8000fac:	e7fe      	b.n	8000fac <main+0x324>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f004 feca 	bl	8005d48 <HAL_TIM_PWM_Init>
 8000fb4:	b108      	cbz	r0, 8000fba <main+0x332>
 8000fb6:	b672      	cpsid	i
 8000fb8:	e7fe      	b.n	8000fb8 <main+0x330>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000fba:	2310      	movs	r3, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000fbc:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000fbe:	a90f      	add	r1, sp, #60	; 0x3c
 8000fc0:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000fc2:	9310      	str	r3, [sp, #64]	; 0x40
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000fc4:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000fc6:	f005 fa23 	bl	8006410 <HAL_TIM_SlaveConfigSynchro>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b108      	cbz	r0, 8000fd2 <main+0x34a>
 8000fce:	b672      	cpsid	i
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x348>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000fd2:	2770      	movs	r7, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd4:	a909      	add	r1, sp, #36	; 0x24
 8000fd6:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000fdc:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fde:	f005 fab9 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	b108      	cbz	r0, 8000fe8 <main+0x360>
 8000fe4:	b672      	cpsid	i
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x35e>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000fe8:	aa0c      	add	r2, sp, #48	; 0x30
 8000fea:	4621      	mov	r1, r4
 8000fec:	4628      	mov	r0, r5
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000fee:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8000ff2:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000ff4:	f005 fb50 	bl	8006698 <HAL_TIMEx_ConfigBreakInput>
 8000ff8:	b108      	cbz	r0, 8000ffe <main+0x376>
 8000ffa:	b672      	cpsid	i
 8000ffc:	e7fe      	b.n	8000ffc <main+0x374>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001000:	2460      	movs	r4, #96	; 0x60
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001002:	f44f 63b1 	mov.w	r3, #1416	; 0x588
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001006:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100a:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100e:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	a914      	add	r1, sp, #80	; 0x50
 8001012:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001016:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	f005 f806 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 800101c:	b108      	cbz	r0, 8001022 <main+0x39a>
 800101e:	b672      	cpsid	i
 8001020:	e7fe      	b.n	8001020 <main+0x398>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001022:	2204      	movs	r2, #4
 8001024:	a914      	add	r1, sp, #80	; 0x50
 8001026:	4628      	mov	r0, r5
 8001028:	f004 fffe 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 800102c:	b108      	cbz	r0, 8001032 <main+0x3aa>
 800102e:	b672      	cpsid	i
 8001030:	e7fe      	b.n	8001030 <main+0x3a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001032:	2208      	movs	r2, #8
 8001034:	a914      	add	r1, sp, #80	; 0x50
 8001036:	4628      	mov	r0, r5
 8001038:	f004 fff6 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 800103c:	b108      	cbz	r0, 8001042 <main+0x3ba>
 800103e:	b672      	cpsid	i
 8001040:	e7fe      	b.n	8001040 <main+0x3b8>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001042:	f44f 6331 	mov.w	r3, #2832	; 0xb10
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001046:	220c      	movs	r2, #12
 8001048:	a914      	add	r1, sp, #80	; 0x50
 800104a:	4628      	mov	r0, r5
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800104c:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800104e:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001050:	f004 ffea 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	b108      	cbz	r0, 800105c <main+0x3d4>
 8001058:	b672      	cpsid	i
 800105a:	e7fe      	b.n	800105a <main+0x3d2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001060:	f44f 6280 	mov.w	r2, #1024	; 0x400
  sBreakDeadTimeConfig.DeadTime = 0;
 8001064:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001066:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800106a:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106e:	9328      	str	r3, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001070:	911c      	str	r1, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800107a:	921d      	str	r2, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800107c:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.BreakFilter = 3;
 800107e:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001084:	9121      	str	r1, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001086:	4628      	mov	r0, r5
 8001088:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800108a:	961e      	str	r6, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakFilter = 3;
 800108c:	9222      	str	r2, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800108e:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001090:	f005 fab4 	bl	80065fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001094:	b108      	cbz	r0, 800109a <main+0x412>
 8001096:	b672      	cpsid	i
 8001098:	e7fe      	b.n	8001098 <main+0x410>
  htim2.Instance = TIM2;
 800109a:	4c4c      	ldr	r4, [pc, #304]	; (80011cc <main+0x544>)
  HAL_TIM_MspPostInit(&htim1);
 800109c:	4849      	ldr	r0, [pc, #292]	; (80011c4 <main+0x53c>)
  htim2.Instance = TIM2;
 800109e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  HAL_TIM_MspPostInit(&htim1);
 80010a2:	f002 fcb1 	bl	8003a08 <HAL_TIM_MspPostInit>
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a6:	2601      	movs	r6, #1
  TIM_Encoder_InitTypeDef sConfig = {0};
 80010a8:	2300      	movs	r3, #0
  htim2.Init.Period = M1_PULSE_NBR;
 80010aa:	f640 72ff 	movw	r2, #4095	; 0xfff
  htim2.Instance = TIM2;
 80010ae:	6025      	str	r5, [r4, #0]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80010b0:	270c      	movs	r7, #12
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010b2:	a91c      	add	r1, sp, #112	; 0x70
 80010b4:	4620      	mov	r0, r4
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b6:	2503      	movs	r5, #3
  htim2.Init.Prescaler = 0;
 80010b8:	6063      	str	r3, [r4, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ba:	931d      	str	r3, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 80010c0:	9316      	str	r3, [sp, #88]	; 0x58
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	61a3      	str	r3, [r4, #24]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80010c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80010ca:	9321      	str	r3, [sp, #132]	; 0x84
 80010cc:	9323      	str	r3, [sp, #140]	; 0x8c
  htim2.Init.Period = M1_PULSE_NBR;
 80010ce:	60e2      	str	r2, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010d0:	951c      	str	r5, [sp, #112]	; 0x70
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d2:	961e      	str	r6, [sp, #120]	; 0x78
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	9622      	str	r6, [sp, #136]	; 0x88
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80010d6:	9720      	str	r7, [sp, #128]	; 0x80
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80010d8:	9724      	str	r7, [sp, #144]	; 0x90
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010da:	f004 fed3 	bl	8005e84 <HAL_TIM_Encoder_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	b108      	cbz	r0, 80010e6 <main+0x45e>
 80010e2:	b672      	cpsid	i
 80010e4:	e7fe      	b.n	80010e4 <main+0x45c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e6:	a914      	add	r1, sp, #80	; 0x50
 80010e8:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ee:	f005 fa31 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 80010f2:	b108      	cbz	r0, 80010f8 <main+0x470>
 80010f4:	b672      	cpsid	i
 80010f6:	e7fe      	b.n	80010f6 <main+0x46e>
  huart2.Instance = USART2;
 80010f8:	4c35      	ldr	r4, [pc, #212]	; (80011d0 <main+0x548>)
 80010fa:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <main+0x54c>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fc:	62a0      	str	r0, [r4, #40]	; 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010fe:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001102:	e9c4 0704 	strd	r0, r7, [r4, #16]
  huart2.Init.BaudRate = 1843200;
 8001106:	f44f 13e1 	mov.w	r3, #1843200	; 0x1c2000
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800110a:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800110e:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001112:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 1843200;
 8001114:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001118:	f005 fb7a 	bl	8006810 <HAL_UART_Init>
 800111c:	4601      	mov	r1, r0
 800111e:	b108      	cbz	r0, 8001124 <main+0x49c>
 8001120:	b672      	cpsid	i
 8001122:	e7fe      	b.n	8001122 <main+0x49a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	4620      	mov	r0, r4
 8001126:	f005 fdf5 	bl	8006d14 <HAL_UARTEx_SetTxFifoThreshold>
 800112a:	4601      	mov	r1, r0
 800112c:	b108      	cbz	r0, 8001132 <main+0x4aa>
 800112e:	b672      	cpsid	i
 8001130:	e7fe      	b.n	8001130 <main+0x4a8>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001132:	4620      	mov	r0, r4
 8001134:	f005 fe2c 	bl	8006d90 <HAL_UARTEx_SetRxFifoThreshold>
 8001138:	b108      	cbz	r0, 800113e <main+0x4b6>
 800113a:	b672      	cpsid	i
 800113c:	e7fe      	b.n	800113c <main+0x4b4>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800113e:	4620      	mov	r0, r4
 8001140:	f005 fdca 	bl	8006cd8 <HAL_UARTEx_DisableFifoMode>
 8001144:	4604      	mov	r4, r0
 8001146:	b108      	cbz	r0, 800114c <main+0x4c4>
 8001148:	b672      	cpsid	i
 800114a:	e7fe      	b.n	800114a <main+0x4c2>
  MX_MotorControl_Init();
 800114c:	f000 feec 	bl	8001f28 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001150:	4632      	mov	r2, r6
 8001152:	4629      	mov	r1, r5
 8001154:	2026      	movs	r0, #38	; 0x26
 8001156:	f003 fd79 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800115a:	2026      	movs	r0, #38	; 0x26
 800115c:	f003 fdac 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001160:	4622      	mov	r2, r4
 8001162:	4629      	mov	r1, r5
 8001164:	200b      	movs	r0, #11
 8001166:	f003 fd71 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800116a:	200b      	movs	r0, #11
 800116c:	f003 fda4 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001170:	4632      	mov	r2, r6
 8001172:	2104      	movs	r1, #4
 8001174:	2018      	movs	r0, #24
 8001176:	f003 fd69 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800117a:	2018      	movs	r0, #24
 800117c:	f003 fd9c 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001180:	4622      	mov	r2, r4
 8001182:	4621      	mov	r1, r4
 8001184:	2019      	movs	r0, #25
 8001186:	f003 fd61 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800118a:	2019      	movs	r0, #25
 800118c:	f003 fd94 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001190:	4622      	mov	r2, r4
 8001192:	2102      	movs	r1, #2
 8001194:	2012      	movs	r0, #18
 8001196:	f003 fd59 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800119a:	2012      	movs	r0, #18
 800119c:	f003 fd8c 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80011a0:	4622      	mov	r2, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	201c      	movs	r0, #28
 80011a6:	f003 fd51 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011aa:	201c      	movs	r0, #28
 80011ac:	f003 fd84 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80011b0:	2028      	movs	r0, #40	; 0x28
 80011b2:	4622      	mov	r2, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f003 fd49 	bl	8004c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f003 fd7c 	bl	8004cb8 <HAL_NVIC_EnableIRQ>
 80011c0:	e7fe      	b.n	80011c0 <main+0x538>
 80011c2:	bf00      	nop
 80011c4:	20001878 	.word	0x20001878
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	200018c4 	.word	0x200018c4
 80011d0:	20001910 	.word	0x20001910
 80011d4:	40004400 	.word	0x40004400

080011d8 <Error_Handler>:
 80011d8:	b672      	cpsid	i
 80011da:	e7fe      	b.n	80011da <Error_Handler+0x2>

080011dc <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80011dc:	4b01      	ldr	r3, [pc, #4]	; (80011e4 <MC_StartMotor1+0x8>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	f000 b8de 	b.w	80013a0 <MCI_StartMotor>
 80011e4:	20001a34 	.word	0x20001a34

080011e8 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <MC_StopMotor1+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f000 b8ee 	b.w	80013cc <MCI_StopMotor>
 80011f0:	20001a34 	.word	0x20001a34

080011f4 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80011f4:	4b01      	ldr	r3, [pc, #4]	; (80011fc <MC_GetSTMStateMotor1+0x8>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f000 b8c8 	b.w	800138c <MCI_GetSTMState>
 80011fc:	20001a34 	.word	0x20001a34

08001200 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001200:	2002      	movs	r0, #2
 8001202:	4770      	bx	lr

08001204 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <MC_APP_PostMediumFrequencyHook_M1>:
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <MCI_Init>:
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC,
                     pFOCVars_t pFOCVars, PosCtrl_Handle_t *pPosCtrl, PWMC_Handle_t *pPWMHandle )
{
 800120c:	b410      	push	{r4}
 800120e:	9c01      	ldr	r4, [sp, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pSTC = pSTC;
 8001210:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPosCtrl = pPosCtrl;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001212:	2100      	movs	r1, #0
    pHandle->pPWM = pPWMHandle;
 8001214:	e9c0 4302 	strd	r4, r3, [r0, #8]
    pHandle->pFOCVars = pFOCVars;
 8001218:	6042      	str	r2, [r0, #4]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800121a:	7401      	strb	r1, [r0, #16]
    pHandle->hFinalSpeed = 0;
 800121c:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8001220:	8341      	strh	r1, [r0, #26]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001222:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001226:	7701      	strb	r1, [r0, #28]
    pHandle->State = IDLE;
 8001228:	7741      	strb	r1, [r0, #29]
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800122a:	f8c0 101e 	str.w	r1, [r0, #30]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800122e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001232:	4770      	bx	lr

08001234 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001234:	b410      	push	{r4}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001236:	2301      	movs	r3, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001238:	2403      	movs	r4, #3
 800123a:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    pHandle->hFinalSpeed = hFinalSpeed;
 800123e:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 8001240:	8342      	strh	r2, [r0, #26]
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001242:	7403      	strb	r3, [r0, #16]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001244:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
{
 8001250:	b430      	push	{r4, r5}
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001252:	2304      	movs	r3, #4
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001254:	2502      	movs	r5, #2
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001256:	2401      	movs	r4, #1
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001258:	7405      	strb	r5, [r0, #16]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800125a:	f880 4022 	strb.w	r4, [r0, #34]	; 0x22
    pHandle->hFinalTorque = hFinalTorque;
 800125e:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 8001260:	8342      	strh	r2, [r0, #26]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001262:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001266:	bc30      	pop	{r4, r5}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 800126c:	b410      	push	{r4}
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800126e:	2201      	movs	r2, #1
{
 8001270:	b083      	sub	sp, #12
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001272:	2403      	movs	r4, #3
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001274:	2304      	movs	r3, #4
    pHandle->Iqdref.q = Iqdref.q;
 8001276:	f8c0 1016 	str.w	r1, [r0, #22]
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800127a:	7404      	strb	r4, [r0, #16]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800127c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001280:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001284:	b003      	add	sp, #12
 8001286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800128a:	4770      	bx	lr

0800128c <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float FinalPosition, float Duration)
{
 800128c:	b510      	push	{r4, lr}
 800128e:	4604      	mov	r4, r0
 8001290:	ed2d 8b02 	vpush	{d8}
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001294:	e9d0 0300 	ldrd	r0, r3, [r0]
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001298:	2200      	movs	r2, #0
{
 800129a:	b082      	sub	sp, #8
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 80012a0:	eeb0 8a60 	vmov.f32	s16, s1
 80012a4:	eef0 8a40 	vmov.f32	s17, s0
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80012a8:	f007 fc5a 	bl	8008b60 <STC_GetSpeedSensor>
 80012ac:	f007 fbfe 	bl	8008aac <SPD_GetMecAngle>
    if (Duration > 0)
 80012b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80012b8:	9001      	str	r0, [sp, #4]
    if (Duration > 0)
 80012ba:	dd15      	ble.n	80012e8 <MCI_ExecPositionCommand+0x5c>
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80012bc:	ee07 0a90 	vmov	s15, r0
 80012c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80012f4 <MCI_ExecPositionCommand+0x68>
    {
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 80012c4:	68e0      	ldr	r0, [r4, #12]
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 80012ca:	eeb0 1a48 	vmov.f32	s2, s16
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 80012ce:	ee27 0a80 	vmul.f32	s0, s15, s0
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 80012d2:	ee78 0ac0 	vsub.f32	s1, s17, s0
 80012d6:	f007 fd0b 	bl	8008cf0 <TC_MoveCommand>
    else
    {
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
    }

    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 80012da:	2304      	movs	r3, #4
 80012dc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80012e0:	b002      	add	sp, #8
 80012e2:	ecbd 8b02 	vpop	{d8}
 80012e6:	bd10      	pop	{r4, pc}
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 80012e8:	eeb0 0a68 	vmov.f32	s0, s17
 80012ec:	68e0      	ldr	r0, [r4, #12]
 80012ee:	f007 fd6f 	bl	8008dd0 <TC_FollowCommand>
 80012f2:	e7f2      	b.n	80012da <MCI_ExecPositionCommand+0x4e>
 80012f4:	38c90fdb 	.word	0x38c90fdb

080012f8 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80012f8:	8bc3      	ldrh	r3, [r0, #30]
{
 80012fa:	b410      	push	{r4}
  pHandle->PastFaults |= hSetErrors;
 80012fc:	8c04      	ldrh	r4, [r0, #32]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80012fe:	430b      	orrs	r3, r1
 8001300:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001304:	4321      	orrs	r1, r4
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001306:	83c2      	strh	r2, [r0, #30]
  pHandle->PastFaults |= hSetErrors;
 8001308:	8401      	strh	r1, [r0, #32]

  return;
}
 800130a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800130e:	4770      	bx	lr

08001310 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001310:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8001314:	2b01      	cmp	r3, #1
 8001316:	d000      	beq.n	800131a <MCI_ExecBufferedCommands+0xa>
 8001318:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800131a:	7c02      	ldrb	r2, [r0, #16]
 800131c:	2a02      	cmp	r2, #2
{
 800131e:	b510      	push	{r4, lr}
 8001320:	4604      	mov	r4, r0
      switch (pHandle->lastCommand)
 8001322:	d022      	beq.n	800136a <MCI_ExecBufferedCommands+0x5a>
 8001324:	2a03      	cmp	r2, #3
 8001326:	d005      	beq.n	8001334 <MCI_ExecBufferedCommands+0x24>
 8001328:	2a01      	cmp	r2, #1
 800132a:	d00d      	beq.n	8001348 <MCI_ExecBufferedCommands+0x38>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800132c:	2303      	movs	r3, #3
 800132e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001332:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001334:	6842      	ldr	r2, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001336:	f8d0 1016 	ldr.w	r1, [r0, #22]
 800133a:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800133c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001340:	2302      	movs	r3, #2
 8001342:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8001346:	bd10      	pop	{r4, pc}
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001348:	e9d0 0300 	ldrd	r0, r3, [r0]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001352:	2103      	movs	r1, #3
 8001354:	f007 fc16 	bl	8008b84 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001358:	8b62      	ldrh	r2, [r4, #26]
 800135a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	f007 fc14 	bl	8008b8c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001364:	2800      	cmp	r0, #0
 8001366:	d0e1      	beq.n	800132c <MCI_ExecBufferedCommands+0x1c>
 8001368:	e7ea      	b.n	8001340 <MCI_ExecBufferedCommands+0x30>
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800136a:	e9d0 0300 	ldrd	r0, r3, [r0]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001374:	2104      	movs	r1, #4
 8001376:	f007 fc05 	bl	8008b84 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 800137a:	8b62      	ldrh	r2, [r4, #26]
 800137c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8001380:	6820      	ldr	r0, [r4, #0]
 8001382:	f007 fc03 	bl	8008b8c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001386:	2800      	cmp	r0, #0
 8001388:	d0d0      	beq.n	800132c <MCI_ExecBufferedCommands+0x1c>
 800138a:	e7d9      	b.n	8001340 <MCI_ExecBufferedCommands+0x30>

0800138c <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 800138c:	7f40      	ldrb	r0, [r0, #29]
 800138e:	4770      	bx	lr

08001390 <MCI_GetCurrentPosition>:
__weak float MCI_GetCurrentPosition(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : TC_GetCurrentPosition(pHandle->pPosCtrl));
#else
  return (TC_GetCurrentPosition(pHandle->pPosCtrl));
 8001390:	68c0      	ldr	r0, [r0, #12]
 8001392:	f007 beed 	b.w	8009170 <TC_GetCurrentPosition>
 8001396:	bf00      	nop

08001398 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001398:	8c00      	ldrh	r0, [r0, #32]
 800139a:	4770      	bx	lr

0800139c <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 800139c:	8bc0      	ldrh	r0, [r0, #30]
 800139e:	4770      	bx	lr

080013a0 <MCI_StartMotor>:
{
 80013a0:	b510      	push	{r4, lr}
 80013a2:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80013a4:	f7ff fff2 	bl	800138c <MCI_GetSTMState>
 80013a8:	b108      	cbz	r0, 80013ae <MCI_StartMotor+0xe>
    RetVal = false;
 80013aa:	2000      	movs	r0, #0
}
 80013ac:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff fff2 	bl	8001398 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d1f8      	bne.n	80013aa <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff ffef 	bl	800139c <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013be:	2800      	cmp	r0, #0
 80013c0:	d1f3      	bne.n	80013aa <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80013c2:	2001      	movs	r0, #1
 80013c4:	7720      	strb	r0, [r4, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013c6:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
}
 80013ca:	bd10      	pop	{r4, pc}

080013cc <MCI_StopMotor>:
{
 80013cc:	b538      	push	{r3, r4, r5, lr}
 80013ce:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 80013d0:	f7ff ffdc 	bl	800138c <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80013d4:	b150      	cbz	r0, 80013ec <MCI_StopMotor+0x20>
 80013d6:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013da:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80013dc:	bf18      	it	ne
 80013de:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013e0:	f7ff ffda 	bl	8001398 <MCI_GetOccurredFaults>
 80013e4:	b140      	cbz	r0, 80013f8 <MCI_StopMotor+0x2c>
    RetVal = false;
 80013e6:	2400      	movs	r4, #0
}
 80013e8:	4620      	mov	r0, r4
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 80013ec:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013ee:	4628      	mov	r0, r5
 80013f0:	f7ff ffd2 	bl	8001398 <MCI_GetOccurredFaults>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d1f6      	bne.n	80013e6 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80013f8:	4628      	mov	r0, r5
 80013fa:	f7ff ffcf 	bl	800139c <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1f1      	bne.n	80013e6 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001402:	2c00      	cmp	r4, #0
 8001404:	d0ef      	beq.n	80013e6 <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 8001406:	2305      	movs	r3, #5
 8001408:	772b      	strb	r3, [r5, #28]
}
 800140a:	4620      	mov	r0, r4
 800140c:	bd38      	pop	{r3, r4, r5, pc}
 800140e:	bf00      	nop

08001410 <MCI_FaultAcknowledged>:
{
 8001410:	b510      	push	{r4, lr}
 8001412:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001414:	f7ff ffba 	bl	800138c <MCI_GetSTMState>
 8001418:	280b      	cmp	r0, #11
 800141a:	d001      	beq.n	8001420 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 800141c:	2000      	movs	r0, #0
}
 800141e:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff ffbb 	bl	800139c <MCI_GetCurrentFaults>
 8001426:	2800      	cmp	r0, #0
 8001428:	d1f8      	bne.n	800141c <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800142a:	2302      	movs	r3, #2
    pHandle->PastFaults = MC_NO_FAULTS;
 800142c:	8420      	strh	r0, [r4, #32]
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800142e:	7723      	strb	r3, [r4, #28]
    RetVal = true;
 8001430:	2001      	movs	r0, #1
}
 8001432:	bd10      	pop	{r4, pc}

08001434 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001434:	8c03      	ldrh	r3, [r0, #32]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001436:	8bc0      	ldrh	r0, [r0, #30]

  return (LocalFaultState);
}
 8001438:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001440:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001448:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001450:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001458:	8b40      	ldrh	r0, [r0, #26]
 800145a:	4770      	bx	lr

0800145c <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 800145c:	6800      	ldr	r0, [r0, #0]
 800145e:	f007 bbdb 	b.w	8008c18 <STC_StopRamp>
 8001462:	bf00      	nop

08001464 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001464:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001466:	6800      	ldr	r0, [r0, #0]
 8001468:	f007 fb7a 	bl	8008b60 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 800146c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001470:	f007 bb1e 	b.w	8008ab0 <SPD_GetAvrgMecSpeedUnit>

08001474 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001474:	6800      	ldr	r0, [r0, #0]
 8001476:	f007 bb7d 	b.w	8008b74 <STC_GetMecSpeedRefUnit>
 800147a:	bf00      	nop

0800147c <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 800147c:	6843      	ldr	r3, [r0, #4]
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	b283      	uxth	r3, r0
{
 8001482:	b082      	sub	sp, #8
#endif
}
 8001484:	f363 000f 	bfi	r0, r3, #0, #16
 8001488:	b002      	add	sp, #8
 800148a:	4770      	bx	lr

0800148c <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 800148c:	6843      	ldr	r3, [r0, #4]
 800148e:	6858      	ldr	r0, [r3, #4]
 8001490:	b283      	uxth	r3, r0
{
 8001492:	b082      	sub	sp, #8
#endif
}
 8001494:	f363 000f 	bfi	r0, r3, #0, #16
 8001498:	b002      	add	sp, #8
 800149a:	4770      	bx	lr

0800149c <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 800149c:	6843      	ldr	r3, [r0, #4]
 800149e:	68d8      	ldr	r0, [r3, #12]
 80014a0:	b283      	uxth	r3, r0
{
 80014a2:	b082      	sub	sp, #8
#endif
}
 80014a4:	f363 000f 	bfi	r0, r3, #0, #16
 80014a8:	b002      	add	sp, #8
 80014aa:	4770      	bx	lr

080014ac <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80014ac:	6843      	ldr	r3, [r0, #4]
 80014ae:	6918      	ldr	r0, [r3, #16]
 80014b0:	b283      	uxth	r3, r0
{
 80014b2:	b082      	sub	sp, #8
#endif
}
 80014b4:	f363 000f 	bfi	r0, r3, #0, #16
 80014b8:	b002      	add	sp, #8
 80014ba:	4770      	bx	lr

080014bc <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80014bc:	6843      	ldr	r3, [r0, #4]
 80014be:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80014c2:	b283      	uxth	r3, r0
{
 80014c4:	b082      	sub	sp, #8
#endif
}
 80014c6:	f363 000f 	bfi	r0, r3, #0, #16
 80014ca:	b002      	add	sp, #8
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80014d0:	6843      	ldr	r3, [r0, #4]
 80014d2:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80014d6:	b283      	uxth	r3, r0
{
 80014d8:	b082      	sub	sp, #8
#endif
}
 80014da:	f363 000f 	bfi	r0, r3, #0, #16
 80014de:	b002      	add	sp, #8
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80014e4:	6843      	ldr	r3, [r0, #4]
#endif
}
 80014e6:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80014ea:	4770      	bx	lr

080014ec <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80014ec:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80014ee:	e9d0 0400 	ldrd	r0, r4, [r0]
 80014f2:	f007 fbc5 	bl	8008c80 <STC_GetDefaultIqdref>
 80014f6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80014fa:	8220      	strh	r0, [r4, #16]
 80014fc:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80014fe:	bd10      	pop	{r4, pc}

08001500 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001500:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001504:	b202      	sxth	r2, r0
 8001506:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 800150a:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800150e:	fb13 f301 	smulbb	r3, r3, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001512:	4240      	negs	r0, r0
 8001514:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8001518:	13c0      	asrs	r0, r0, #15
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800151a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 800151e:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 8001520:	da04      	bge.n	800152c <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001522:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8001526:	da0c      	bge.n	8001542 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MCM_Clarke+0x48>)
 800152a:	e001      	b.n	8001530 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 800152c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return (Output);
 8001530:	b292      	uxth	r2, r2
 8001532:	2000      	movs	r0, #0
 8001534:	b29b      	uxth	r3, r3
 8001536:	f362 000f 	bfi	r0, r2, #0, #16
 800153a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800153e:	b004      	add	sp, #16
 8001540:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001542:	b203      	sxth	r3, r0
  if (((int16_t )-32768) == Output.beta)
 8001544:	d1f4      	bne.n	8001530 <MCM_Clarke+0x30>
 8001546:	e7ef      	b.n	8001528 <MCM_Clarke+0x28>
 8001548:	ffff8001 	.word	0xffff8001

0800154c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800154e:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8001552:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001556:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 800155a:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800155c:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800155e:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001560:	2000      	movs	r0, #0
 8001562:	b29a      	uxth	r2, r3
 8001564:	f362 000f 	bfi	r0, r2, #0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
{
 800156a:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 800156c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001570:	b002      	add	sp, #8
 8001572:	4770      	bx	lr
 8001574:	40020c00 	.word	0x40020c00

08001578 <MCM_Park>:
{
 8001578:	b530      	push	{r4, r5, lr}
 800157a:	b085      	sub	sp, #20
 800157c:	b204      	sxth	r4, r0
 800157e:	9001      	str	r0, [sp, #4]
 8001580:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001582:	4608      	mov	r0, r1
 8001584:	f7ff ffe2 	bl	800154c <MCM_Trig_Functions>
 8001588:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800158a:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800158e:	1400      	asrs	r0, r0, #16
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001590:	fb05 3310 	mls	r3, r5, r0, r3
 8001594:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8001596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800159a:	da04      	bge.n	80015a6 <MCM_Park+0x2e>
  else if (wqd_tmp < (-32768))
 800159c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80015a0:	da1e      	bge.n	80015e0 <MCM_Park+0x68>
    Output.q = -32767;
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <MCM_Park+0x70>)
 80015a4:	e001      	b.n	80015aa <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 80015a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80015aa:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80015ae:	fb04 1000 	mla	r0, r4, r0, r1
 80015b2:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 80015b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80015b8:	da04      	bge.n	80015c4 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 80015ba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80015be:	da0c      	bge.n	80015da <MCM_Park+0x62>
    Output.d = -32767;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MCM_Park+0x70>)
 80015c2:	e001      	b.n	80015c8 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 80015c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 80015c8:	b292      	uxth	r2, r2
 80015ca:	2000      	movs	r0, #0
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f362 000f 	bfi	r0, r2, #0, #16
 80015d2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80015d6:	b005      	add	sp, #20
 80015d8:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80015da:	b203      	sxth	r3, r0
  if (((int16_t)-32768) == Output.d)
 80015dc:	d1f4      	bne.n	80015c8 <MCM_Park+0x50>
 80015de:	e7ef      	b.n	80015c0 <MCM_Park+0x48>
    hqd_tmp = ((int16_t)wqd_tmp);
 80015e0:	b21a      	sxth	r2, r3
  if (((int16_t )-32768) == Output.q)
 80015e2:	d1e2      	bne.n	80015aa <MCM_Park+0x32>
 80015e4:	e7dd      	b.n	80015a2 <MCM_Park+0x2a>
 80015e6:	bf00      	nop
 80015e8:	ffff8001 	.word	0xffff8001

080015ec <MCM_Rev_Park>:
{
 80015ec:	b530      	push	{r4, r5, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	b204      	sxth	r4, r0
 80015f2:	1405      	asrs	r5, r0, #16
 80015f4:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015f6:	4608      	mov	r0, r1
 80015f8:	f7ff ffa8 	bl	800154c <MCM_Trig_Functions>
 80015fc:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80015fe:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001602:	b200      	sxth	r0, r0
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001604:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001608:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800160c:	fb04 0313 	mls	r3, r4, r3, r0
  return (Output);
 8001610:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8001614:	2000      	movs	r0, #0
 8001616:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800161a:	f362 000f 	bfi	r0, r2, #0, #16
 800161e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001622:	b005      	add	sp, #20
 8001624:	bd30      	pop	{r4, r5, pc}
 8001626:	bf00      	nop

08001628 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001628:	2800      	cmp	r0, #0
 800162a:	dd09      	ble.n	8001640 <MCM_Sqrt+0x18>
 800162c:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <MCM_Sqrt+0x1c>)
 8001630:	f240 1269 	movw	r2, #361	; 0x169
 8001634:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001636:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001638:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800163a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 800163c:	b662      	cpsie	i
 800163e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001640:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001642:	4770      	bx	lr
 8001644:	40020c00 	.word	0x40020c00

08001648 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <FOC_Clear+0x68>)
 8001650:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2400      	movs	r4, #0
 8001658:	18d7      	adds	r7, r2, r3
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 800165a:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 800165e:	50d4      	str	r4, [r2, r3]
{
 8001660:	4605      	mov	r5, r0
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8001662:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001666:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8001668:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800166a:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 800166e:	5194      	str	r4, [r2, r6]
 8001670:	1997      	adds	r7, r2, r6
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001672:	4810      	ldr	r0, [pc, #64]	; (80016b4 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8001674:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001676:	1856      	adds	r6, r2, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001678:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800167a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 800167e:	5054      	str	r4, [r2, r1]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001680:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8001682:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001684:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001686:	f006 f82d 	bl	80076e4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <FOC_Clear+0x70>)
 800168c:	4621      	mov	r1, r4
 800168e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001692:	f006 f827 	bl	80076e4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <FOC_Clear+0x74>)
 8001698:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800169c:	f007 fa62 	bl	8008b64 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <FOC_Clear+0x78>)
 80016a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80016a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016aa:	f000 bd79 	b.w	80021a0 <PWMC_SwitchOffPWM>
 80016ae:	bf00      	nop
 80016b0:	2000050c 	.word	0x2000050c
 80016b4:	200003ec 	.word	0x200003ec
 80016b8:	200003e8 	.word	0x200003e8
 80016bc:	200003f4 	.word	0x200003f4
 80016c0:	20000540 	.word	0x20000540

080016c4 <MCboot>:
  if (MC_NULL == pMCIList)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d078      	beq.n	80017ba <MCboot+0xf6>
{
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80016cc:	f8df b138 	ldr.w	fp, [pc, #312]	; 8001808 <MCboot+0x144>
    bMCBootCompleted = (uint8_t )0;
 80016d0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800180c <MCboot+0x148>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80016d4:	4c39      	ldr	r4, [pc, #228]	; (80017bc <MCboot+0xf8>)
 80016d6:	4d3a      	ldr	r5, [pc, #232]	; (80017c0 <MCboot+0xfc>)
    RVBS_Init(&BusVoltageSensor_M1);
 80016d8:	f8df a134 	ldr.w	sl, [pc, #308]	; 8001810 <MCboot+0x14c>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 80016dc:	4f39      	ldr	r7, [pc, #228]	; (80017c4 <MCboot+0x100>)
{
 80016de:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 80016e0:	f04f 0800 	mov.w	r8, #0
 80016e4:	4606      	mov	r6, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80016e6:	4838      	ldr	r0, [pc, #224]	; (80017c8 <MCboot+0x104>)
 80016e8:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 80016ec:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 80016f0:	f006 fbf6 	bl	8007ee0 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 80016f4:	4835      	ldr	r0, [pc, #212]	; (80017cc <MCboot+0x108>)
 80016f6:	f7fe ff39 	bl	800056c <ASPEP_start>
    startTimers();
 80016fa:	f006 f8b7 	bl	800786c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80016fe:	4834      	ldr	r0, [pc, #208]	; (80017d0 <MCboot+0x10c>)
 8001700:	f005 ffdc 	bl	80076bc <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8001704:	4833      	ldr	r0, [pc, #204]	; (80017d4 <MCboot+0x110>)
 8001706:	f005 fc09 	bl	8006f1c <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800170a:	6821      	ldr	r1, [r4, #0]
 800170c:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <MCboot+0x114>)
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <MCboot+0x110>)
 8001710:	4628      	mov	r0, r5
 8001712:	f005 fbb5 	bl	8006e80 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <MCboot+0x118>)
  PID_HandleInit(&PID_PosParamsM1);
 8001718:	4831      	ldr	r0, [pc, #196]	; (80017e0 <MCboot+0x11c>)
    pEAC[M1] = &EncAlignCtrlM1;
 800171a:	601d      	str	r5, [r3, #0]
  PID_HandleInit(&PID_PosParamsM1);
 800171c:	f005 ffce 	bl	80076bc <PID_HandleInit>
  TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <MCboot+0x110>)
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <MCboot+0x120>)
 8001724:	492e      	ldr	r1, [pc, #184]	; (80017e0 <MCboot+0x11c>)
 8001726:	4830      	ldr	r0, [pc, #192]	; (80017e8 <MCboot+0x124>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001728:	4d30      	ldr	r5, [pc, #192]	; (80017ec <MCboot+0x128>)
  TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 800172a:	f007 fabd 	bl	8008ca8 <TC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <MCboot+0x110>)
 8001730:	4927      	ldr	r1, [pc, #156]	; (80017d0 <MCboot+0x10c>)
 8001732:	6820      	ldr	r0, [r4, #0]
 8001734:	f007 f9fe 	bl	8008b34 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001738:	4827      	ldr	r0, [pc, #156]	; (80017d8 <MCboot+0x114>)
 800173a:	f007 fd53 	bl	80091e4 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 800173e:	482c      	ldr	r0, [pc, #176]	; (80017f0 <MCboot+0x12c>)
 8001740:	f005 ffbc 	bl	80076bc <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001744:	482b      	ldr	r0, [pc, #172]	; (80017f4 <MCboot+0x130>)
 8001746:	f005 ffb9 	bl	80076bc <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 800174a:	4650      	mov	r0, sl
 800174c:	f007 f932 	bl	80089b4 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MCboot+0x134>)
    NTC_Init(&TempSensor_M1);
 8001752:	482a      	ldr	r0, [pc, #168]	; (80017fc <MCboot+0x138>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001754:	681b      	ldr	r3, [r3, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001756:	e9c3 5a02 	strd	r5, sl, [r3, #8]
    NTC_Init(&TempSensor_M1);
 800175a:	f005 ff6d 	bl	8007638 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 800175e:	4828      	ldr	r0, [pc, #160]	; (8001800 <MCboot+0x13c>)
 8001760:	f007 f998 	bl	8008a94 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001764:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001768:	4640      	mov	r0, r8
 800176a:	f7ff ff6d 	bl	8001648 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800176e:	6820      	ldr	r0, [r4, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001770:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001774:	f007 fa84 	bl	8008c80 <STC_GetDefaultIqdref>
 8001778:	6128      	str	r0, [r5, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	f007 fa80 	bl	8008c80 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MCboot+0x140>)
 8001782:	f8db 2000 	ldr.w	r2, [fp]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6821      	ldr	r1, [r4, #0]
 800178a:	9200      	str	r2, [sp, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800178c:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 8001790:	462a      	mov	r2, r5
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001792:	82a8      	strh	r0, [r5, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1], pwmcHandle[M1]);
 8001794:	4638      	mov	r0, r7
 8001796:	f7ff fd39 	bl	800120c <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	f007 fa6c 	bl	8008c78 <STC_GetMecSpeedRefUnitDefault>
 80017a0:	4642      	mov	r2, r8
 80017a2:	4601      	mov	r1, r0
 80017a4:	4638      	mov	r0, r7
 80017a6:	f7ff fd45 	bl	8001234 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80017aa:	6037      	str	r7, [r6, #0]
    MC_APP_BootHook();
 80017ac:	f7ff fd2a 	bl	8001204 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80017b0:	f889 a000 	strb.w	sl, [r9]
}
 80017b4:	b005      	add	sp, #20
 80017b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ba:	4770      	bx	lr
 80017bc:	200003f4 	.word	0x200003f4
 80017c0:	2000015c 	.word	0x2000015c
 80017c4:	200019a0 	.word	0x200019a0
 80017c8:	20000238 	.word	0x20000238
 80017cc:	2000045c 	.word	0x2000045c
 80017d0:	200001d0 	.word	0x200001d0
 80017d4:	200000e0 	.word	0x200000e0
 80017d8:	200003ac 	.word	0x200003ac
 80017dc:	2000053c 	.word	0x2000053c
 80017e0:	200001fc 	.word	0x200001fc
 80017e4:	20000350 	.word	0x20000350
 80017e8:	200002c8 	.word	0x200002c8
 80017ec:	2000050c 	.word	0x2000050c
 80017f0:	200001a4 	.word	0x200001a4
 80017f4:	20000178 	.word	0x20000178
 80017f8:	200003e4 	.word	0x200003e4
 80017fc:	20000384 	.word	0x20000384
 8001800:	20000338 	.word	0x20000338
 8001804:	200003f0 	.word	0x200003f0
 8001808:	20000540 	.word	0x20000540
 800180c:	20000532 	.word	0x20000532
 8001810:	20000000 	.word	0x20000000

08001814 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop

08001818 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <FOC_CalcCurrRef+0x24>)
{
 800181a:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800181c:	2426      	movs	r4, #38	; 0x26
 800181e:	fb04 3400 	mla	r4, r4, r0, r3
 8001822:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001826:	b103      	cbz	r3, 800182a <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001828:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <FOC_CalcCurrRef+0x28>)
 800182c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001830:	f007 f9f6 	bl	8008c20 <STC_CalcTorqueReference>
 8001834:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001836:	8220      	strh	r0, [r4, #16]
}
 8001838:	bd10      	pop	{r4, pc}
 800183a:	bf00      	nop
 800183c:	2000050c 	.word	0x2000050c
 8001840:	200003f4 	.word	0x200003f4

08001844 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001844:	4b01      	ldr	r3, [pc, #4]	; (800184c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001846:	8018      	strh	r0, [r3, #0]
}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000534 	.word	0x20000534

08001850 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001852:	8818      	ldrh	r0, [r3, #0]
 8001854:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001856:	fab0 f080 	clz	r0, r0
 800185a:	0940      	lsrs	r0, r0, #5
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000534 	.word	0x20000534

08001864 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001864:	4b01      	ldr	r3, [pc, #4]	; (800186c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001866:	8018      	strh	r0, [r3, #0]
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000538 	.word	0x20000538

08001870 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001872:	8818      	ldrh	r0, [r3, #0]
 8001874:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001876:	fab0 f080 	clz	r0, r0
 800187a:	0940      	lsrs	r0, r0, #5
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000538 	.word	0x20000538

08001884 <TSK_MediumFrequencyTaskM1>:
{
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001888:	a902      	add	r1, sp, #8
 800188a:	2300      	movs	r3, #0
  PQD_CalcElMotorPower(pMPM[M1]);
 800188c:	4da0      	ldr	r5, [pc, #640]	; (8001b10 <TSK_MediumFrequencyTaskM1+0x28c>)
  int16_t wAux = 0;
 800188e:	f821 3d02 	strh.w	r3, [r1, #-2]!
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001892:	48a0      	ldr	r0, [pc, #640]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x290>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001894:	4ca0      	ldr	r4, [pc, #640]	; (8001b18 <TSK_MediumFrequencyTaskM1+0x294>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001896:	f005 fbab 	bl	8006ff0 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 800189a:	6828      	ldr	r0, [r5, #0]
 800189c:	f005 ffb8 	bl	8007810 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff fd7b 	bl	800139c <MCI_GetCurrentFaults>
 80018a6:	b118      	cbz	r0, 80018b0 <TSK_MediumFrequencyTaskM1+0x2c>
    Mci[M1].State = FAULT_NOW;
 80018a8:	230a      	movs	r3, #10
 80018aa:	7763      	strb	r3, [r4, #29]
}
 80018ac:	b002      	add	sp, #8
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fd71 	bl	8001398 <MCI_GetOccurredFaults>
 80018b6:	bb78      	cbnz	r0, 8001918 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 80018b8:	7f63      	ldrb	r3, [r4, #29]
 80018ba:	2b14      	cmp	r3, #20
 80018bc:	d8f6      	bhi.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <TSK_MediumFrequencyTaskM1+0x40>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	08001a6d 	.word	0x08001a6d
 80018c8:	080018ad 	.word	0x080018ad
 80018cc:	08001a23 	.word	0x08001a23
 80018d0:	080018ad 	.word	0x080018ad
 80018d4:	080018ad 	.word	0x080018ad
 80018d8:	080018ad 	.word	0x080018ad
 80018dc:	08001a07 	.word	0x08001a07
 80018e0:	080018ad 	.word	0x080018ad
 80018e4:	080019fb 	.word	0x080019fb
 80018e8:	080018ad 	.word	0x080018ad
 80018ec:	08001919 	.word	0x08001919
 80018f0:	080019eb 	.word	0x080019eb
 80018f4:	080018ad 	.word	0x080018ad
 80018f8:	080018ad 	.word	0x080018ad
 80018fc:	080018ad 	.word	0x080018ad
 8001900:	080018ad 	.word	0x080018ad
 8001904:	08001999 	.word	0x08001999
 8001908:	08001967 	.word	0x08001967
 800190c:	080018ad 	.word	0x080018ad
 8001910:	080018ad 	.word	0x080018ad
 8001914:	08001921 	.word	0x08001921
      Mci[M1].State = FAULT_OVER;
 8001918:	230b      	movs	r3, #11
 800191a:	7763      	strb	r3, [r4, #29]
}
 800191c:	b002      	add	sp, #8
 800191e:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001920:	7f23      	ldrb	r3, [r4, #28]
 8001922:	2b05      	cmp	r3, #5
 8001924:	f000 80b2 	beq.w	8001a8c <TSK_MediumFrequencyTaskM1+0x208>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8001928:	f7ff ffa2 	bl	8001870 <TSK_StopPermanencyTimeHasElapsedM1>
 800192c:	2800      	cmp	r0, #0
 800192e:	d0bd      	beq.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
              ENC_Clear(&ENCODER_M1);
 8001930:	4878      	ldr	r0, [pc, #480]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x290>)
 8001932:	f005 fb31 	bl	8006f98 <ENC_Clear>
              R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001936:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x298>)
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	f006 f9a5 	bl	8007c88 <R3_2_SwitchOnPWM>
              TC_EncAlignmentCommand(pPosCtrl[M1]);
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	f007 fb59 	bl	8008ff8 <TC_EncAlignmentCommand>
              FOC_InitAdditionalMethods(M1);
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff ff64 	bl	8001814 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f007 f9a2 	bl	8008c98 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001954:	4870      	ldr	r0, [pc, #448]	; (8001b18 <TSK_MediumFrequencyTaskM1+0x294>)
 8001956:	f7ff fcdb 	bl	8001310 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff5c 	bl	8001818 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8001960:	2306      	movs	r3, #6
 8001962:	7763      	strb	r3, [r4, #29]
 8001964:	e7a2      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001966:	7f23      	ldrb	r3, [r4, #28]
 8001968:	4e6c      	ldr	r6, [pc, #432]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x298>)
 800196a:	2b05      	cmp	r3, #5
 800196c:	6830      	ldr	r0, [r6, #0]
 800196e:	f000 808f 	beq.w	8001a90 <TSK_MediumFrequencyTaskM1+0x20c>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001972:	2101      	movs	r1, #1
 8001974:	f000 fc18 	bl	80021a8 <PWMC_CurrentReadingCalibr>
 8001978:	2800      	cmp	r0, #0
 800197a:	d097      	beq.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800197c:	7f23      	ldrb	r3, [r4, #28]
 800197e:	2b03      	cmp	r3, #3
 8001980:	f000 80a4 	beq.w	8001acc <TSK_MediumFrequencyTaskM1+0x248>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001984:	6830      	ldr	r0, [r6, #0]
 8001986:	2100      	movs	r1, #0
 8001988:	f006 f958 	bl	8007c3c <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 800198c:	2014      	movs	r0, #20
 800198e:	f7ff ff59 	bl	8001844 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001992:	2310      	movs	r3, #16
 8001994:	7763      	strb	r3, [r4, #29]
 8001996:	e789      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001998:	7f23      	ldrb	r3, [r4, #28]
 800199a:	2b05      	cmp	r3, #5
 800199c:	d076      	beq.n	8001a8c <TSK_MediumFrequencyTaskM1+0x208>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800199e:	f7ff ff57 	bl	8001850 <TSK_ChargeBootCapDelayHasElapsedM1>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d082      	beq.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80019a6:	4e5d      	ldr	r6, [pc, #372]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x298>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80019a8:	4d5e      	ldr	r5, [pc, #376]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x2a0>)
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80019aa:	6830      	ldr	r0, [r6, #0]
 80019ac:	f006 f9b6 	bl	8007d1c <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x2a4>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80019b2:	495e      	ldr	r1, [pc, #376]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x2a8>)
 80019b4:	6828      	ldr	r0, [r5, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80019bc:	f007 f8ce 	bl	8008b5c <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 80019c0:	4854      	ldr	r0, [pc, #336]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x290>)
 80019c2:	f005 fae9 	bl	8006f98 <ENC_Clear>
              FOC_Clear( M1 );
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fe3e 	bl	8001648 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false )
 80019cc:	4858      	ldr	r0, [pc, #352]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x2ac>)
 80019ce:	f005 faa1 	bl	8006f14 <EAC_IsAligned>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	f040 8084 	bne.w	8001ae0 <TSK_MediumFrequencyTaskM1+0x25c>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80019d8:	4855      	ldr	r0, [pc, #340]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x2ac>)
 80019da:	f005 fa5b 	bl	8006e94 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 80019de:	2302      	movs	r3, #2
 80019e0:	7763      	strb	r3, [r4, #29]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80019e2:	6830      	ldr	r0, [r6, #0]
 80019e4:	f000 fbde 	bl	80021a4 <PWMC_SwitchOnPWM>
 80019e8:	e760      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80019ea:	7f23      	ldrb	r3, [r4, #28]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f47f af5d 	bne.w	80018ac <TSK_MediumFrequencyTaskM1+0x28>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80019f2:	2300      	movs	r3, #0
 80019f4:	7723      	strb	r3, [r4, #28]
            Mci[M1].State = IDLE;
 80019f6:	7763      	strb	r3, [r4, #29]
 80019f8:	e758      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80019fa:	f7ff ff39 	bl	8001870 <TSK_StopPermanencyTimeHasElapsedM1>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	f43f af54 	beq.w	80018ac <TSK_MediumFrequencyTaskM1+0x28>
 8001a04:	e7f5      	b.n	80019f2 <TSK_MediumFrequencyTaskM1+0x16e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a06:	7f23      	ldrb	r3, [r4, #28]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d03f      	beq.n	8001a8c <TSK_MediumFrequencyTaskM1+0x208>
            TC_PositionRegulation(pPosCtrl[M1]);
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	f007 fa24 	bl	8008e5c <TC_PositionRegulation>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001a14:	4840      	ldr	r0, [pc, #256]	; (8001b18 <TSK_MediumFrequencyTaskM1+0x294>)
 8001a16:	f7ff fc7b 	bl	8001310 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fefc 	bl	8001818 <FOC_CalcCurrRef>
 8001a20:	e744      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a22:	7f23      	ldrb	r3, [r4, #28]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d031      	beq.n	8001a8c <TSK_MediumFrequencyTaskM1+0x208>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001a28:	4841      	ldr	r0, [pc, #260]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001a2a:	f005 fa73 	bl	8006f14 <EAC_IsAligned>
 8001a2e:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8001a30:	483f      	ldr	r0, [pc, #252]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001a32:	f005 fa57 	bl	8006ee4 <EAC_Exec>
 8001a36:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8001a38:	b90d      	cbnz	r5, 8001a3e <TSK_MediumFrequencyTaskM1+0x1ba>
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d03e      	beq.n	8001abc <TSK_MediumFrequencyTaskM1+0x238>
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x298>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001a40:	4d38      	ldr	r5, [pc, #224]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x2a0>)
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f006 f96a 	bl	8007d1c <R3_2_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001a48:	6828      	ldr	r0, [r5, #0]
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	f007 f89a 	bl	8008b84 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001a50:	4930      	ldr	r1, [pc, #192]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x290>)
 8001a52:	6828      	ldr	r0, [r5, #0]
 8001a54:	f007 f882 	bl	8008b5c <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fdf5 	bl	8001648 <FOC_Clear>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001a5e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a62:	f7ff feff 	bl	8001864 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8001a66:	2314      	movs	r3, #20
 8001a68:	7763      	strb	r3, [r4, #29]
 8001a6a:	e71f      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001a6c:	7f23      	ldrb	r3, [r4, #28]
 8001a6e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f47f af1a 	bne.w	80018ac <TSK_MediumFrequencyTaskM1+0x28>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001a78:	4d28      	ldr	r5, [pc, #160]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x298>)
 8001a7a:	6828      	ldr	r0, [r5, #0]
 8001a7c:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8001a80:	b9a9      	cbnz	r1, 8001aae <TSK_MediumFrequencyTaskM1+0x22a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001a82:	f000 fb91 	bl	80021a8 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001a86:	2311      	movs	r3, #17
 8001a88:	7763      	strb	r3, [r4, #29]
 8001a8a:	e70f      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x298>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	f006 f944 	bl	8007d1c <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fdd7 	bl	8001648 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001a9a:	6828      	ldr	r0, [r5, #0]
 8001a9c:	f005 fed0 	bl	8007840 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001aa0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001aa4:	f7ff fede 	bl	8001864 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	7763      	strb	r3, [r4, #29]
 8001aac:	e6fe      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001aae:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f000 fb78 	bl	80021a8 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001ab8:	6828      	ldr	r0, [r5, #0]
 8001aba:	e764      	b.n	8001986 <TSK_MediumFrequencyTaskM1+0x102>
                IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f007 f8ae 	bl	8008c20 <STC_CalcTorqueReference>
                FOCVars[M1].Iqdref = IqdRef;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001ac6:	8258      	strh	r0, [r3, #18]
 8001ac8:	821e      	strh	r6, [r3, #16]
 8001aca:	e6ef      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
                  FOC_Clear(M1);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fdbb 	bl	8001648 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8001ad2:	6828      	ldr	r0, [r5, #0]
 8001ad4:	f005 feb4 	bl	8007840 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	7723      	strb	r3, [r4, #28]
                  Mci[M1].State = IDLE;
 8001adc:	7763      	strb	r3, [r4, #29]
 8001ade:	e6e5      	b.n	80018ac <TSK_MediumFrequencyTaskM1+0x28>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	6828      	ldr	r0, [r5, #0]
 8001ae4:	f007 f84e 	bl	8008b84 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001ae8:	490a      	ldr	r1, [pc, #40]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x290>)
 8001aea:	6828      	ldr	r0, [r5, #0]
 8001aec:	f007 f836 	bl	8008b5c <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fe8f 	bl	8001814 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fe8e 	bl	8001818 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001afc:	6828      	ldr	r0, [r5, #0]
 8001afe:	f007 f8cb 	bl	8008c98 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <TSK_MediumFrequencyTaskM1+0x294>)
 8001b04:	f7ff fc04 	bl	8001310 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001b08:	2306      	movs	r3, #6
 8001b0a:	7763      	strb	r3, [r4, #29]
 8001b0c:	e769      	b.n	80019e2 <TSK_MediumFrequencyTaskM1+0x15e>
 8001b0e:	bf00      	nop
 8001b10:	200003e4 	.word	0x200003e4
 8001b14:	200000e0 	.word	0x200000e0
 8001b18:	200019a0 	.word	0x200019a0
 8001b1c:	20000540 	.word	0x20000540
 8001b20:	200003f0 	.word	0x200003f0
 8001b24:	200003f4 	.word	0x200003f4
 8001b28:	2000050c 	.word	0x2000050c
 8001b2c:	200003ac 	.word	0x200003ac
 8001b30:	2000015c 	.word	0x2000015c

08001b34 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <MC_Scheduler+0x7c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d000      	beq.n	8001b3e <MC_Scheduler+0xa>
 8001b3c:	4770      	bx	lr
{
 8001b3e:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001b40:	4c1c      	ldr	r4, [pc, #112]	; (8001bb4 <MC_Scheduler+0x80>)
 8001b42:	8823      	ldrh	r3, [r4, #0]
 8001b44:	b19b      	cbz	r3, 8001b6e <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001b46:	3b01      	subs	r3, #1
 8001b48:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <MC_Scheduler+0x84>)
 8001b4c:	8813      	ldrh	r3, [r2, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b943      	cbnz	r3, 8001b64 <MC_Scheduler+0x30>
    if(hStopPermanencyCounterM1 > 0U)
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <MC_Scheduler+0x88>)
 8001b54:	8813      	ldrh	r3, [r2, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b11b      	cbz	r3, 8001b62 <MC_Scheduler+0x2e>
      hStopPermanencyCounterM1--;
 8001b5a:	8813      	ldrh	r3, [r2, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	8013      	strh	r3, [r2, #0]
}
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
      hBootCapDelayCounterM1--;
 8001b64:	8813      	ldrh	r3, [r2, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	8013      	strh	r3, [r2, #0]
 8001b6c:	e7f1      	b.n	8001b52 <MC_Scheduler+0x1e>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b6e:	4d14      	ldr	r5, [pc, #80]	; (8001bc0 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8001b70:	f7ff fe88 	bl	8001884 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001b74:	f7ff fb48 	bl	8001208 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001b7e:	6883      	ldr	r3, [r0, #8]
 8001b80:	4798      	blx	r3
 8001b82:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001b84:	b130      	cbz	r0, 8001b94 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001b86:	4629      	mov	r1, r5
 8001b88:	220a      	movs	r2, #10
 8001b8a:	f851 0b08 	ldr.w	r0, [r1], #8
 8001b8e:	6803      	ldr	r3, [r0, #0]
 8001b90:	4798      	blx	r3
 8001b92:	b910      	cbnz	r0, 8001b9a <MC_Scheduler+0x66>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8001b94:	2301      	movs	r3, #1
 8001b96:	8023      	strh	r3, [r4, #0]
 8001b98:	e7d7      	b.n	8001b4a <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f005 fb26 	bl	80071ec <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001ba0:	6828      	ldr	r0, [r5, #0]
 8001ba2:	89ea      	ldrh	r2, [r5, #14]
 8001ba4:	6846      	ldr	r6, [r0, #4]
 8001ba6:	68a9      	ldr	r1, [r5, #8]
 8001ba8:	230a      	movs	r3, #10
 8001baa:	47b0      	blx	r6
 8001bac:	e7f2      	b.n	8001b94 <MC_Scheduler+0x60>
 8001bae:	bf00      	nop
 8001bb0:	20000532 	.word	0x20000532
 8001bb4:	20000536 	.word	0x20000536
 8001bb8:	20000534 	.word	0x20000534
 8001bbc:	20000538 	.word	0x20000538
 8001bc0:	20000438 	.word	0x20000438

08001bc4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001bc8:	4836      	ldr	r0, [pc, #216]	; (8001ca4 <TSK_HighFrequencyTask+0xe0>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001bca:	4f37      	ldr	r7, [pc, #220]	; (8001ca8 <TSK_HighFrequencyTask+0xe4>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001bcc:	4c37      	ldr	r4, [pc, #220]	; (8001cac <TSK_HighFrequencyTask+0xe8>)
{
 8001bce:	b086      	sub	sp, #24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001bd0:	f005 f9f4 	bl	8006fbc <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <TSK_HighFrequencyTask+0xec>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	f006 ffc2 	bl	8008b60 <STC_GetSpeedSensor>
 8001bdc:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001bde:	f006 ff61 	bl	8008aa4 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001be2:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001be4:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001be6:	6838      	ldr	r0, [r7, #0]
 8001be8:	f000 f9bc 	bl	8001f64 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001bec:	f001 fd9a 	bl	8003724 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001bf0:	f001 fd56 	bl	80036a0 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001bf4:	9803      	ldr	r0, [sp, #12]
 8001bf6:	f7ff fc83 	bl	8001500 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001bfa:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001bfc:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001bfe:	f7ff fcbb 	bl	8001578 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <TSK_HighFrequencyTask+0xf0>)
 8001c04:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c08:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c0a:	b200      	sxth	r0, r0
 8001c0c:	1a09      	subs	r1, r1, r0
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f005 fd9a 	bl	8007748 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c14:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <TSK_HighFrequencyTask+0xf4>)
 8001c1a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c1e:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c20:	1a89      	subs	r1, r1, r2
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	f005 fd90 	bl	8007748 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001c28:	f8ad 8008 	strh.w	r8, [sp, #8]
 8001c2c:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001c30:	9902      	ldr	r1, [sp, #8]
 8001c32:	4822      	ldr	r0, [pc, #136]	; (8001cbc <TSK_HighFrequencyTask+0xf8>)
 8001c34:	f005 f8f0 	bl	8006e18 <Circle_Limitation>
 8001c38:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c3a:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001c3c:	fa0f f883 	sxth.w	r8, r3
 8001c40:	141d      	asrs	r5, r3, #16
 8001c42:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001c44:	f006 ff38 	bl	8008ab8 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c48:	4631      	mov	r1, r6
 8001c4a:	9802      	ldr	r0, [sp, #8]
 8001c4c:	f7ff fcce 	bl	80015ec <MCM_Rev_Park>
 8001c50:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c52:	4601      	mov	r1, r0
 8001c54:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001c56:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c58:	f000 f986 	bl	8001f68 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c5c:	e9dd 7203 	ldrd	r7, r2, [sp, #12]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001c60:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001c62:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c64:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001c66:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 8001c6a:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001c6c:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001c6e:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001c70:	e9c4 7200 	strd	r7, r2, [r4]
  FOCVars[M1].Iqd = Iqd;
 8001c74:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001c76:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8001c7a:	d00d      	beq.n	8001c98 <TSK_HighFrequencyTask+0xd4>
  GLOBAL_TIMESTAMP++;
 8001c7c:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <TSK_HighFrequencyTask+0xfc>)
  if (0U == MCPA_UART_A.Mark)
 8001c7e:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <TSK_HighFrequencyTask+0x100>)
  GLOBAL_TIMESTAMP++;
 8001c80:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c82:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001c86:	3301      	adds	r3, #1
 8001c88:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001c8a:	b109      	cbz	r1, 8001c90 <TSK_HighFrequencyTask+0xcc>
    MCPA_dataLog (&MCPA_UART_A);
 8001c8c:	f005 fb64 	bl	8007358 <MCPA_dataLog>
}
 8001c90:	2000      	movs	r0, #0
 8001c92:	b006      	add	sp, #24
 8001c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <TSK_HighFrequencyTask+0x104>)
 8001c9c:	f7ff fb2c 	bl	80012f8 <MCI_FaultProcessing>
 8001ca0:	e7ec      	b.n	8001c7c <TSK_HighFrequencyTask+0xb8>
 8001ca2:	bf00      	nop
 8001ca4:	200000e0 	.word	0x200000e0
 8001ca8:	20000540 	.word	0x20000540
 8001cac:	2000050c 	.word	0x2000050c
 8001cb0:	200003f4 	.word	0x200003f4
 8001cb4:	200003ec 	.word	0x200003ec
 8001cb8:	200003e8 	.word	0x200003e8
 8001cbc:	2000002c 	.word	0x2000002c
 8001cc0:	200016b4 	.word	0x200016b4
 8001cc4:	2000040c 	.word	0x2000040c
 8001cc8:	200019a0 	.word	0x200019a0

08001ccc <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <TSK_SafetyTask_PWMOFF+0x8c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001cd0:	4f22      	ldr	r7, [pc, #136]	; (8001d5c <TSK_SafetyTask_PWMOFF+0x90>)
{
 8001cd2:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001cd4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001cd8:	f005 fcc0 	bl	800765c <NTC_CalcAvTemp>
 8001cdc:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001cde:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001ce2:	f000 fa85 	bl	80021f0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001ce6:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001cea:	4304      	orrs	r4, r0
 8001cec:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8001cee:	b345      	cbz	r5, 8001d42 <TSK_SafetyTask_PWMOFF+0x76>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8001cf0:	4e1b      	ldr	r6, [pc, #108]	; (8001d60 <TSK_SafetyTask_PWMOFF+0x94>)
 8001cf2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001cf6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8001cfa:	43e2      	mvns	r2, r4
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	4621      	mov	r1, r4
 8001d02:	f7ff faf9 	bl	80012f8 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001d06:	4630      	mov	r0, r6
 8001d08:	f7ff fb94 	bl	8001434 <MCI_GetFaultState>
 8001d0c:	b1c0      	cbz	r0, 8001d40 <TSK_SafetyTask_PWMOFF+0x74>
  {
    /* reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <TSK_SafetyTask_PWMOFF+0x98>)
 8001d10:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001d14:	b110      	cbz	r0, 8001d1c <TSK_SafetyTask_PWMOFF+0x50>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001d16:	2100      	movs	r1, #0
 8001d18:	f005 f8fe 	bl	8006f18 <EAC_SetRestartState>
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d1c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001d20:	f000 fa3e 	bl	80021a0 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001d24:	4810      	ldr	r0, [pc, #64]	; (8001d68 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001d26:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001d2a:	b98b      	cbnz	r3, 8001d50 <TSK_SafetyTask_PWMOFF+0x84>
    {
      MCPA_flushDataLog (&MCPA_UART_A);
    }
    FOC_Clear(bMotor);
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f7ff fc8b 	bl	8001648 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <TSK_SafetyTask_PWMOFF+0xa0>)
 8001d34:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001d38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001d3c:	f005 bd80 	b.w	8007840 <PQD_Clear>
}
 8001d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <TSK_SafetyTask_PWMOFF+0xa4>)
 8001d44:	f006 fe72 	bl	8008a2c <RVBS_CalcAvVbus>
 8001d48:	f000 000e 	and.w	r0, r0, #14
 8001d4c:	4304      	orrs	r4, r0
 8001d4e:	e7cf      	b.n	8001cf0 <TSK_SafetyTask_PWMOFF+0x24>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001d50:	f005 fbbe 	bl	80074d0 <MCPA_flushDataLog>
 8001d54:	e7ea      	b.n	8001d2c <TSK_SafetyTask_PWMOFF+0x60>
 8001d56:	bf00      	nop
 8001d58:	200003f8 	.word	0x200003f8
 8001d5c:	20000540 	.word	0x20000540
 8001d60:	200019a0 	.word	0x200019a0
 8001d64:	2000053c 	.word	0x2000053c
 8001d68:	2000040c 	.word	0x2000040c
 8001d6c:	200003e4 	.word	0x200003e4
 8001d70:	20000000 	.word	0x20000000

08001d74 <TSK_SafetyTask>:
{
 8001d74:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <TSK_SafetyTask+0x1c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d000      	beq.n	8001d80 <TSK_SafetyTask+0xc>
}
 8001d7e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff ffa3 	bl	8001ccc <TSK_SafetyTask_PWMOFF>
}
 8001d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001d8a:	f001 bb9f 	b.w	80034cc <RCM_ExecUserConv>
 8001d8e:	bf00      	nop
 8001d90:	20000532 	.word	0x20000532

08001d94 <MC_RunMotorControlTasks>:
{
 8001d94:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <MC_RunMotorControlTasks+0x14>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b903      	cbnz	r3, 8001d9e <MC_RunMotorControlTasks+0xa>
}
 8001d9c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001d9e:	f7ff fec9 	bl	8001b34 <MC_Scheduler>
    TSK_SafetyTask();
 8001da2:	f7ff ffe7 	bl	8001d74 <TSK_SafetyTask>
}
 8001da6:	bd08      	pop	{r3, pc}
 8001da8:	20000532 	.word	0x20000532

08001dac <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001dac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <TSK_HardwareFaultTask+0x18>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	f005 ffb3 	bl	8007d1c <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <TSK_HardwareFaultTask+0x1c>)

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001dc0:	f7ff ba9a 	b.w	80012f8 <MCI_FaultProcessing>
 8001dc4:	20000540 	.word	0x20000540
 8001dc8:	200019a0 	.word	0x200019a0

08001dcc <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001dcc:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001dce:	f7ff fa11 	bl	80011f4 <MC_GetSTMStateMotor1>
 8001dd2:	b118      	cbz	r0, 8001ddc <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001dd8:	f7ff ba06 	b.w	80011e8 <MC_StopMotor1>
}
 8001ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8001de0:	f7ff b9fc 	b.w	80011dc <MC_StartMotor1>

08001de4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <mc_lock_pins+0x128>)
 8001dea:	4949      	ldr	r1, [pc, #292]	; (8001f10 <mc_lock_pins+0x12c>)
 8001dec:	4f49      	ldr	r7, [pc, #292]	; (8001f14 <mc_lock_pins+0x130>)
 8001dee:	4d4a      	ldr	r5, [pc, #296]	; (8001f18 <mc_lock_pins+0x134>)
 8001df0:	484a      	ldr	r0, [pc, #296]	; (8001f1c <mc_lock_pins+0x138>)
 8001df2:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001df6:	2601      	movs	r6, #1
 8001df8:	b090      	sub	sp, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dfa:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001dfc:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001dfe:	61d4      	str	r4, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001e00:	69d3      	ldr	r3, [r2, #28]
 8001e02:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e08:	f44f 3cc0 	mov.w	ip, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e0c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
  (void) temp;
 8001e10:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e14:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e18:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e1c:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e20:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001e24:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e28:	f04f 0c08 	mov.w	ip, #8
  (void) temp;
 8001e2c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e30:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e32:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e36:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e38:	69cf      	ldr	r7, [r1, #28]
 8001e3a:	970d      	str	r7, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e3c:	f44f 7780 	mov.w	r7, #256	; 0x100
  (void) temp;
 8001e40:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e44:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e46:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e48:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e4a:	69dd      	ldr	r5, [r3, #28]
 8001e4c:	950c      	str	r5, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e4e:	f44f 7700 	mov.w	r7, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e52:	f44f 3581 	mov.w	r5, #66048	; 0x10200
  (void) temp;
 8001e56:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e5a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e5c:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e5e:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e60:	69dd      	ldr	r5, [r3, #28]
 8001e62:	950b      	str	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e64:	2540      	movs	r5, #64	; 0x40
  (void) temp;
 8001e66:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e68:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e6a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e6e:	69d8      	ldr	r0, [r3, #28]
 8001e70:	900a      	str	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e72:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e76:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  (void) temp;
 8001e7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e7e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e80:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e82:	69df      	ldr	r7, [r3, #28]
 8001e84:	9709      	str	r7, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e86:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e8a:	f44f 3788 	mov.w	r7, #69632	; 0x11000
  (void) temp;
 8001e8e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e92:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e94:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e98:	61d7      	str	r7, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e9a:	69d7      	ldr	r7, [r2, #28]
 8001e9c:	9708      	str	r7, [sp, #32]
  (void) temp;
 8001e9e:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea0:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ea2:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea4:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ea6:	69c9      	ldr	r1, [r1, #28]
 8001ea8:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eaa:	f44f 6700 	mov.w	r7, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eae:	f44f 3184 	mov.w	r1, #67584	; 0x10800
  (void) temp;
 8001eb2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eb6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb8:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eba:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ebc:	69d1      	ldr	r1, [r2, #28]
 8001ebe:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001ec0:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ec4:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec6:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ec8:	69d1      	ldr	r1, [r2, #28]
 8001eca:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001ecc:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ece:	4914      	ldr	r1, [pc, #80]	; (8001f20 <mc_lock_pins+0x13c>)
 8001ed0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ed2:	2004      	movs	r0, #4
 8001ed4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ed6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ed8:	69d1      	ldr	r1, [r2, #28]
 8001eda:	9104      	str	r1, [sp, #16]
  (void) temp;
 8001edc:	9804      	ldr	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ede:	4911      	ldr	r1, [pc, #68]	; (8001f24 <mc_lock_pins+0x140>)
 8001ee0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ee6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ee8:	69dd      	ldr	r5, [r3, #28]
 8001eea:	9503      	str	r5, [sp, #12]
  (void) temp;
 8001eec:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eee:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ef0:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ef2:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	9302      	str	r3, [sp, #8]
  (void) temp;
 8001ef8:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001efa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001efc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001efe:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f00:	69d3      	ldr	r3, [r2, #28]
 8001f02:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001f04:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8001f06:	b010      	add	sp, #64	; 0x40
 8001f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	48000400 	.word	0x48000400
 8001f14:	00010008 	.word	0x00010008
 8001f18:	00010100 	.word	0x00010100
 8001f1c:	00010040 	.word	0x00010040
 8001f20:	00010004 	.word	0x00010004
 8001f24:	00010002 	.word	0x00010002

08001f28 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001f28:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001f2a:	f003 fcef 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_MotorControl_Init+0x30>)
 8001f30:	fba3 3000 	umull	r3, r0, r3, r0
 8001f34:	09c0      	lsrs	r0, r0, #7
 8001f36:	f002 fecd 	bl	8004cd4 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_MotorControl_Init+0x34>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f002 fe82 	bl	8004c4c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_MotorControl_Init+0x38>)
 8001f4a:	f7ff fbbb 	bl	80016c4 <MCboot>
  mc_lock_pins();
}
 8001f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001f52:	f7ff bf47 	b.w	8001de4 <mc_lock_pins>
 8001f56:	bf00      	nop
 8001f58:	10624dd3 	.word	0x10624dd3
 8001f5c:	200004e0 	.word	0x200004e0
 8001f60:	20001a34 	.word	0x20001a34

08001f64 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8001f64:	6803      	ldr	r3, [r0, #0]
 8001f66:	4718      	bx	r3

08001f68 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8001f68:	b470      	push	{r4, r5, r6}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f6a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001f6e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f70:	140c      	asrs	r4, r1, #16
{
 8001f72:	b083      	sub	sp, #12
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f74:	fb02 f404 	mul.w	r4, r2, r4
{
 8001f78:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f7a:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001f7e:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001f80:	0064      	lsls	r4, r4, #1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001f82:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
    wZ = (wUBeta - wUAlpha) / 2;
 8001f86:	1a63      	subs	r3, r4, r1
    wY = (wUBeta + wUAlpha) / 2;
 8001f88:	4421      	add	r1, r4
 8001f8a:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8001f8e:	eb03 76d3 	add.w	r6, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8001f92:	106d      	asrs	r5, r5, #1
 8001f94:	ea4f 0292 	mov.w	r2, r2, lsr #2
    wZ = (wUBeta - wUAlpha) / 2;
 8001f98:	ea4f 0666 	mov.w	r6, r6, asr #1
    if (wY < 0)
 8001f9c:	d476      	bmi.n	800208c <PWMC_SetPhaseVoltage+0x124>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8001f9e:	2e00      	cmp	r6, #0
 8001fa0:	db52      	blt.n	8002048 <PWMC_SetPhaseVoltage+0xe0>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001fa2:	1bad      	subs	r5, r5, r6
 8001fa4:	bf44      	itt	mi
 8001fa6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001faa:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bfbc      	itt	lt
 8001fb2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8001fb6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8001fba:	2900      	cmp	r1, #0
 8001fbc:	bfb8      	it	lt
 8001fbe:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001fc2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001fc6:	bfb8      	it	lt
 8001fc8:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8001fcc:	2401      	movs	r4, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 8001fce:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001fd2:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_2;
 8001fd6:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
        pHandle->midDuty = (uint16_t)wTimePhA;
        pHandle->highDuty = (uint16_t)wTimePhC;
 8001fda:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8001fde:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001fe2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8001fe6:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
 8001fea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001fee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ff2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b289      	uxth	r1, r1
 8001ffc:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001ffe:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002000:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002004:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 8002008:	d11a      	bne.n	8002040 <PWMC_SetPhaseVoltage+0xd8>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 800200a:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
 800200e:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8002012:	2d00      	cmp	r5, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002014:	bfcc      	ite	gt
 8002016:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002018:	1b12      	suble	r2, r2, r4
 800201a:	b292      	uxth	r2, r2
      }

      if (pHandle->Ib > 0)
 800201c:	f9b0 5052 	ldrsh.w	r5, [r0, #82]	; 0x52
 8002020:	87c2      	strh	r2, [r0, #62]	; 0x3e
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002022:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
      if (pHandle->Ib > 0)
 8002026:	2d00      	cmp	r5, #0
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002028:	bfcc      	ite	gt
 800202a:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800202c:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 800202e:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002030:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002032:	bfcc      	ite	gt
 8002034:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002036:	1b09      	suble	r1, r1, r4
 8002038:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800203c:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002040:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002042:	b003      	add	sp, #12
 8002044:	bc70      	pop	{r4, r5, r6}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002046:	4718      	bx	r3
        if ( wX <= 0 )
 8002048:	2c00      	cmp	r4, #0
 800204a:	dd40      	ble.n	80020ce <PWMC_SetPhaseVoltage+0x166>
          wTimePhB = wTimePhA + (wZ / 131072);
 800204c:	2b00      	cmp	r3, #0
 800204e:	bfb8      	it	lt
 8002050:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8002054:	f04f 0100 	mov.w	r1, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002058:	bfb8      	it	lt
 800205a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800205e:	1ba5      	subs	r5, r4, r6
          pHandle->Sector = SECTOR_1;
 8002060:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
          wTimePhC = wTimePhB - (wX / 131072);
 8002064:	1e21      	subs	r1, r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002066:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800206a:	bfb8      	it	lt
 800206c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002070:	eb02 43a3 	add.w	r3, r2, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002074:	bfb8      	it	lt
 8002076:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800207a:	eba3 4161 	sub.w	r1, r3, r1, asr #17
          pHandle->highDuty = (uint16_t)wTimePhC;
 800207e:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002082:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002086:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
 800208a:	e7ac      	b.n	8001fe6 <PWMC_SetPhaseVoltage+0x7e>
      if (wZ < 0)
 800208c:	2e00      	cmp	r6, #0
 800208e:	db63      	blt.n	8002158 <PWMC_SetPhaseVoltage+0x1f0>
        if (wX <= 0)
 8002090:	2c00      	cmp	r4, #0
 8002092:	dd3c      	ble.n	800210e <PWMC_SetPhaseVoltage+0x1a6>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002094:	1b2d      	subs	r5, r5, r4
 8002096:	bf44      	itt	mi
 8002098:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800209c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80020a0:	2900      	cmp	r1, #0
 80020a2:	bfb8      	it	lt
 80020a4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80020a8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80020ac:	bfb8      	it	lt
 80020ae:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_3;
 80020b2:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80020b4:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
          pHandle->Sector = SECTOR_3;
 80020b8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 80020bc:	eb01 4364 	add.w	r3, r1, r4, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80020c0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 80020c4:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80020c8:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80020cc:	e78b      	b.n	8001fe6 <PWMC_SetPhaseVoltage+0x7e>
          wTimePhC = wTimePhA - (wY / 131072);
 80020ce:	2900      	cmp	r1, #0
 80020d0:	bfb8      	it	lt
 80020d2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 80020d6:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80020da:	bfb8      	it	lt
 80020dc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80020e0:	1b2d      	subs	r5, r5, r4
          pHandle->Sector = SECTOR_6;
 80020e2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 80020e6:	1e23      	subs	r3, r4, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80020e8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80020ec:	bfb8      	it	lt
 80020ee:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 80020f2:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80020f6:	bfb8      	it	lt
 80020f8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80020fc:	eb01 4363 	add.w	r3, r1, r3, asr #17
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002100:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002104:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002108:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 800210c:	e76b      	b.n	8001fe6 <PWMC_SetPhaseVoltage+0x7e>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800210e:	1ba5      	subs	r5, r4, r6
 8002110:	bf44      	itt	mi
 8002112:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002116:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800211a:	2b00      	cmp	r3, #0
 800211c:	bfb8      	it	lt
 800211e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002122:	f04f 0103 	mov.w	r1, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002126:	bfb8      	it	lt
 8002128:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800212c:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
          wTimePhC = wTimePhB - (wX / 131072);
 8002130:	1e21      	subs	r1, r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002132:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002136:	bfb8      	it	lt
 8002138:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800213c:	eb02 43a3 	add.w	r3, r2, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002140:	bfb8      	it	lt
 8002142:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002146:	eba3 4161 	sub.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800214a:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 800214e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002152:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8002156:	e746      	b.n	8001fe6 <PWMC_SetPhaseVoltage+0x7e>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002158:	1bad      	subs	r5, r5, r6
 800215a:	bf44      	itt	mi
 800215c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002160:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002164:	2b00      	cmp	r3, #0
 8002166:	bfbc      	itt	lt
 8002168:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 800216c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002170:	2900      	cmp	r1, #0
 8002172:	bfb8      	it	lt
 8002174:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002178:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800217c:	bfb8      	it	lt
 800217e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 8002182:	2404      	movs	r4, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 8002184:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002188:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->Sector = SECTOR_5;
 800218c:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8002190:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002194:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002198:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 800219c:	e723      	b.n	8001fe6 <PWMC_SetPhaseVoltage+0x7e>
 800219e:	bf00      	nop

080021a0 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80021a0:	6843      	ldr	r3, [r0, #4]
 80021a2:	4718      	bx	r3

080021a4 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80021a4:	6883      	ldr	r3, [r0, #8]
 80021a6:	4718      	bx	r3

080021a8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80021ae:	b1a1      	cbz	r1, 80021da <PWMC_CurrentReadingCalibr+0x32>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80021b0:	2901      	cmp	r1, #1
 80021b2:	d002      	beq.n	80021ba <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80021b4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80021b6:	b002      	add	sp, #8
 80021b8:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80021ba:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 80021be:	b1a3      	cbz	r3, 80021ea <PWMC_CurrentReadingCalibr+0x42>
        pHandle->OffCalibrWaitTimeCounter--;
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	9101      	str	r1, [sp, #4]
 80021c6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f2      	bne.n	80021b4 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80021ce:	68c3      	ldr	r3, [r0, #12]
 80021d0:	4798      	blx	r3
          retVal = true;
 80021d2:	9901      	ldr	r1, [sp, #4]
 80021d4:	4608      	mov	r0, r1
}
 80021d6:	b002      	add	sp, #8
 80021d8:	bd10      	pop	{r4, pc}
      PWMC_SwitchOffPWM(pHandle);
 80021da:	f7ff ffe1 	bl	80021a0 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80021de:	4620      	mov	r0, r4
 80021e0:	68e3      	ldr	r3, [r4, #12]
 80021e2:	4798      	blx	r3
      retVal = true;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	b002      	add	sp, #8
 80021e8:	bd10      	pop	{r4, pc}
        retVal = true;
 80021ea:	4608      	mov	r0, r1
}
 80021ec:	b002      	add	sp, #8
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 80021f0:	6983      	ldr	r3, [r0, #24]
 80021f2:	4718      	bx	r3

080021f4 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80021f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 80021f8:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 80021fc:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 80021fe:	429c      	cmp	r4, r3
{
 8002200:	b085      	sub	sp, #20
 8002202:	4607      	mov	r7, r0
    uint8_t * txData = pHandle->txBuffer;
 8002204:	e9d0 c201 	ldrd	ip, r2, [r0, #4]
    pHandle->txLength = 0;
 8002208:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 800220a:	dd69      	ble.n	80022e0 <RI_SetRegCommandParser+0xec>
              int32_t rpm;
              uint16_t duration;

              rpm = *(int32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800220c:	f8df a3e8 	ldr.w	sl, [pc, #1000]	; 80025f8 <RI_SetRegCommandParser+0x404>
 8002210:	f8df 93e8 	ldr.w	r9, [pc, #1000]	; 80025fc <RI_SetRegCommandParser+0x408>
  uint8_t retVal = MCP_CMD_OK;
 8002214:	9300      	str	r3, [sp, #0]
    uint8_t * txData = pHandle->txBuffer;
 8002216:	4615      	mov	r5, r2
 8002218:	eb02 0801 	add.w	r8, r2, r1
 800221c:	f1c2 0b01 	rsb	fp, r2, #1
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002220:	f8bc 2000 	ldrh.w	r2, [ip]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002224:	fa1f fe84 	uxth.w	lr, r4
    switch (typeID)
 8002228:	f002 0138 	and.w	r1, r2, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800222c:	f1ae 0002 	sub.w	r0, lr, #2
 8002230:	b280      	uxth	r0, r0
    uint16_t regID = dataID & REG_MASK;
 8002232:	f022 0207 	bic.w	r2, r2, #7
    switch (typeID)
 8002236:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002238:	b204      	sxth	r4, r0
    uint16_t regID = dataID & REG_MASK;
 800223a:	b292      	uxth	r2, r2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800223c:	f10c 0602 	add.w	r6, ip, #2
    switch (typeID)
 8002240:	2920      	cmp	r1, #32
 8002242:	f200 80b0 	bhi.w	80023a6 <RI_SetRegCommandParser+0x1b2>
 8002246:	e8df f001 	tbb	[pc, r1]
 800224a:	ae80      	.short	0xae80
 800224c:	aeaeaeae 	.word	0xaeaeaeae
 8002250:	ae50aeae 	.word	0xae50aeae
 8002254:	aeaeaeae 	.word	0xaeaeaeae
 8002258:	ae34aeae 	.word	0xae34aeae
 800225c:	aeaeaeae 	.word	0xaeaeaeae
 8002260:	ae90aeae 	.word	0xae90aeae
 8002264:	aeaeaeae 	.word	0xaeaeaeae
 8002268:	aeae      	.short	0xaeae
 800226a:	11          	.byte	0x11
 800226b:	00          	.byte	0x00
        *size = rawSize + 2U;
 800226c:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8002270:	3102      	adds	r1, #2
 8002272:	b289      	uxth	r1, r1
        if (*size > dataAvailable )
 8002274:	42a1      	cmp	r1, r4
 8002276:	f300 8100 	bgt.w	800247a <RI_SetRegCommandParser+0x286>
 800227a:	1a44      	subs	r4, r0, r1
          switch (regID)
 800227c:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 8002280:	440e      	add	r6, r1
 8002282:	b224      	sxth	r4, r4
        rawData++;
 8002284:	f10c 0104 	add.w	r1, ip, #4
          switch (regID)
 8002288:	f000 818a 	beq.w	80025a0 <RI_SetRegCommandParser+0x3ac>
 800228c:	f240 8112 	bls.w	80024b4 <RI_SetRegCommandParser+0x2c0>
 8002290:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 8002294:	f000 817c 	beq.w	8002590 <RI_SetRegCommandParser+0x39c>
 8002298:	f240 8150 	bls.w	800253c <RI_SetRegCommandParser+0x348>
 800229c:	f5b2 7f6a 	cmp.w	r2, #936	; 0x3a8
 80022a0:	f000 813f 	beq.w	8002522 <RI_SetRegCommandParser+0x32e>
 80022a4:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 80022a8:	d10f      	bne.n	80022ca <RI_SetRegCommandParser+0xd6>
              break;
            }

            case MC_REG_ASYNC_UARTA:
            {
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80022aa:	48ce      	ldr	r0, [pc, #824]	; (80025e4 <RI_SetRegCommandParser+0x3f0>)
 80022ac:	f005 f93e 	bl	800752c <MCPA_cfgLog>
 80022b0:	e07a      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
 80022b2:	f1ae 0406 	sub.w	r4, lr, #6
        switch (regID)
 80022b6:	2a58      	cmp	r2, #88	; 0x58
 80022b8:	b224      	sxth	r4, r4
 80022ba:	f10c 0606 	add.w	r6, ip, #6
 80022be:	d052      	beq.n	8002366 <RI_SetRegCommandParser+0x172>
 80022c0:	2a98      	cmp	r2, #152	; 0x98
 80022c2:	f000 808e 	beq.w	80023e2 <RI_SetRegCommandParser+0x1ee>
 80022c6:	2a18      	cmp	r2, #24
 80022c8:	d04d      	beq.n	8002366 <RI_SetRegCommandParser+0x172>
        if ((1U == number_of_item) && (0 == rxLength))
 80022ca:	eb05 030b 	add.w	r3, r5, fp
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
              break;
            }

            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 80022d2:	f04f 0005 	mov.w	r0, #5
        if ((1U == number_of_item) && (0 == rxLength))
 80022d6:	d16c      	bne.n	80023b2 <RI_SetRegCommandParser+0x1be>
 80022d8:	2c00      	cmp	r4, #0
 80022da:	d16a      	bne.n	80023b2 <RI_SetRegCommandParser+0x1be>
      if (MCP_CMD_OK == retVal)
 80022dc:	2800      	cmp	r0, #0
 80022de:	d177      	bne.n	80023d0 <RI_SetRegCommandParser+0x1dc>
      pHandle->txLength = 0;
 80022e0:	2000      	movs	r0, #0
 80022e2:	81f8      	strh	r0, [r7, #14]
}
 80022e4:	b005      	add	sp, #20
 80022e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ea:	f1ae 0404 	sub.w	r4, lr, #4
        switch (regID)
 80022ee:	f5b2 6f21 	cmp.w	r2, #2576	; 0xa10
 80022f2:	b224      	sxth	r4, r4
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80022f4:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 80022f8:	f10c 0604 	add.w	r6, ip, #4
        switch (regID)
 80022fc:	d033      	beq.n	8002366 <RI_SetRegCommandParser+0x172>
 80022fe:	f240 8082 	bls.w	8002406 <RI_SetRegCommandParser+0x212>
 8002302:	f241 4390 	movw	r3, #5264	; 0x1490
 8002306:	429a      	cmp	r2, r3
 8002308:	f000 8217 	beq.w	800273a <RI_SetRegCommandParser+0x546>
 800230c:	f240 80b7 	bls.w	800247e <RI_SetRegCommandParser+0x28a>
 8002310:	f241 6310 	movw	r3, #5648	; 0x1610
 8002314:	429a      	cmp	r2, r3
 8002316:	f000 821c 	beq.w	8002752 <RI_SetRegCommandParser+0x55e>
 800231a:	f200 80d7 	bhi.w	80024cc <RI_SetRegCommandParser+0x2d8>
 800231e:	f241 5350 	movw	r3, #5456	; 0x1550
 8002322:	429a      	cmp	r2, r3
 8002324:	f000 81f5 	beq.w	8002712 <RI_SetRegCommandParser+0x51e>
 8002328:	f200 816a 	bhi.w	8002600 <RI_SetRegCommandParser+0x40c>
 800232c:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002330:	429a      	cmp	r2, r3
 8002332:	f000 8194 	beq.w	800265e <RI_SetRegCommandParser+0x46a>
 8002336:	f241 5310 	movw	r3, #5392	; 0x1510
 800233a:	429a      	cmp	r2, r3
 800233c:	d1c5      	bne.n	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 800233e:	4baa      	ldr	r3, [pc, #680]	; (80025e8 <RI_SetRegCommandParser+0x3f4>)
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	f005 f9d3 	bl	80076ec <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002346:	2000      	movs	r0, #0
 8002348:	e02e      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
 800234a:	f1ae 0403 	sub.w	r4, lr, #3
        switch (regID)
 800234e:	2a88      	cmp	r2, #136	; 0x88
 8002350:	b224      	sxth	r4, r4
 8002352:	f10c 0603 	add.w	r6, ip, #3
 8002356:	d07f      	beq.n	8002458 <RI_SetRegCommandParser+0x264>
 8002358:	d950      	bls.n	80023fc <RI_SetRegCommandParser+0x208>
 800235a:	f5b2 6fa9 	cmp.w	r2, #1352	; 0x548
 800235e:	d002      	beq.n	8002366 <RI_SetRegCommandParser+0x172>
 8002360:	f5b2 6fb1 	cmp.w	r2, #1416	; 0x588
 8002364:	d1b1      	bne.n	80022ca <RI_SetRegCommandParser+0xd6>
        retVal = MCP_ERROR_RO_REG;
 8002366:	2004      	movs	r0, #4
 8002368:	e01e      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800236a:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800236e:	f10c 0c03 	add.w	ip, ip, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8122 	beq.w	80025bc <RI_SetRegCommandParser+0x3c8>
 8002378:	2c01      	cmp	r4, #1
  *size= 1U ; /* /0 is the min String size */
 800237a:	bfc8      	it	gt
 800237c:	2301      	movgt	r3, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800237e:	dc02      	bgt.n	8002386 <RI_SetRegCommandParser+0x192>
 8002380:	e120      	b.n	80025c4 <RI_SetRegCommandParser+0x3d0>
 8002382:	429c      	cmp	r4, r3
 8002384:	dd5e      	ble.n	8002444 <RI_SetRegCommandParser+0x250>
 8002386:	f99c 1000 	ldrsb.w	r1, [ip]
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 800238a:	3301      	adds	r3, #1
    tempdestString++;
 800238c:	4662      	mov	r2, ip
    *size = *size + 1U;
 800238e:	b29b      	uxth	r3, r3
 8002390:	f10c 0c01 	add.w	ip, ip, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002394:	2900      	cmp	r1, #0
 8002396:	d1f4      	bne.n	8002382 <RI_SetRegCommandParser+0x18e>
 8002398:	441e      	add	r6, r3
 800239a:	1ac4      	subs	r4, r0, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 800239c:	2300      	movs	r3, #0
 800239e:	b224      	sxth	r4, r4
 80023a0:	7013      	strb	r3, [r2, #0]
        retVal = MCP_ERROR_RO_REG;
 80023a2:	2004      	movs	r0, #4
 80023a4:	e000      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        retVal = MCP_ERROR_BAD_DATA_TYPE;
 80023a6:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 80023a8:	eb05 030b 	add.w	r3, r5, fp
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d092      	beq.n	80022d8 <RI_SetRegCommandParser+0xe4>
        if (txSyncFreeSpace !=0 )
 80023b2:	45a8      	cmp	r8, r5
 80023b4:	d00b      	beq.n	80023ce <RI_SetRegCommandParser+0x1da>
          *txData = accessResult;
 80023b6:	f805 0b01 	strb.w	r0, [r5], #1
          pHandle->txLength++;
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	3301      	adds	r3, #1
 80023be:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80023c0:	b948      	cbnz	r0, 80023d6 <RI_SetRegCommandParser+0x1e2>
    while (rxLength > 0)
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	46b4      	mov	ip, r6
 80023c6:	f73f af2b 	bgt.w	8002220 <RI_SetRegCommandParser+0x2c>
 80023ca:	9800      	ldr	r0, [sp, #0]
 80023cc:	e786      	b.n	80022dc <RI_SetRegCommandParser+0xe8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80023ce:	2008      	movs	r0, #8
}
 80023d0:	b005      	add	sp, #20
 80023d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80023d6:	2807      	cmp	r0, #7
 80023d8:	d139      	bne.n	800244e <RI_SetRegCommandParser+0x25a>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80023da:	2001      	movs	r0, #1
}
 80023dc:	b005      	add	sp, #20
 80023de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80023e2:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 80023e6:	fb8a 2103 	smull	r2, r1, sl, r3
 80023ea:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80023ee:	b209      	sxth	r1, r1
 80023f0:	2200      	movs	r2, #0
 80023f2:	4648      	mov	r0, r9
 80023f4:	f7fe ff1e 	bl	8001234 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80023f8:	2000      	movs	r0, #0
 80023fa:	e7d5      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 80023fc:	2a48      	cmp	r2, #72	; 0x48
 80023fe:	f47f af64 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
        retVal = MCP_ERROR_RO_REG;
 8002402:	2004      	movs	r0, #4
 8002404:	e7d0      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 8002406:	f5b2 6fba 	cmp.w	r2, #1488	; 0x5d0
 800240a:	d0ac      	beq.n	8002366 <RI_SetRegCommandParser+0x172>
 800240c:	f200 80a3 	bhi.w	8002556 <RI_SetRegCommandParser+0x362>
 8002410:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8002414:	f000 8196 	beq.w	8002744 <RI_SetRegCommandParser+0x550>
 8002418:	d96f      	bls.n	80024fa <RI_SetRegCommandParser+0x306>
 800241a:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 800241e:	f000 815e 	beq.w	80026de <RI_SetRegCommandParser+0x4ea>
 8002422:	f200 813e 	bhi.w	80026a2 <RI_SetRegCommandParser+0x4ae>
 8002426:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 800242a:	f000 80f8 	beq.w	800261e <RI_SetRegCommandParser+0x42a>
 800242e:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8002432:	f47f af4a 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002436:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <RI_SetRegCommandParser+0x3f4>)
 8002438:	b209      	sxth	r1, r1
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	f005 f946 	bl	80076cc <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002440:	2000      	movs	r0, #0
 8002442:	e7b1      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
 8002444:	1ac4      	subs	r4, r0, r3
 8002446:	b224      	sxth	r4, r4
 8002448:	441e      	add	r6, r3
        retVal = MCP_ERROR_RO_REG;
 800244a:	2004      	movs	r0, #4
 800244c:	e7ac      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800244e:	280a      	cmp	r0, #10
 8002450:	d0c3      	beq.n	80023da <RI_SetRegCommandParser+0x1e6>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002452:	2301      	movs	r3, #1
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	e7b4      	b.n	80023c2 <RI_SetRegCommandParser+0x1ce>
            uint8_t regdata8 = *data;
 8002458:	f89c 3002 	ldrb.w	r3, [ip, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 800245c:	2b04      	cmp	r3, #4
 800245e:	f000 80b7 	beq.w	80025d0 <RI_SetRegCommandParser+0x3dc>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002462:	2b03      	cmp	r3, #3
 8002464:	d1c8      	bne.n	80023f8 <RI_SetRegCommandParser+0x204>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002466:	4648      	mov	r0, r9
 8002468:	f7ff f804 	bl	8001474 <MCI_GetMecSpeedRefUnit>
 800246c:	2200      	movs	r2, #0
 800246e:	4601      	mov	r1, r0
 8002470:	4648      	mov	r0, r9
 8002472:	f7fe fedf 	bl	8001234 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002476:	2000      	movs	r0, #0
 8002478:	e796      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 800247a:	200a      	movs	r0, #10
 800247c:	e794      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 800247e:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 8002482:	d0b9      	beq.n	80023f8 <RI_SetRegCommandParser+0x204>
 8002484:	f240 816b 	bls.w	800275e <RI_SetRegCommandParser+0x56a>
 8002488:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800248c:	429a      	cmp	r2, r3
 800248e:	f000 8139 	beq.w	8002704 <RI_SetRegCommandParser+0x510>
 8002492:	f240 80f2 	bls.w	800267a <RI_SetRegCommandParser+0x486>
 8002496:	f241 4310 	movw	r3, #5136	; 0x1410
 800249a:	429a      	cmp	r2, r3
 800249c:	f000 80c6 	beq.w	800262c <RI_SetRegCommandParser+0x438>
 80024a0:	f241 4350 	movw	r3, #5200	; 0x1450
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f47f af10 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80024aa:	4850      	ldr	r0, [pc, #320]	; (80025ec <RI_SetRegCommandParser+0x3f8>)
 80024ac:	f005 f91e 	bl	80076ec <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80024b0:	2000      	movs	r0, #0
 80024b2:	e779      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
          switch (regID)
 80024b4:	2a68      	cmp	r2, #104	; 0x68
 80024b6:	f43f af56 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80024ba:	f240 80ee 	bls.w	800269a <RI_SetRegCommandParser+0x4a6>
 80024be:	2aa8      	cmp	r2, #168	; 0xa8
 80024c0:	f43f af51 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80024c4:	2ae8      	cmp	r2, #232	; 0xe8
 80024c6:	f43f af4e 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80024ca:	e6fe      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
        switch (regID)
 80024cc:	f241 63d0 	movw	r3, #5840	; 0x16d0
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f000 8111 	beq.w	80026f8 <RI_SetRegCommandParser+0x504>
 80024d6:	f200 80ef 	bhi.w	80026b8 <RI_SetRegCommandParser+0x4c4>
 80024da:	f241 6350 	movw	r3, #5712	; 0x1650
 80024de:	429a      	cmp	r2, r3
 80024e0:	f000 80b7 	beq.w	8002652 <RI_SetRegCommandParser+0x45e>
 80024e4:	f241 6390 	movw	r3, #5776	; 0x1690
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f47f aeee 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKPDivisorPOW2(pPIDPosCtrl[motorID], regdata16);
 80024ee:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <RI_SetRegCommandParser+0x3fc>)
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	f005 f8fb 	bl	80076ec <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80024f6:	2000      	movs	r0, #0
 80024f8:	e756      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 80024fa:	2ad0      	cmp	r2, #208	; 0xd0
 80024fc:	f000 80f6 	beq.w	80026ec <RI_SetRegCommandParser+0x4f8>
 8002500:	f240 80e4 	bls.w	80026cc <RI_SetRegCommandParser+0x4d8>
 8002504:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8002508:	f000 809d 	beq.w	8002646 <RI_SetRegCommandParser+0x452>
 800250c:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8002510:	f47f aedb 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <RI_SetRegCommandParser+0x400>)
 8002516:	b209      	sxth	r1, r1
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	f005 f8d7 	bl	80076cc <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 800251e:	2000      	movs	r0, #0
 8002520:	e742      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
              MCI_ExecPositionCommand(pMCIN, Position.Float_Val, Duration.Float_Val);
 8002522:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002526:	ee00 3a90 	vmov	s1, r3
 800252a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800252e:	4648      	mov	r0, r9
 8002530:	ee00 3a10 	vmov	s0, r3
 8002534:	f7fe feaa 	bl	800128c <MCI_ExecPositionCommand>
  uint8_t retVal = MCP_CMD_OK;
 8002538:	2000      	movs	r0, #0
 800253a:	e735      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
          switch (regID)
 800253c:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 8002540:	f47f aec3 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002544:	4648      	mov	r0, r9
 8002546:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800254a:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 800254e:	f7fe fe7f 	bl	8001250 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002552:	2000      	movs	r0, #0
 8002554:	e728      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 8002556:	f5b2 6f09 	cmp.w	r2, #2192	; 0x890
 800255a:	f43f af04 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 800255e:	f240 810c 	bls.w	800277a <RI_SetRegCommandParser+0x586>
 8002562:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 8002566:	f000 80da 	beq.w	800271e <RI_SetRegCommandParser+0x52a>
 800256a:	d97d      	bls.n	8002668 <RI_SetRegCommandParser+0x474>
 800256c:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8002570:	f040 8117 	bne.w	80027a2 <RI_SetRegCommandParser+0x5ae>
            currComp = MCI_GetIqdref(pMCIN);
 8002574:	4648      	mov	r0, r9
 8002576:	9101      	str	r1, [sp, #4]
 8002578:	f7fe ff98 	bl	80014ac <MCI_GetIqdref>
            currComp.d = (int16_t)regdata16;
 800257c:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 800257e:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 8002580:	f8ad 100e 	strh.w	r1, [sp, #14]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002584:	4648      	mov	r0, r9
 8002586:	9903      	ldr	r1, [sp, #12]
 8002588:	f7fe fe70 	bl	800126c <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 800258c:	2000      	movs	r0, #0
 800258e:	e70b      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002590:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002594:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002596:	4648      	mov	r0, r9
 8002598:	f7fe fe68 	bl	800126c <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 800259c:	2000      	movs	r0, #0
 800259e:	e703      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80025a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80025a4:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 80025a8:	fb8a 0103 	smull	r0, r1, sl, r3
 80025ac:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80025b0:	4648      	mov	r0, r9
 80025b2:	b209      	sxth	r1, r1
 80025b4:	f7fe fe3e 	bl	8001234 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e6f5      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
  const char_t *tempsrcString = srcString;
 80025bc:	4632      	mov	r2, r6
  *size= 1U ; /* /0 is the min String size */
 80025be:	2301      	movs	r3, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80025c0:	4666      	mov	r6, ip
 80025c2:	e6ea      	b.n	800239a <RI_SetRegCommandParser+0x1a6>
 80025c4:	f1ae 0403 	sub.w	r4, lr, #3
 80025c8:	b224      	sxth	r4, r4
 80025ca:	4666      	mov	r6, ip
        retVal = MCP_ERROR_RO_REG;
 80025cc:	2004      	movs	r0, #4
 80025ce:	e6eb      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80025d0:	4648      	mov	r0, r9
 80025d2:	f7fe ff87 	bl	80014e4 <MCI_GetTeref>
 80025d6:	2200      	movs	r2, #0
 80025d8:	4601      	mov	r1, r0
 80025da:	4648      	mov	r0, r9
 80025dc:	f7fe fe38 	bl	8001250 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 80025e0:	2000      	movs	r0, #0
 80025e2:	e6e1      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
 80025e4:	2000040c 	.word	0x2000040c
 80025e8:	200003e8 	.word	0x200003e8
 80025ec:	200001d0 	.word	0x200001d0
 80025f0:	200004d0 	.word	0x200004d0
 80025f4:	200003ec 	.word	0x200003ec
 80025f8:	2aaaaaab 	.word	0x2aaaaaab
 80025fc:	200019a0 	.word	0x200019a0
        switch (regID)
 8002600:	f241 5390 	movw	r3, #5520	; 0x1590
 8002604:	429a      	cmp	r2, r3
 8002606:	d018      	beq.n	800263a <RI_SetRegCommandParser+0x446>
 8002608:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800260c:	429a      	cmp	r2, r3
 800260e:	f47f ae5c 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <RI_SetRegCommandParser+0x5d8>)
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	f005 f869 	bl	80076ec <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 800261a:	2000      	movs	r0, #0
 800261c:	e6c4      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 800261e:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <RI_SetRegCommandParser+0x5d8>)
 8002620:	b209      	sxth	r1, r1
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	f005 f882 	bl	800772c <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002628:	2000      	movs	r0, #0
 800262a:	e6bd      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKD(pPIDPosCtrl[motorID], regdata16);
 800262c:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <RI_SetRegCommandParser+0x5dc>)
 800262e:	b209      	sxth	r1, r1
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f005 f87b 	bl	800772c <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8002636:	2000      	movs	r0, #0
 8002638:	e6b6      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 800263a:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <RI_SetRegCommandParser+0x5e0>)
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	f005 f87d 	bl	800773c <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002642:	2000      	movs	r0, #0
 8002644:	e6b0      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002646:	4864      	ldr	r0, [pc, #400]	; (80027d8 <RI_SetRegCommandParser+0x5e4>)
 8002648:	b209      	sxth	r1, r1
 800264a:	f005 f86f 	bl	800772c <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 800264e:	2000      	movs	r0, #0
 8002650:	e6aa      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002652:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <RI_SetRegCommandParser+0x5d8>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f005 f871 	bl	800773c <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 800265a:	2000      	movs	r0, #0
 800265c:	e6a4      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800265e:	485e      	ldr	r0, [pc, #376]	; (80027d8 <RI_SetRegCommandParser+0x5e4>)
 8002660:	f005 f86c 	bl	800773c <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002664:	2000      	movs	r0, #0
 8002666:	e69f      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 8002668:	f5b2 6f0d 	cmp.w	r2, #2256	; 0x8d0
 800266c:	f43f ae7b 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002670:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 8002674:	f43f ae77 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002678:	e627      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 800267a:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 800267e:	f43f aebb 	beq.w	80023f8 <RI_SetRegCommandParser+0x204>
 8002682:	f241 3390 	movw	r3, #5008	; 0x1390
 8002686:	429a      	cmp	r2, r3
 8002688:	f47f ae1f 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKP(pPIDPosCtrl[motorID], regdata16);
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <RI_SetRegCommandParser+0x5dc>)
 800268e:	b209      	sxth	r1, r1
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f005 f81b 	bl	80076cc <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002696:	2000      	movs	r0, #0
 8002698:	e686      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
          switch (regID)
 800269a:	2a28      	cmp	r2, #40	; 0x28
 800269c:	f43f ae63 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80026a0:	e613      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
        switch (regID)
 80026a2:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 80026a6:	f040 8086 	bne.w	80027b6 <RI_SetRegCommandParser+0x5c2>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80026aa:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <RI_SetRegCommandParser+0x5e0>)
 80026ac:	b209      	sxth	r1, r1
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f005 f83c 	bl	800772c <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 80026b4:	2000      	movs	r0, #0
 80026b6:	e677      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 80026b8:	f241 7310 	movw	r3, #5904	; 0x1710
 80026bc:	429a      	cmp	r2, r3
 80026be:	d16a      	bne.n	8002796 <RI_SetRegCommandParser+0x5a2>
            PID_SetKDDivisorPOW2(pPIDPosCtrl[motorID], regdata16);
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <RI_SetRegCommandParser+0x5dc>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f005 f83a 	bl	800773c <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80026c8:	2000      	movs	r0, #0
 80026ca:	e66d      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 80026cc:	2a90      	cmp	r2, #144	; 0x90
 80026ce:	f47f adfc 	bne.w	80022ca <RI_SetRegCommandParser+0xd6>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 80026d2:	4841      	ldr	r0, [pc, #260]	; (80027d8 <RI_SetRegCommandParser+0x5e4>)
 80026d4:	b209      	sxth	r1, r1
 80026d6:	f004 fff9 	bl	80076cc <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80026da:	2000      	movs	r0, #0
 80026dc:	e664      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <RI_SetRegCommandParser+0x5e0>)
 80026e0:	b209      	sxth	r1, r1
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f004 fff4 	bl	80076d0 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80026e8:	2000      	movs	r0, #0
 80026ea:	e65d      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 80026ec:	483a      	ldr	r0, [pc, #232]	; (80027d8 <RI_SetRegCommandParser+0x5e4>)
 80026ee:	b209      	sxth	r1, r1
 80026f0:	f004 ffee 	bl	80076d0 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80026f4:	2000      	movs	r0, #0
 80026f6:	e657      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKIDivisorPOW2(pPIDPosCtrl[motorID], regdata16);
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <RI_SetRegCommandParser+0x5dc>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	f005 f802 	bl	8007704 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002700:	2000      	movs	r0, #0
 8002702:	e651      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKI(pPIDPosCtrl[motorID], regdata16);
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <RI_SetRegCommandParser+0x5dc>)
 8002706:	b209      	sxth	r1, r1
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f004 ffe1 	bl	80076d0 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 800270e:	2000      	movs	r0, #0
 8002710:	e64a      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <RI_SetRegCommandParser+0x5e0>)
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	f004 fff5 	bl	8007704 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 800271a:	2000      	movs	r0, #0
 800271c:	e644      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            currComp = MCI_GetIqdref(pMCIN);
 800271e:	4648      	mov	r0, r9
 8002720:	9101      	str	r1, [sp, #4]
 8002722:	f7fe fec3 	bl	80014ac <MCI_GetIqdref>
            currComp.q = (int16_t)regdata16;
 8002726:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8002728:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 800272a:	f8ad 100c 	strh.w	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 800272e:	4648      	mov	r0, r9
 8002730:	9903      	ldr	r1, [sp, #12]
 8002732:	f7fe fd9b 	bl	800126c <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8002736:	2000      	movs	r0, #0
 8002738:	e636      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800273a:	4827      	ldr	r0, [pc, #156]	; (80027d8 <RI_SetRegCommandParser+0x5e4>)
 800273c:	f004 ffe2 	bl	8007704 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8002740:	2000      	movs	r0, #0
 8002742:	e631      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002744:	4b21      	ldr	r3, [pc, #132]	; (80027cc <RI_SetRegCommandParser+0x5d8>)
 8002746:	b209      	sxth	r1, r1
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	f004 ffc1 	bl	80076d0 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 800274e:	2000      	movs	r0, #0
 8002750:	e62a      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <RI_SetRegCommandParser+0x5d8>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f004 ffd5 	bl	8007704 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 800275a:	2000      	movs	r0, #0
 800275c:	e624      	b.n	80023a8 <RI_SetRegCommandParser+0x1b4>
        switch (regID)
 800275e:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002762:	f43f ae00 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002766:	d921      	bls.n	80027ac <RI_SetRegCommandParser+0x5b8>
 8002768:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 800276c:	f43f adfb 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002770:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 8002774:	f43f adf7 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002778:	e5a7      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 800277a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800277e:	f43f adf2 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002782:	d91d      	bls.n	80027c0 <RI_SetRegCommandParser+0x5cc>
 8002784:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002788:	f43f aded 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 800278c:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8002790:	f43f ade9 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 8002794:	e599      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 8002796:	f641 3358 	movw	r3, #7000	; 0x1b58
 800279a:	429a      	cmp	r2, r3
 800279c:	f43f ade3 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80027a0:	e593      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 80027a2:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 80027a6:	f43f adde 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80027aa:	e58e      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 80027ac:	f5b2 6f25 	cmp.w	r2, #2640	; 0xa50
 80027b0:	f43f add9 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80027b4:	e589      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 80027b6:	f5b2 6fb2 	cmp.w	r2, #1424	; 0x590
 80027ba:	f43f add4 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80027be:	e584      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 80027c0:	f5b2 6ff2 	cmp.w	r2, #1936	; 0x790
 80027c4:	f43f adcf 	beq.w	8002366 <RI_SetRegCommandParser+0x172>
 80027c8:	e57f      	b.n	80022ca <RI_SetRegCommandParser+0xd6>
 80027ca:	bf00      	nop
 80027cc:	200003ec 	.word	0x200003ec
 80027d0:	200004d0 	.word	0x200004d0
 80027d4:	200003e8 	.word	0x200003e8
 80027d8:	200001d0 	.word	0x200001d0

080027dc <RI_GetRegCommandParser>:
{
 80027dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 80027e0:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    pHandle->txLength = 0;
 80027e4:	2300      	movs	r3, #0
{
 80027e6:	b091      	sub	sp, #68	; 0x44
    uint8_t * txData = pHandle->txBuffer;
 80027e8:	e9d0 9601 	ldrd	r9, r6, [r0, #4]
    pHandle->txLength = 0;
 80027ec:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 80027ee:	f1b8 0f00 	cmp.w	r8, #0
 80027f2:	f000 837c 	beq.w	8002eee <RI_GetRegCommandParser+0x712>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80027f6:	4fc3      	ldr	r7, [pc, #780]	; (8002b04 <RI_GetRegCommandParser+0x328>)
 80027f8:	4682      	mov	sl, r0
 80027fa:	b20c      	sxth	r4, r1
    while (rxLength > 0U)
 80027fc:	4618      	mov	r0, r3
    uint8_t * rxData = pHandle->rxBuffer;
 80027fe:	464d      	mov	r5, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002800:	f835 2b02 	ldrh.w	r2, [r5], #2
    switch (typeID)
 8002804:	f002 0338 	and.w	r3, r2, #56	; 0x38
 8002808:	3b08      	subs	r3, #8
    uint16_t regID = dataID & REG_MASK;
 800280a:	f022 0207 	bic.w	r2, r2, #7
 800280e:	b292      	uxth	r2, r2
    switch (typeID)
 8002810:	2b20      	cmp	r3, #32
 8002812:	f200 80f5 	bhi.w	8002a00 <RI_GetRegCommandParser+0x224>
 8002816:	e8df f013 	tbh	[pc, r3, lsl #1]
 800281a:	00ca      	.short	0x00ca
 800281c:	00f300f3 	.word	0x00f300f3
 8002820:	00f300f3 	.word	0x00f300f3
 8002824:	00f300f3 	.word	0x00f300f3
 8002828:	009800f3 	.word	0x009800f3
 800282c:	00f300f3 	.word	0x00f300f3
 8002830:	00f300f3 	.word	0x00f300f3
 8002834:	00f300f3 	.word	0x00f300f3
 8002838:	007d00f3 	.word	0x007d00f3
 800283c:	00f300f3 	.word	0x00f300f3
 8002840:	00f300f3 	.word	0x00f300f3
 8002844:	00f300f3 	.word	0x00f300f3
 8002848:	005100f3 	.word	0x005100f3
 800284c:	00f300f3 	.word	0x00f300f3
 8002850:	00f300f3 	.word	0x00f300f3
 8002854:	00f300f3 	.word	0x00f300f3
 8002858:	002100f3 	.word	0x002100f3
        switch (regID)
 800285c:	2ae8      	cmp	r2, #232	; 0xe8
        rawData++;
 800285e:	f106 0302 	add.w	r3, r6, #2
        switch (regID)
 8002862:	f000 8247 	beq.w	8002cf4 <RI_GetRegCommandParser+0x518>
 8002866:	f240 80fe 	bls.w	8002a66 <RI_GetRegCommandParser+0x28a>
 800286a:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 800286e:	f000 822f 	beq.w	8002cd0 <RI_GetRegCommandParser+0x4f4>
 8002872:	f240 820c 	bls.w	8002c8e <RI_GetRegCommandParser+0x4b2>
 8002876:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 800287a:	f000 81c2 	beq.w	8002c02 <RI_GetRegCommandParser+0x426>
 800287e:	f5b2 7f6a 	cmp.w	r2, #936	; 0x3a8
 8002882:	f040 8137 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
            Position = TC_GetMoveDuration(pPosCtrl[motorID]);   /* Does this duration make sense ? */
 8002886:	4ba0      	ldr	r3, [pc, #640]	; (8002b08 <RI_GetRegCommandParser+0x32c>)
 8002888:	9301      	str	r3, [sp, #4]
            *rawSize = 8;
 800288a:	2208      	movs	r2, #8
            Position = TC_GetMoveDuration(pPosCtrl[motorID]);   /* Does this duration make sense ? */
 800288c:	6818      	ldr	r0, [r3, #0]
            *rawSize = 8;
 800288e:	8032      	strh	r2, [r6, #0]
            Position = TC_GetMoveDuration(pPosCtrl[motorID]);   /* Does this duration make sense ? */
 8002890:	f006 fc84 	bl	800919c <TC_GetMoveDuration>
            Duration = TC_GetTargetPosition(pPosCtrl[motorID]);
 8002894:	9b01      	ldr	r3, [sp, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
            Position = TC_GetMoveDuration(pPosCtrl[motorID]);   /* Does this duration make sense ? */
 8002898:	ee10 ba10 	vmov	fp, s0
            Duration = TC_GetTargetPosition(pPosCtrl[motorID]);
 800289c:	f006 fc7a 	bl	8009194 <TC_GetTargetPosition>
        *size = (*rawSize) + 2U;
 80028a0:	8833      	ldrh	r3, [r6, #0]
            memcpy(rawData, &Position, 4);
 80028a2:	f8c6 b002 	str.w	fp, [r6, #2]
            memcpy(&rawData[4], &Duration, 4);
 80028a6:	ee10 2a10 	vmov	r2, s0
        *size = (*rawSize) + 2U;
 80028aa:	3302      	adds	r3, #2
            memcpy(&rawData[4], &Duration, 4);
 80028ac:	f8c6 2006 	str.w	r2, [r6, #6]
        *size = (*rawSize) + 2U;
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b2a4      	uxth	r4, r4
 80028b4:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 80028b8:	469c      	mov	ip, r3
 80028ba:	e091      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
        switch (regID)
 80028bc:	2a60      	cmp	r2, #96	; 0x60
 80028be:	f000 81d0 	beq.w	8002c62 <RI_GetRegCommandParser+0x486>
 80028c2:	f240 80e9 	bls.w	8002a98 <RI_GetRegCommandParser+0x2bc>
 80028c6:	2aa0      	cmp	r2, #160	; 0xa0
 80028c8:	f000 81b4 	beq.w	8002c34 <RI_GetRegCommandParser+0x458>
 80028cc:	2ae0      	cmp	r2, #224	; 0xe0
 80028ce:	f040 8111 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80028d2:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <RI_GetRegCommandParser+0x330>)
 80028d4:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80028d6:	f990 2024 	ldrsb.w	r2, [r0, #36]	; 0x24
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80028da:	3024      	adds	r0, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80028dc:	2a00      	cmp	r2, #0
 80028de:	f000 826d 	beq.w	8002dbc <RI_GetRegCommandParser+0x5e0>
 80028e2:	2c01      	cmp	r4, #1
 80028e4:	f340 81a4 	ble.w	8002c30 <RI_GetRegCommandParser+0x454>
 80028e8:	46b6      	mov	lr, r6
  *size= 1U ; /* /0 is the min String size */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e002      	b.n	80028f4 <RI_GetRegCommandParser+0x118>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80028ee:	429c      	cmp	r4, r3
 80028f0:	f340 819e 	ble.w	8002c30 <RI_GetRegCommandParser+0x454>
    *tempdestString = *tempsrcString;
 80028f4:	f80e 2b01 	strb.w	r2, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80028f8:	f910 2f01 	ldrsb.w	r2, [r0, #1]!
    *size = *size + 1U;
 80028fc:	3301      	adds	r3, #1
 80028fe:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002900:	2a00      	cmp	r2, #0
 8002902:	d1f4      	bne.n	80028ee <RI_GetRegCommandParser+0x112>
 8002904:	469c      	mov	ip, r3
    *tempdestString = (int8_t)0;
 8002906:	2200      	movs	r2, #0
 8002908:	f88e 2000 	strb.w	r2, [lr]
 800290c:	b2a4      	uxth	r4, r4
 800290e:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002912:	e065      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
        if (freeSpace >= 4U)
 8002914:	b2a4      	uxth	r4, r4
 8002916:	2c03      	cmp	r4, #3
 8002918:	d97b      	bls.n	8002a12 <RI_GetRegCommandParser+0x236>
          switch (regID)
 800291a:	2a98      	cmp	r2, #152	; 0x98
 800291c:	f000 81d4 	beq.w	8002cc8 <RI_GetRegCommandParser+0x4ec>
 8002920:	f200 80d4 	bhi.w	8002acc <RI_GetRegCommandParser+0x2f0>
 8002924:	2a18      	cmp	r2, #24
 8002926:	f000 814a 	beq.w	8002bbe <RI_GetRegCommandParser+0x3e2>
 800292a:	2a58      	cmp	r2, #88	; 0x58
 800292c:	f040 80e2 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002930:	4877      	ldr	r0, [pc, #476]	; (8002b10 <RI_GetRegCommandParser+0x334>)
 8002932:	f7fe fd97 	bl	8001464 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002936:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800293a:	0040      	lsls	r0, r0, #1
 800293c:	f04f 0c04 	mov.w	ip, #4
 8002940:	6030      	str	r0, [r6, #0]
          *size = 4;
 8002942:	4663      	mov	r3, ip
 8002944:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002948:	e04a      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
        if (freeSpace >= 2U)
 800294a:	b2a4      	uxth	r4, r4
 800294c:	2c01      	cmp	r4, #1
 800294e:	d960      	bls.n	8002a12 <RI_GetRegCommandParser+0x236>
          switch (regID)
 8002950:	f5b2 6f21 	cmp.w	r2, #2576	; 0xa10
 8002954:	f000 8369 	beq.w	800302a <RI_GetRegCommandParser+0x84e>
 8002958:	d95f      	bls.n	8002a1a <RI_GetRegCommandParser+0x23e>
 800295a:	f241 4390 	movw	r3, #5264	; 0x1490
 800295e:	429a      	cmp	r2, r3
 8002960:	f000 82c7 	beq.w	8002ef2 <RI_GetRegCommandParser+0x716>
 8002964:	f240 80de 	bls.w	8002b24 <RI_GetRegCommandParser+0x348>
 8002968:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800296c:	429a      	cmp	r2, r3
 800296e:	f000 8337 	beq.w	8002fe0 <RI_GetRegCommandParser+0x804>
 8002972:	f240 8210 	bls.w	8002d96 <RI_GetRegCommandParser+0x5ba>
 8002976:	f241 6390 	movw	r3, #5776	; 0x1690
 800297a:	429a      	cmp	r2, r3
 800297c:	f000 82f8 	beq.w	8002f70 <RI_GetRegCommandParser+0x794>
 8002980:	f200 8221 	bhi.w	8002dc6 <RI_GetRegCommandParser+0x5ea>
 8002984:	f241 6310 	movw	r3, #5648	; 0x1610
 8002988:	429a      	cmp	r2, r3
 800298a:	f000 8327 	beq.w	8002fdc <RI_GetRegCommandParser+0x800>
 800298e:	f241 6350 	movw	r3, #5712	; 0x1650
 8002992:	429a      	cmp	r2, r3
 8002994:	f040 80ae 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8002998:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <RI_GetRegCommandParser+0x338>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f004 fecc 	bl	8007738 <PID_GetKDDivisorPOW2>
 80029a0:	f04f 0c02 	mov.w	ip, #2
 80029a4:	8030      	strh	r0, [r6, #0]
 80029a6:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 80029aa:	4663      	mov	r3, ip
 80029ac:	e018      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
        if (freeSpace > 0U)
 80029ae:	b384      	cbz	r4, 8002a12 <RI_GetRegCommandParser+0x236>
          switch (regID)
 80029b0:	2a88      	cmp	r2, #136	; 0x88
 80029b2:	f000 8185 	beq.w	8002cc0 <RI_GetRegCommandParser+0x4e4>
 80029b6:	f240 809f 	bls.w	8002af8 <RI_GetRegCommandParser+0x31c>
 80029ba:	f5b2 6fa9 	cmp.w	r2, #1352	; 0x548
 80029be:	f000 80ee 	beq.w	8002b9e <RI_GetRegCommandParser+0x3c2>
 80029c2:	f5b2 6fb1 	cmp.w	r2, #1416	; 0x588
 80029c6:	f040 8095 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *data = (uint8_t) TC_GetAlignmentStatus(pPosCtrl[motorID]);
 80029ca:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <RI_GetRegCommandParser+0x32c>)
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	f006 fbed 	bl	80091ac <TC_GetAlignmentStatus>
 80029d2:	7030      	strb	r0, [r6, #0]
 80029d4:	f04f 0c01 	mov.w	ip, #1
 80029d8:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 80029dc:	b2a4      	uxth	r4, r4
          *size = 1;
 80029de:	4663      	mov	r3, ip
    while (rxLength > 0U)
 80029e0:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 80029e4:	4418      	add	r0, r3
        freeSpaceS16 = freeSpaceS16-size;
 80029e6:	1ae4      	subs	r4, r4, r3
    while (rxLength > 0U)
 80029e8:	b292      	uxth	r2, r2
 80029ea:	b2ab      	uxth	r3, r5
        pHandle->txLength += size;
 80029ec:	b280      	uxth	r0, r0
    while (rxLength > 0U)
 80029ee:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 80029f0:	f8aa 000e 	strh.w	r0, [sl, #14]
        freeSpaceS16 = freeSpaceS16-size;
 80029f4:	b224      	sxth	r4, r4
        txData = txData+size;
 80029f6:	4466      	add	r6, ip
    while (rxLength > 0U)
 80029f8:	f47f af02 	bne.w	8002800 <RI_GetRegCommandParser+0x24>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 80029fc:	2000      	movs	r0, #0
 80029fe:	e000      	b.n	8002a02 <RI_GetRegCommandParser+0x226>
        retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002a00:	2007      	movs	r0, #7
}
 8002a02:	b011      	add	sp, #68	; 0x44
 8002a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002a08:	223c      	movs	r2, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8002a0a:	2c3d      	cmp	r4, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002a0c:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002a0e:	f200 81f9 	bhi.w	8002e04 <RI_GetRegCommandParser+0x628>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a12:	2008      	movs	r0, #8
}
 8002a14:	b011      	add	sp, #68	; 0x44
 8002a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          switch (regID)
 8002a1a:	f5b2 6fb2 	cmp.w	r2, #1424	; 0x590
 8002a1e:	f000 82fa 	beq.w	8003016 <RI_GetRegCommandParser+0x83a>
 8002a22:	f240 809f 	bls.w	8002b64 <RI_GetRegCommandParser+0x388>
 8002a26:	f5b2 6f09 	cmp.w	r2, #2192	; 0x890
 8002a2a:	f000 82a5 	beq.w	8002f78 <RI_GetRegCommandParser+0x79c>
 8002a2e:	f240 8168 	bls.w	8002d02 <RI_GetRegCommandParser+0x526>
 8002a32:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 8002a36:	f000 82b7 	beq.w	8002fa8 <RI_GetRegCommandParser+0x7cc>
 8002a3a:	f200 81d0 	bhi.w	8002dde <RI_GetRegCommandParser+0x602>
 8002a3e:	f5b2 6f0d 	cmp.w	r2, #2256	; 0x8d0
 8002a42:	f000 82a6 	beq.w	8002f92 <RI_GetRegCommandParser+0x7b6>
 8002a46:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 8002a4a:	d153      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8002a4c:	4830      	ldr	r0, [pc, #192]	; (8002b10 <RI_GetRegCommandParser+0x334>)
 8002a4e:	f7fe fd25 	bl	800149c <MCI_GetIqd>
 8002a52:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002a56:	8033      	strh	r3, [r6, #0]
 8002a58:	f04f 0c02 	mov.w	ip, #2
 8002a5c:	900a      	str	r0, [sp, #40]	; 0x28
          *size = 2;
 8002a5e:	4663      	mov	r3, ip
 8002a60:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002a64:	e7bc      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
        switch (regID)
 8002a66:	2a68      	cmp	r2, #104	; 0x68
 8002a68:	d0ce      	beq.n	8002a08 <RI_GetRegCommandParser+0x22c>
 8002a6a:	2aa8      	cmp	r2, #168	; 0xa8
 8002a6c:	f000 80b1 	beq.w	8002bd2 <RI_GetRegCommandParser+0x3f6>
 8002a70:	2a28      	cmp	r2, #40	; 0x28
 8002a72:	d13f      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a74:	220a      	movs	r2, #10
            if (((*rawSize) + 2U) > freeSpace)
 8002a76:	2c0b      	cmp	r4, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a78:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002a7a:	d9ca      	bls.n	8002a12 <RI_GetRegCommandParser+0x236>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <RI_GetRegCommandParser+0x33c>)
 8002a7e:	6810      	ldr	r0, [r2, #0]
 8002a80:	6851      	ldr	r1, [r2, #4]
 8002a82:	8912      	ldrh	r2, [r2, #8]
 8002a84:	6018      	str	r0, [r3, #0]
 8002a86:	6059      	str	r1, [r3, #4]
 8002a88:	811a      	strh	r2, [r3, #8]
 8002a8a:	f04f 0c0c 	mov.w	ip, #12
 8002a8e:	b2a4      	uxth	r4, r4
 8002a90:	f8ba 000e 	ldrh.w	r0, [sl, #14]
        *size = (*rawSize) + 2U;
 8002a94:	4663      	mov	r3, ip
 8002a96:	e7a3      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
        switch (regID)
 8002a98:	2a20      	cmp	r2, #32
 8002a9a:	d12b      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002a9c:	481f      	ldr	r0, [pc, #124]	; (8002b1c <RI_GetRegCommandParser+0x340>)
 8002a9e:	f990 2000 	ldrsb.w	r2, [r0]
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	f000 818a 	beq.w	8002dbc <RI_GetRegCommandParser+0x5e0>
 8002aa8:	2c01      	cmp	r4, #1
 8002aaa:	f340 80c1 	ble.w	8002c30 <RI_GetRegCommandParser+0x454>
 8002aae:	46b6      	mov	lr, r6
  *size= 1U ; /* /0 is the min String size */
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e002      	b.n	8002aba <RI_GetRegCommandParser+0x2de>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ab4:	42a3      	cmp	r3, r4
 8002ab6:	f280 80bb 	bge.w	8002c30 <RI_GetRegCommandParser+0x454>
    *tempdestString = *tempsrcString;
 8002aba:	f80e 2b01 	strb.w	r2, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002abe:	f910 2f01 	ldrsb.w	r2, [r0, #1]!
    *size = *size + 1U;
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	d1f4      	bne.n	8002ab4 <RI_GetRegCommandParser+0x2d8>
 8002aca:	e71b      	b.n	8002904 <RI_GetRegCommandParser+0x128>
          switch (regID)
 8002acc:	f640 2358 	movw	r3, #2648	; 0xa58
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d069      	beq.n	8002ba8 <RI_GetRegCommandParser+0x3cc>
 8002ad4:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d10b      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <RI_GetRegCommandParser+0x344>)
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	f004 feb2 	bl	8007848 <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val;
 8002ae4:	f04f 0c04 	mov.w	ip, #4
 8002ae8:	ed86 0a00 	vstr	s0, [r6]
          *size = 4;
 8002aec:	4663      	mov	r3, ip
 8002aee:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002af2:	e775      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002af4:	2005      	movs	r0, #5
  return (retVal);
 8002af6:	e784      	b.n	8002a02 <RI_GetRegCommandParser+0x226>
          switch (regID)
 8002af8:	2a48      	cmp	r2, #72	; 0x48
 8002afa:	d1fb      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <RI_GetRegCommandParser+0x334>)
 8002afe:	f7fe fc45 	bl	800138c <MCI_GetSTMState>
 8002b02:	e766      	b.n	80029d2 <RI_GetRegCommandParser+0x1f6>
 8002b04:	20000400 	.word	0x20000400
 8002b08:	200003f0 	.word	0x200003f0
 8002b0c:	20000404 	.word	0x20000404
 8002b10:	200019a0 	.word	0x200019a0
 8002b14:	200003ec 	.word	0x200003ec
 8002b18:	0800949c 	.word	0x0800949c
 8002b1c:	08009418 	.word	0x08009418
 8002b20:	200003e4 	.word	0x200003e4
          switch (regID)
 8002b24:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 8002b28:	f000 821e 	beq.w	8002f68 <RI_GetRegCommandParser+0x78c>
 8002b2c:	f240 8102 	bls.w	8002d34 <RI_GetRegCommandParser+0x558>
 8002b30:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f000 81e6 	beq.w	8002f06 <RI_GetRegCommandParser+0x72a>
 8002b3a:	f240 8187 	bls.w	8002e4c <RI_GetRegCommandParser+0x670>
 8002b3e:	f241 4310 	movw	r3, #5136	; 0x1410
 8002b42:	429a      	cmp	r2, r3
 8002b44:	f000 81f0 	beq.w	8002f28 <RI_GetRegCommandParser+0x74c>
 8002b48:	f241 4350 	movw	r3, #5200	; 0x1450
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1d1      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8002b50:	48c6      	ldr	r0, [pc, #792]	; (8002e6c <RI_GetRegCommandParser+0x690>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002b52:	f004 fdc9 	bl	80076e8 <PID_GetKPDivisorPOW2>
 8002b56:	f04f 0c02 	mov.w	ip, #2
 8002b5a:	8030      	strh	r0, [r6, #0]
 8002b5c:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002b60:	4663      	mov	r3, ip
 8002b62:	e73d      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002b64:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8002b68:	f000 823c 	beq.w	8002fe4 <RI_GetRegCommandParser+0x808>
 8002b6c:	f200 80fa 	bhi.w	8002d64 <RI_GetRegCommandParser+0x588>
 8002b70:	2ad0      	cmp	r2, #208	; 0xd0
 8002b72:	f000 81f7 	beq.w	8002f64 <RI_GetRegCommandParser+0x788>
 8002b76:	f240 8174 	bls.w	8002e62 <RI_GetRegCommandParser+0x686>
 8002b7a:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8002b7e:	f000 81f9 	beq.w	8002f74 <RI_GetRegCommandParser+0x798>
 8002b82:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8002b86:	d1b5      	bne.n	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8002b88:	4bb9      	ldr	r3, [pc, #740]	; (8002e70 <RI_GetRegCommandParser+0x694>)
              *regdata16 = PID_GetKP( pPIDPosCtrl[motorID]);
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	f004 fda2 	bl	80076d4 <PID_GetKP>
 8002b90:	f04f 0c02 	mov.w	ip, #2
 8002b94:	8030      	strh	r0, [r6, #0]
 8002b96:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002b9a:	4663      	mov	r3, ip
 8002b9c:	e720      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *data = (uint8_t) TC_GetControlPositionStatus(pPosCtrl[motorID]);
 8002b9e:	4bb5      	ldr	r3, [pc, #724]	; (8002e74 <RI_GetRegCommandParser+0x698>)
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f006 faff 	bl	80091a4 <TC_GetControlPositionStatus>
 8002ba6:	e714      	b.n	80029d2 <RI_GetRegCommandParser+0x1f6>
              ReadVal.Float_Val = MCI_GetCurrentPosition(pMCIN);
 8002ba8:	48b3      	ldr	r0, [pc, #716]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002baa:	f7fe fbf1 	bl	8001390 <MCI_GetCurrentPosition>
              *regdataU32 = ReadVal.U32_Val;
 8002bae:	f04f 0c04 	mov.w	ip, #4
 8002bb2:	ed86 0a00 	vstr	s0, [r6]
          *size = 4;
 8002bb6:	4663      	mov	r3, ip
 8002bb8:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002bbc:	e710      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002bbe:	48ae      	ldr	r0, [pc, #696]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002bc0:	f7fe fc38 	bl	8001434 <MCI_GetFaultState>
 8002bc4:	f04f 0c04 	mov.w	ip, #4
 8002bc8:	6030      	str	r0, [r6, #0]
          *size = 4;
 8002bca:	4663      	mov	r3, ip
 8002bcc:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002bd0:	e706      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002bd2:	220e      	movs	r2, #14
            if ((*rawSize) +2  > freeSpace)
 8002bd4:	2c0f      	cmp	r4, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002bd6:	8032      	strh	r2, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 8002bd8:	f77f af1b 	ble.w	8002a12 <RI_GetRegCommandParser+0x236>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8002bdc:	4aa7      	ldr	r2, [pc, #668]	; (8002e7c <RI_GetRegCommandParser+0x6a0>)
 8002bde:	6812      	ldr	r2, [r2, #0]
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002be0:	6810      	ldr	r0, [r2, #0]
 8002be2:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8002be6:	6851      	ldr	r1, [r2, #4]
 8002be8:	6059      	str	r1, [r3, #4]
 8002bea:	f8c3 c008 	str.w	ip, [r3, #8]
 8002bee:	6018      	str	r0, [r3, #0]
 8002bf0:	8992      	ldrh	r2, [r2, #12]
 8002bf2:	819a      	strh	r2, [r3, #12]
 8002bf4:	f04f 0c10 	mov.w	ip, #16
 8002bf8:	b2a4      	uxth	r4, r4
 8002bfa:	f8ba 000e 	ldrh.w	r0, [sl, #14]
        *size = (*rawSize) + 2U;
 8002bfe:	4663      	mov	r3, ip
 8002c00:	e6ee      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
            *rawSize = 4;
 8002c02:	2304      	movs	r3, #4
 8002c04:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002c06:	489c      	ldr	r0, [pc, #624]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002c08:	f7fe fc50 	bl	80014ac <MCI_GetIqdref>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	8070      	strh	r0, [r6, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c10:	4899      	ldr	r0, [pc, #612]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002c12:	9303      	str	r3, [sp, #12]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c14:	f7fe fc4a 	bl	80014ac <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8002c18:	8833      	ldrh	r3, [r6, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c1a:	9002      	str	r0, [sp, #8]
        *size = (*rawSize) + 2U;
 8002c1c:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c1e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002c22:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b2a4      	uxth	r4, r4
 8002c28:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002c2c:	469c      	mov	ip, r3
 8002c2e:	e6d7      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002c30:	2006      	movs	r0, #6
 8002c32:	e6e6      	b.n	8002a02 <RI_GetRegCommandParser+0x226>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <RI_GetRegCommandParser+0x6a4>)
 8002c36:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c38:	f990 2000 	ldrsb.w	r2, [r0]
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	f000 80bd 	beq.w	8002dbc <RI_GetRegCommandParser+0x5e0>
 8002c42:	2c01      	cmp	r4, #1
 8002c44:	ddf4      	ble.n	8002c30 <RI_GetRegCommandParser+0x454>
 8002c46:	46b6      	mov	lr, r6
  *size= 1U ; /* /0 is the min String size */
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e001      	b.n	8002c50 <RI_GetRegCommandParser+0x474>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	daef      	bge.n	8002c30 <RI_GetRegCommandParser+0x454>
    *tempdestString = *tempsrcString;
 8002c50:	f80e 2b01 	strb.w	r2, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c54:	f910 2f01 	ldrsb.w	r2, [r0, #1]!
    *size = *size + 1U;
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d1f5      	bne.n	8002c4c <RI_GetRegCommandParser+0x470>
 8002c60:	e650      	b.n	8002904 <RI_GetRegCommandParser+0x128>
 8002c62:	4888      	ldr	r0, [pc, #544]	; (8002e84 <RI_GetRegCommandParser+0x6a8>)
 8002c64:	f990 2000 	ldrsb.w	r2, [r0]
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	f000 80a7 	beq.w	8002dbc <RI_GetRegCommandParser+0x5e0>
 8002c6e:	2c01      	cmp	r4, #1
 8002c70:	ddde      	ble.n	8002c30 <RI_GetRegCommandParser+0x454>
 8002c72:	46b6      	mov	lr, r6
  *size= 1U ; /* /0 is the min String size */
 8002c74:	2301      	movs	r3, #1
 8002c76:	e001      	b.n	8002c7c <RI_GetRegCommandParser+0x4a0>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c78:	42a3      	cmp	r3, r4
 8002c7a:	dad9      	bge.n	8002c30 <RI_GetRegCommandParser+0x454>
    *tempdestString = *tempsrcString;
 8002c7c:	f80e 2b01 	strb.w	r2, [lr], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c80:	f910 2f01 	ldrsb.w	r2, [r0, #1]!
    *size = *size + 1U;
 8002c84:	3301      	adds	r3, #1
 8002c86:	b29b      	uxth	r3, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	d1f5      	bne.n	8002c78 <RI_GetRegCommandParser+0x49c>
 8002c8c:	e63a      	b.n	8002904 <RI_GetRegCommandParser+0x128>
        switch (regID)
 8002c8e:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 8002c92:	f47f af2f 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002c96:	4878      	ldr	r0, [pc, #480]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002c98:	f7fe fbd6 	bl	8001448 <MCI_GetLastRampFinalSpeed>
 8002c9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ca0:	0040      	lsls	r0, r0, #1
 8002ca2:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002ca6:	4874      	ldr	r0, [pc, #464]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002ca8:	f7fe fbd6 	bl	8001458 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002cac:	2306      	movs	r3, #6
 8002cae:	8033      	strh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002cb0:	80f0      	strh	r0, [r6, #6]
            *rawSize = 6;
 8002cb2:	f04f 0c08 	mov.w	ip, #8
 8002cb6:	b2a4      	uxth	r4, r4
 8002cb8:	f8ba 000e 	ldrh.w	r0, [sl, #14]
        *size = (*rawSize) + 2U;
 8002cbc:	4663      	mov	r3, ip
 8002cbe:	e68f      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002cc0:	486d      	ldr	r0, [pc, #436]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002cc2:	f7fe fbbd 	bl	8001440 <MCI_GetControlMode>
 8002cc6:	e684      	b.n	80029d2 <RI_GetRegCommandParser+0x1f6>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002cc8:	486b      	ldr	r0, [pc, #428]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002cca:	f7fe fbd3 	bl	8001474 <MCI_GetMecSpeedRefUnit>
 8002cce:	e632      	b.n	8002936 <RI_GetRegCommandParser+0x15a>
            *rawSize = 4;
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002cd4:	4868      	ldr	r0, [pc, #416]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002cd6:	f7fe fbbb 	bl	8001450 <MCI_GetLastRampFinalTorque>
 8002cda:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002cdc:	4866      	ldr	r0, [pc, #408]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002cde:	f7fe fbbb 	bl	8001458 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8002ce2:	8833      	ldrh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002ce4:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b2a4      	uxth	r4, r4
 8002cec:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002cf0:	469c      	mov	ip, r3
 8002cf2:	e675      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002cf4:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > freeSpace)
 8002cf6:	2c0f      	cmp	r4, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002cf8:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002cfa:	f67f ae8a 	bls.w	8002a12 <RI_GetRegCommandParser+0x236>
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	e76e      	b.n	8002be0 <RI_GetRegCommandParser+0x404>
          switch (regID)
 8002d02:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8002d06:	f000 8120 	beq.w	8002f4a <RI_GetRegCommandParser+0x76e>
 8002d0a:	f240 80c5 	bls.w	8002e98 <RI_GetRegCommandParser+0x6bc>
 8002d0e:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002d12:	f000 8154 	beq.w	8002fbe <RI_GetRegCommandParser+0x7e2>
 8002d16:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8002d1a:	f47f aeeb 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8002d1e:	4856      	ldr	r0, [pc, #344]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002d20:	f7fe fbb4 	bl	800148c <MCI_GetIalphabeta>
 8002d24:	f04f 0c02 	mov.w	ip, #2
 8002d28:	8030      	strh	r0, [r6, #0]
 8002d2a:	900d      	str	r0, [sp, #52]	; 0x34
          *size = 2;
 8002d2c:	4663      	mov	r3, ip
 8002d2e:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002d32:	e655      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002d34:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002d38:	f000 80fa 	beq.w	8002f30 <RI_GetRegCommandParser+0x754>
 8002d3c:	f240 80bb 	bls.w	8002eb6 <RI_GetRegCommandParser+0x6da>
 8002d40:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 8002d44:	f000 8150 	beq.w	8002fe8 <RI_GetRegCommandParser+0x80c>
 8002d48:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 8002d4c:	f47f aed2 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]); //cstat !MISRAC2012-Rule-11.3
 8002d50:	484d      	ldr	r0, [pc, #308]	; (8002e88 <RI_GetRegCommandParser+0x6ac>)
 8002d52:	f005 fee5 	bl	8008b20 <SPD_GetS16Speed>
 8002d56:	f04f 0c02 	mov.w	ip, #2
 8002d5a:	8030      	strh	r0, [r6, #0]
 8002d5c:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002d60:	4663      	mov	r3, ip
 8002d62:	e63d      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002d64:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8002d68:	f000 8136 	beq.w	8002fd8 <RI_GetRegCommandParser+0x7fc>
 8002d6c:	f240 80b2 	bls.w	8002ed4 <RI_GetRegCommandParser+0x6f8>
 8002d70:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8002d74:	f000 80da 	beq.w	8002f2c <RI_GetRegCommandParser+0x750>
 8002d78:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 8002d7c:	f47f aeba 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002d80:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <RI_GetRegCommandParser+0x6b0>)
              *regdata16 = PID_GetKD( pPIDPosCtrl[motorID]);
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	f004 fcd4 	bl	8007730 <PID_GetKD>
 8002d88:	f04f 0c02 	mov.w	ip, #2
 8002d8c:	8030      	strh	r0, [r6, #0]
 8002d8e:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002d92:	4663      	mov	r3, ip
 8002d94:	e624      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002d96:	f241 5310 	movw	r3, #5392	; 0x1510
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	f000 80be 	beq.w	8002f1c <RI_GetRegCommandParser+0x740>
 8002da0:	f240 809e 	bls.w	8002ee0 <RI_GetRegCommandParser+0x704>
 8002da4:	f241 5350 	movw	r3, #5456	; 0x1550
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f000 80ba 	beq.w	8002f22 <RI_GetRegCommandParser+0x746>
 8002dae:	f241 5390 	movw	r3, #5520	; 0x1590
 8002db2:	429a      	cmp	r2, r3
 8002db4:	f47f ae9e 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <RI_GetRegCommandParser+0x6b0>)
 8002dba:	e5ee      	b.n	800299a <RI_GetRegCommandParser+0x1be>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002dbc:	f04f 0c01 	mov.w	ip, #1
  *size= 1U ; /* /0 is the min String size */
 8002dc0:	4663      	mov	r3, ip
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002dc2:	46b6      	mov	lr, r6
 8002dc4:	e59f      	b.n	8002906 <RI_GetRegCommandParser+0x12a>
          switch (regID)
 8002dc6:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	f000 80c8 	beq.w	8002f60 <RI_GetRegCommandParser+0x784>
 8002dd0:	f241 7310 	movw	r3, #5904	; 0x1710
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f47f ae8d 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDPosCtrl[motorID]);
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <RI_GetRegCommandParser+0x6b4>)
 8002ddc:	e5dd      	b.n	800299a <RI_GetRegCommandParser+0x1be>
          switch (regID)
 8002dde:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8002de2:	f000 810b 	beq.w	8002ffc <RI_GetRegCommandParser+0x820>
 8002de6:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 8002dea:	f47f ae83 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002dee:	4822      	ldr	r0, [pc, #136]	; (8002e78 <RI_GetRegCommandParser+0x69c>)
 8002df0:	f7fe fb64 	bl	80014bc <MCI_GetVqd>
 8002df4:	f04f 0c02 	mov.w	ip, #2
 8002df8:	8030      	strh	r0, [r6, #0]
 8002dfa:	9007      	str	r0, [sp, #28]
          *size = 2;
 8002dfc:	4663      	mov	r3, ip
 8002dfe:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002e02:	e5ed      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8002e04:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <RI_GetRegCommandParser+0x6b8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8002e0c:	f8d2 e000 	ldr.w	lr, [r2]
 8002e10:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8002e14:	6890      	ldr	r0, [r2, #8]
 8002e16:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8002e1a:	f8c3 b00c 	str.w	fp, [r3, #12]
 8002e1e:	3210      	adds	r2, #16
 8002e20:	428a      	cmp	r2, r1
 8002e22:	f8c3 e000 	str.w	lr, [r3]
 8002e26:	f8c3 c004 	str.w	ip, [r3, #4]
 8002e2a:	6098      	str	r0, [r3, #8]
 8002e2c:	f103 0310 	add.w	r3, r3, #16
 8002e30:	d1ec      	bne.n	8002e0c <RI_GetRegCommandParser+0x630>
 8002e32:	6810      	ldr	r0, [r2, #0]
 8002e34:	6851      	ldr	r1, [r2, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	6018      	str	r0, [r3, #0]
 8002e3c:	6059      	str	r1, [r3, #4]
 8002e3e:	f04f 0c3e 	mov.w	ip, #62	; 0x3e
 8002e42:	b2a4      	uxth	r4, r4
 8002e44:	f8ba 000e 	ldrh.w	r0, [sl, #14]
        *size = (*rawSize) + 2U;
 8002e48:	4663      	mov	r3, ip
 8002e4a:	e5c9      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002e4c:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 8002e50:	f000 808a 	beq.w	8002f68 <RI_GetRegCommandParser+0x78c>
 8002e54:	f241 3390 	movw	r3, #5008	; 0x1390
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f47f ae4b 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = PID_GetKP( pPIDPosCtrl[motorID]);
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <RI_GetRegCommandParser+0x6b4>)
 8002e60:	e693      	b.n	8002b8a <RI_GetRegCommandParser+0x3ae>
          switch (regID)
 8002e62:	2a90      	cmp	r2, #144	; 0x90
 8002e64:	f47f ae46 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8002e68:	4800      	ldr	r0, [pc, #0]	; (8002e6c <RI_GetRegCommandParser+0x690>)
 8002e6a:	e68f      	b.n	8002b8c <RI_GetRegCommandParser+0x3b0>
 8002e6c:	200001d0 	.word	0x200001d0
 8002e70:	200003ec 	.word	0x200003ec
 8002e74:	200003f0 	.word	0x200003f0
 8002e78:	200019a0 	.word	0x200019a0
 8002e7c:	200003fc 	.word	0x200003fc
 8002e80:	20000408 	.word	0x20000408
 8002e84:	08009408 	.word	0x08009408
 8002e88:	200000e0 	.word	0x200000e0
 8002e8c:	200003e8 	.word	0x200003e8
 8002e90:	200004d0 	.word	0x200004d0
 8002e94:	20000404 	.word	0x20000404
          switch (regID)
 8002e98:	f5b2 6fba 	cmp.w	r2, #1488	; 0x5d0
 8002e9c:	f47f ae2a 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002ea0:	4b68      	ldr	r3, [pc, #416]	; (8003044 <RI_GetRegCommandParser+0x868>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	f004 fbf8 	bl	8007698 <NTC_GetAvTemp_C>
 8002ea8:	f04f 0c02 	mov.w	ip, #2
 8002eac:	8030      	strh	r0, [r6, #0]
 8002eae:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002eb2:	4663      	mov	r3, ip
 8002eb4:	e594      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002eb6:	f5b2 6f25 	cmp.w	r2, #2640	; 0xa50
 8002eba:	f47f ae1b 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002ebe:	4862      	ldr	r0, [pc, #392]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002ec0:	f7fe fb06 	bl	80014d0 <MCI_GetValphabeta>
 8002ec4:	f04f 0c02 	mov.w	ip, #2
 8002ec8:	8030      	strh	r0, [r6, #0]
 8002eca:	9005      	str	r0, [sp, #20]
          *size = 2;
 8002ecc:	4663      	mov	r3, ip
 8002ece:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002ed2:	e585      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
          switch (regID)
 8002ed4:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8002ed8:	f47f ae0c 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <RI_GetRegCommandParser+0x870>)
 8002ede:	e750      	b.n	8002d82 <RI_GetRegCommandParser+0x5a6>
          switch (regID)
 8002ee0:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f47f ae05 	bne.w	8002af4 <RI_GetRegCommandParser+0x318>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8002eea:	4859      	ldr	r0, [pc, #356]	; (8003050 <RI_GetRegCommandParser+0x874>)
 8002eec:	e556      	b.n	800299c <RI_GetRegCommandParser+0x1c0>
  uint8_t retVal = MCP_CMD_NOK;
 8002eee:	2001      	movs	r0, #1
 8002ef0:	e587      	b.n	8002a02 <RI_GetRegCommandParser+0x226>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8002ef2:	4857      	ldr	r0, [pc, #348]	; (8003050 <RI_GetRegCommandParser+0x874>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002ef4:	f004 fc00 	bl	80076f8 <PID_GetKIDivisorPOW2>
 8002ef8:	f04f 0c02 	mov.w	ip, #2
 8002efc:	8030      	strh	r0, [r6, #0]
 8002efe:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002f02:	4663      	mov	r3, ip
 8002f04:	e56c      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = PID_GetKI( pPIDPosCtrl[motorID]);
 8002f06:	4b53      	ldr	r3, [pc, #332]	; (8003054 <RI_GetRegCommandParser+0x878>)
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f004 fbe7 	bl	80076dc <PID_GetKI>
 8002f0e:	f04f 0c02 	mov.w	ip, #2
 8002f12:	8030      	strh	r0, [r6, #0]
 8002f14:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002f18:	4663      	mov	r3, ip
 8002f1a:	e561      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002f1c:	4b4e      	ldr	r3, [pc, #312]	; (8003058 <RI_GetRegCommandParser+0x87c>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	e617      	b.n	8002b52 <RI_GetRegCommandParser+0x376>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002f22:	4b4d      	ldr	r3, [pc, #308]	; (8003058 <RI_GetRegCommandParser+0x87c>)
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	e7e5      	b.n	8002ef4 <RI_GetRegCommandParser+0x718>
              *regdata16 = PID_GetKD( pPIDPosCtrl[motorID]);
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <RI_GetRegCommandParser+0x878>)
 8002f2a:	e72a      	b.n	8002d82 <RI_GetRegCommandParser+0x5a6>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002f2c:	4b4a      	ldr	r3, [pc, #296]	; (8003058 <RI_GetRegCommandParser+0x87c>)
 8002f2e:	e7eb      	b.n	8002f08 <RI_GetRegCommandParser+0x72c>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002f30:	4845      	ldr	r0, [pc, #276]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002f32:	f7fe facd 	bl	80014d0 <MCI_GetValphabeta>
 8002f36:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002f3a:	8033      	strh	r3, [r6, #0]
 8002f3c:	f04f 0c02 	mov.w	ip, #2
 8002f40:	9004      	str	r0, [sp, #16]
          *size = 2;
 8002f42:	4663      	mov	r3, ip
 8002f44:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002f48:	e54a      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8002f4a:	483f      	ldr	r0, [pc, #252]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002f4c:	f7fe fa96 	bl	800147c <MCI_GetIab>
 8002f50:	f04f 0c02 	mov.w	ip, #2
 8002f54:	8030      	strh	r0, [r6, #0]
 8002f56:	900f      	str	r0, [sp, #60]	; 0x3c
          *size = 2;
 8002f58:	4663      	mov	r3, ip
 8002f5a:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002f5e:	e53f      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDPosCtrl[motorID]);
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <RI_GetRegCommandParser+0x878>)
 8002f62:	e7df      	b.n	8002f24 <RI_GetRegCommandParser+0x748>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8002f64:	483a      	ldr	r0, [pc, #232]	; (8003050 <RI_GetRegCommandParser+0x874>)
 8002f66:	e7d0      	b.n	8002f0a <RI_GetRegCommandParser+0x72e>
          switch (regID)
 8002f68:	f04f 0c02 	mov.w	ip, #2
          *size = 2;
 8002f6c:	4663      	mov	r3, ip
 8002f6e:	e537      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDPosCtrl[motorID]);
 8002f70:	4b38      	ldr	r3, [pc, #224]	; (8003054 <RI_GetRegCommandParser+0x878>)
 8002f72:	e7d4      	b.n	8002f1e <RI_GetRegCommandParser+0x742>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8002f74:	4836      	ldr	r0, [pc, #216]	; (8003050 <RI_GetRegCommandParser+0x874>)
 8002f76:	e705      	b.n	8002d84 <RI_GetRegCommandParser+0x5a8>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002f78:	4833      	ldr	r0, [pc, #204]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002f7a:	f7fe fa87 	bl	800148c <MCI_GetIalphabeta>
 8002f7e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002f82:	8033      	strh	r3, [r6, #0]
 8002f84:	f04f 0c02 	mov.w	ip, #2
 8002f88:	900c      	str	r0, [sp, #48]	; 0x30
          *size = 2;
 8002f8a:	4663      	mov	r3, ip
 8002f8c:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002f90:	e526      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8002f92:	482d      	ldr	r0, [pc, #180]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002f94:	f7fe fa82 	bl	800149c <MCI_GetIqd>
 8002f98:	f04f 0c02 	mov.w	ip, #2
 8002f9c:	8030      	strh	r0, [r6, #0]
 8002f9e:	900b      	str	r0, [sp, #44]	; 0x2c
          *size = 2;
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002fa6:	e51b      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002fa8:	4827      	ldr	r0, [pc, #156]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002faa:	f7fe fa7f 	bl	80014ac <MCI_GetIqdref>
 8002fae:	f04f 0c02 	mov.w	ip, #2
 8002fb2:	8030      	strh	r0, [r6, #0]
 8002fb4:	9009      	str	r0, [sp, #36]	; 0x24
          *size = 2;
 8002fb6:	4663      	mov	r3, ip
 8002fb8:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002fbc:	e510      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8002fbe:	4822      	ldr	r0, [pc, #136]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002fc0:	f7fe fa5c 	bl	800147c <MCI_GetIab>
 8002fc4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002fc8:	8033      	strh	r3, [r6, #0]
 8002fca:	f04f 0c02 	mov.w	ip, #2
 8002fce:	900e      	str	r0, [sp, #56]	; 0x38
          *size = 2;
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8002fd6:	e503      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <RI_GetRegCommandParser+0x87c>)
 8002fda:	e5d6      	b.n	8002b8a <RI_GetRegCommandParser+0x3ae>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <RI_GetRegCommandParser+0x870>)
 8002fde:	e7a1      	b.n	8002f24 <RI_GetRegCommandParser+0x748>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <RI_GetRegCommandParser+0x870>)
 8002fe2:	e79c      	b.n	8002f1e <RI_GetRegCommandParser+0x742>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <RI_GetRegCommandParser+0x870>)
 8002fe6:	e78f      	b.n	8002f08 <RI_GetRegCommandParser+0x72c>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]); //cstat !MISRAC2012-Rule-11.3
 8002fe8:	481c      	ldr	r0, [pc, #112]	; (800305c <RI_GetRegCommandParser+0x880>)
 8002fea:	f005 fd5b 	bl	8008aa4 <SPD_GetElAngle>
 8002fee:	f04f 0c02 	mov.w	ip, #2
 8002ff2:	8030      	strh	r0, [r6, #0]
 8002ff4:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8002ff8:	4663      	mov	r3, ip
 8002ffa:	e4f1      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8002ffc:	4812      	ldr	r0, [pc, #72]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 8002ffe:	f7fe fa55 	bl	80014ac <MCI_GetIqdref>
 8003002:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003006:	8033      	strh	r3, [r6, #0]
 8003008:	f04f 0c02 	mov.w	ip, #2
 800300c:	9008      	str	r0, [sp, #32]
          *size = 2;
 800300e:	4663      	mov	r3, ip
 8003010:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8003014:	e4e4      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003016:	4812      	ldr	r0, [pc, #72]	; (8003060 <RI_GetRegCommandParser+0x884>)
 8003018:	f003 fef8 	bl	8006e0c <VBS_GetAvBusVoltage_V>
 800301c:	f04f 0c02 	mov.w	ip, #2
 8003020:	8030      	strh	r0, [r6, #0]
 8003022:	f8ba 000e 	ldrh.w	r0, [sl, #14]
          *size = 2;
 8003026:	4663      	mov	r3, ip
 8003028:	e4da      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 800302a:	4807      	ldr	r0, [pc, #28]	; (8003048 <RI_GetRegCommandParser+0x86c>)
 800302c:	f7fe fa46 	bl	80014bc <MCI_GetVqd>
 8003030:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003034:	8033      	strh	r3, [r6, #0]
 8003036:	f04f 0c02 	mov.w	ip, #2
 800303a:	9006      	str	r0, [sp, #24]
          *size = 2;
 800303c:	4663      	mov	r3, ip
 800303e:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8003042:	e4cd      	b.n	80029e0 <RI_GetRegCommandParser+0x204>
 8003044:	200003f8 	.word	0x200003f8
 8003048:	200019a0 	.word	0x200019a0
 800304c:	200003ec 	.word	0x200003ec
 8003050:	200001d0 	.word	0x200001d0
 8003054:	200004d0 	.word	0x200004d0
 8003058:	200003e8 	.word	0x200003e8
 800305c:	200000e0 	.word	0x200000e0
 8003060:	20000000 	.word	0x20000000

08003064 <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003064:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003068:	3808      	subs	r0, #8
 800306a:	b2c0      	uxtb	r0, r0
 800306c:	2810      	cmp	r0, #16
 800306e:	bf9a      	itte	ls
 8003070:	4b01      	ldrls	r3, [pc, #4]	; (8003078 <RI_GetIDSize+0x14>)
 8003072:	5c18      	ldrbls	r0, [r3, r0]
 8003074:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003076:	4770      	bx	lr
 8003078:	08009574 	.word	0x08009574

0800307c <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 800307c:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003080:	2b10      	cmp	r3, #16
 8003082:	d113      	bne.n	80030ac <RI_GetPtrReg+0x30>
    uint16_t regID = dataID & REG_MASK;
 8003084:	f020 0007 	bic.w	r0, r0, #7
    {
      case TYPE_DATA_16BIT:
      {
        switch (regID)
 8003088:	b280      	uxth	r0, r0
 800308a:	f5b0 6f15 	cmp.w	r0, #2384	; 0x950
 800308e:	d076      	beq.n	800317e <RI_GetPtrReg+0x102>
 8003090:	d910      	bls.n	80030b4 <RI_GetPtrReg+0x38>
 8003092:	f5b0 6f25 	cmp.w	r0, #2640	; 0xa50
 8003096:	d06c      	beq.n	8003172 <RI_GetPtrReg+0xf6>
 8003098:	d81f      	bhi.n	80030da <RI_GetPtrReg+0x5e>
 800309a:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 800309e:	d05c      	beq.n	800315a <RI_GetPtrReg+0xde>
 80030a0:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 80030a4:	d04b      	beq.n	800313e <RI_GetPtrReg+0xc2>
 80030a6:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 80030aa:	d031      	beq.n	8003110 <RI_GetPtrReg+0x94>
            break;
          }

          default:
          {
            *dataPtr = &nullData16;
 80030ac:	4b37      	ldr	r3, [pc, #220]	; (800318c <RI_GetPtrReg+0x110>)
 80030ae:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80030b0:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 80030b2:	4770      	bx	lr
        switch (regID)
 80030b4:	f5b0 6f05 	cmp.w	r0, #2128	; 0x850
 80030b8:	d055      	beq.n	8003166 <RI_GetPtrReg+0xea>
 80030ba:	d91d      	bls.n	80030f8 <RI_GetPtrReg+0x7c>
 80030bc:	f5b0 6f0d 	cmp.w	r0, #2256	; 0x8d0
 80030c0:	d032      	beq.n	8003128 <RI_GetPtrReg+0xac>
 80030c2:	f5b0 6f11 	cmp.w	r0, #2320	; 0x910
 80030c6:	d029      	beq.n	800311c <RI_GetPtrReg+0xa0>
 80030c8:	f5b0 6f09 	cmp.w	r0, #2192	; 0x890
 80030cc:	d1ee      	bne.n	80030ac <RI_GetPtrReg+0x30>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <RI_GetPtrReg+0x114>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	3306      	adds	r3, #6
 80030d4:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80030d6:	2000      	movs	r0, #0
            break;
 80030d8:	4770      	bx	lr
        switch (regID)
 80030da:	f5b0 6f2d 	cmp.w	r0, #2768	; 0xad0
 80030de:	d038      	beq.n	8003152 <RI_GetPtrReg+0xd6>
 80030e0:	f5b0 6f31 	cmp.w	r0, #2832	; 0xb10
 80030e4:	d031      	beq.n	800314a <RI_GetPtrReg+0xce>
 80030e6:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
 80030ea:	d1df      	bne.n	80030ac <RI_GetPtrReg+0x30>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <RI_GetPtrReg+0x114>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	331c      	adds	r3, #28
 80030f2:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80030f4:	2000      	movs	r0, #0
            break;
 80030f6:	4770      	bx	lr
        switch (regID)
 80030f8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80030fc:	d01a      	beq.n	8003134 <RI_GetPtrReg+0xb8>
 80030fe:	f5b0 6f01 	cmp.w	r0, #2064	; 0x810
 8003102:	d1d3      	bne.n	80030ac <RI_GetPtrReg+0x30>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <RI_GetPtrReg+0x114>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	3302      	adds	r3, #2
 800310a:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800310c:	2000      	movs	r0, #0
            break;
 800310e:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <RI_GetPtrReg+0x114>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	3312      	adds	r3, #18
 8003116:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003118:	2000      	movs	r0, #0
            break;
 800311a:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800311c:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <RI_GetPtrReg+0x114>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	330e      	adds	r3, #14
 8003122:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003124:	2000      	movs	r0, #0
            break;
 8003126:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <RI_GetPtrReg+0x114>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	330c      	adds	r3, #12
 800312e:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003130:	2000      	movs	r0, #0
            break;
 8003132:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <RI_GetPtrReg+0x114>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800313a:	2000      	movs	r0, #0
             break;
 800313c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <RI_GetPtrReg+0x114>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	3318      	adds	r3, #24
 8003144:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003146:	2000      	movs	r0, #0
            break;
 8003148:	4770      	bx	lr
            *dataPtr = &(pEncoder[vmotorID]->_Super.hAvrMecSpeedUnit);
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <RI_GetPtrReg+0x118>)
 800314c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800314e:	2000      	movs	r0, #0
            break;
 8003150:	4770      	bx	lr
            *dataPtr = &(pEncoder[vmotorID]->_Super.hElAngle);
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <RI_GetPtrReg+0x11c>)
 8003154:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003156:	2000      	movs	r0, #0
            break;
 8003158:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <RI_GetPtrReg+0x114>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	3316      	adds	r3, #22
 8003160:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003162:	2000      	movs	r0, #0
            break;
 8003164:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <RI_GetPtrReg+0x114>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800316e:	2000      	movs	r0, #0
            break;
 8003170:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <RI_GetPtrReg+0x114>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	331a      	adds	r3, #26
 8003178:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800317a:	2000      	movs	r0, #0
            break;
 800317c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <RI_GetPtrReg+0x114>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	3310      	adds	r3, #16
 8003184:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003186:	2000      	movs	r0, #0
            break;
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000165e 	.word	0x2000165e
 8003190:	200019a0 	.word	0x200019a0
 8003194:	200000ec 	.word	0x200000ec
 8003198:	200000e4 	.word	0x200000e4

0800319c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800319c:	4967      	ldr	r1, [pc, #412]	; (800333c <RCM_RegisterRegConv+0x1a0>)
 800319e:	680a      	ldr	r2, [r1, #0]
{
 80031a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	f000 8084 	beq.w	80032b2 <RCM_RegisterRegConv+0x116>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031aa:	7904      	ldrb	r4, [r0, #4]
 80031ac:	7913      	ldrb	r3, [r2, #4]
 80031ae:	429c      	cmp	r4, r3
 80031b0:	d01f      	beq.n	80031f2 <RCM_RegisterRegConv+0x56>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031b2:	684b      	ldr	r3, [r1, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8091 	beq.w	80032dc <RCM_RegisterRegConv+0x140>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031ba:	791d      	ldrb	r5, [r3, #4]
 80031bc:	42a5      	cmp	r5, r4
  uint8_t handle = 255U;
 80031be:	f04f 02ff 	mov.w	r2, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031c2:	d07d      	beq.n	80032c0 <RCM_RegisterRegConv+0x124>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031c4:	688d      	ldr	r5, [r1, #8]
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	f000 80a9 	beq.w	800331e <RCM_RegisterRegConv+0x182>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031cc:	792b      	ldrb	r3, [r5, #4]
 80031ce:	42a3      	cmp	r3, r4
 80031d0:	d07d      	beq.n	80032ce <RCM_RegisterRegConv+0x132>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031d2:	68cb      	ldr	r3, [r1, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 809d 	beq.w	8003314 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031da:	791d      	ldrb	r5, [r3, #4]
 80031dc:	42a5      	cmp	r5, r4
 80031de:	f000 8089 	beq.w	80032f4 <RCM_RegisterRegConv+0x158>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80031e2:	2a03      	cmp	r2, #3
 80031e4:	bf88      	it	hi
 80031e6:	22ff      	movhi	r2, #255	; 0xff
 80031e8:	f240 809e 	bls.w	8003328 <RCM_RegisterRegConv+0x18c>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80031ec:	4610      	mov	r0, r2
 80031ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	6803      	ldr	r3, [r0, #0]
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d1db      	bne.n	80031b2 <RCM_RegisterRegConv+0x16>
    uint8_t i = 0;
 80031fa:	2200      	movs	r2, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80031fc:	4d50      	ldr	r5, [pc, #320]	; (8003340 <RCM_RegisterRegConv+0x1a4>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031fe:	689c      	ldr	r4, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8003200:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003204:	2100      	movs	r1, #0
 8003206:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
 800320a:	07e5      	lsls	r5, r4, #31
 800320c:	d422      	bmi.n	8003254 <RCM_RegisterRegConv+0xb8>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800320e:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003210:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003212:	f021 0104 	bic.w	r1, r1, #4
 8003216:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003218:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800321a:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800321c:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800321e:	f021 0120 	bic.w	r1, r1, #32
 8003222:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003224:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800322c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003230:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003234:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	2900      	cmp	r1, #0
 800323a:	dbfc      	blt.n	8003236 <RCM_RegisterRegConv+0x9a>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	07cc      	lsls	r4, r1, #31
 8003240:	d408      	bmi.n	8003254 <RCM_RegisterRegConv+0xb8>
  MODIFY_REG(ADCx->CR,
 8003242:	4c40      	ldr	r4, [pc, #256]	; (8003344 <RCM_RegisterRegConv+0x1a8>)
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	4021      	ands	r1, r4
 8003248:	f041 0101 	orr.w	r1, r1, #1
 800324c:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	07c9      	lsls	r1, r1, #31
 8003252:	d5f7      	bpl.n	8003244 <RCM_RegisterRegConv+0xa8>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003254:	6b19      	ldr	r1, [r3, #48]	; 0x30
      RCM_NoInj_array[handle].enable = false;
 8003256:	4f3c      	ldr	r7, [pc, #240]	; (8003348 <RCM_RegisterRegConv+0x1ac>)
 8003258:	f021 010f 	bic.w	r1, r1, #15
 800325c:	6319      	str	r1, [r3, #48]	; 0x30
 800325e:	eb02 0442 	add.w	r4, r2, r2, lsl #1
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003262:	7905      	ldrb	r5, [r0, #4]
      RCM_NoInj_array[handle].enable = false;
 8003264:	0064      	lsls	r4, r4, #1
 8003266:	193e      	adds	r6, r7, r4
 8003268:	2101      	movs	r1, #1
 800326a:	f04f 0800 	mov.w	r8, #0
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800326e:	2d09      	cmp	r5, #9
 8003270:	ea4f 6e85 	mov.w	lr, r5, lsl #26
 8003274:	fa01 f105 	lsl.w	r1, r1, r5
 8003278:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
      RCM_NoInj_array[handle].enable = false;
 800327c:	f807 8004 	strb.w	r8, [r7, r4]
      RCM_NoInj_array[handle].next = handle;
 8003280:	7172      	strb	r2, [r6, #5]
      RCM_NoInj_array[handle].prev = handle;
 8003282:	7132      	strb	r2, [r6, #4]
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003284:	d83d      	bhi.n	8003302 <RCM_RegisterRegConv+0x166>
 8003286:	ea4e 5c0c 	orr.w	ip, lr, ip, lsl #20
 800328a:	ea4c 0101 	orr.w	r1, ip, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800328e:	0dcc      	lsrs	r4, r1, #23
 8003290:	3314      	adds	r3, #20
 8003292:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8003296:	6885      	ldr	r5, [r0, #8]
 8003298:	58e0      	ldr	r0, [r4, r3]
 800329a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800329e:	2607      	movs	r6, #7
 80032a0:	408e      	lsls	r6, r1
 80032a2:	408d      	lsls	r5, r1
 80032a4:	ea20 0106 	bic.w	r1, r0, r6
 80032a8:	4329      	orrs	r1, r5
 80032aa:	50e1      	str	r1, [r4, r3]
}
 80032ac:	4610      	mov	r0, r2
 80032ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032b2:	684b      	ldr	r3, [r1, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d039      	beq.n	800332c <RCM_RegisterRegConv+0x190>
 80032b8:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032ba:	791d      	ldrb	r5, [r3, #4]
 80032bc:	42a5      	cmp	r5, r4
 80032be:	d181      	bne.n	80031c4 <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032c0:	681d      	ldr	r5, [r3, #0]
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	42ab      	cmp	r3, r5
 80032c6:	f47f af7d 	bne.w	80031c4 <RCM_RegisterRegConv+0x28>
 80032ca:	2201      	movs	r2, #1
 80032cc:	e796      	b.n	80031fc <RCM_RegisterRegConv+0x60>
 80032ce:	682d      	ldr	r5, [r5, #0]
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	429d      	cmp	r5, r3
 80032d4:	f47f af7d 	bne.w	80031d2 <RCM_RegisterRegConv+0x36>
      i++;
 80032d8:	2202      	movs	r2, #2
 80032da:	e78f      	b.n	80031fc <RCM_RegisterRegConv+0x60>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032dc:	688d      	ldr	r5, [r1, #8]
      i++;
 80032de:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	f47f af73 	bne.w	80031cc <RCM_RegisterRegConv+0x30>
 80032e6:	68cb      	ldr	r3, [r1, #12]
 80032e8:	b1f3      	cbz	r3, 8003328 <RCM_RegisterRegConv+0x18c>
 80032ea:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032ec:	791d      	ldrb	r5, [r3, #4]
 80032ee:	42a5      	cmp	r5, r4
 80032f0:	f47f af77 	bne.w	80031e2 <RCM_RegisterRegConv+0x46>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032f4:	681c      	ldr	r4, [r3, #0]
 80032f6:	6803      	ldr	r3, [r0, #0]
 80032f8:	429c      	cmp	r4, r3
 80032fa:	f47f af72 	bne.w	80031e2 <RCM_RegisterRegConv+0x46>
      i++;
 80032fe:	2203      	movs	r2, #3
 8003300:	e77c      	b.n	80031fc <RCM_RegisterRegConv+0x60>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003302:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003306:	ea41 010e 	orr.w	r1, r1, lr
 800330a:	f1ac 0c1e 	sub.w	ip, ip, #30
 800330e:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
 8003312:	e7bc      	b.n	800328e <RCM_RegisterRegConv+0xf2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003314:	2a04      	cmp	r2, #4
 8003316:	f67f af64 	bls.w	80031e2 <RCM_RegisterRegConv+0x46>
 800331a:	6803      	ldr	r3, [r0, #0]
 800331c:	e7ef      	b.n	80032fe <RCM_RegisterRegConv+0x162>
 800331e:	2a04      	cmp	r2, #4
 8003320:	bf8c      	ite	hi
 8003322:	2202      	movhi	r2, #2
 8003324:	2200      	movls	r2, #0
 8003326:	e7de      	b.n	80032e6 <RCM_RegisterRegConv+0x14a>
 8003328:	6803      	ldr	r3, [r0, #0]
 800332a:	e767      	b.n	80031fc <RCM_RegisterRegConv+0x60>
 800332c:	688d      	ldr	r5, [r1, #8]
 800332e:	b115      	cbz	r5, 8003336 <RCM_RegisterRegConv+0x19a>
 8003330:	461a      	mov	r2, r3
 8003332:	7904      	ldrb	r4, [r0, #4]
 8003334:	e74a      	b.n	80031cc <RCM_RegisterRegConv+0x30>
 8003336:	462a      	mov	r2, r5
 8003338:	e7d5      	b.n	80032e6 <RCM_RegisterRegConv+0x14a>
 800333a:	bf00      	nop
 800333c:	200016a0 	.word	0x200016a0
 8003340:	20001660 	.word	0x20001660
 8003344:	7fffffc0 	.word	0x7fffffc0
 8003348:	20001680 	.word	0x20001680

0800334c <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 800334c:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 800334e:	0044      	lsls	r4, r0, #1
 8003350:	1822      	adds	r2, r4, r0
 8003352:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <RCM_ExecRegularConv+0x170>)
 8003354:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003358:	2a00      	cmp	r2, #0
 800335a:	d139      	bne.n	80033d0 <RCM_ExecRegularConv+0x84>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 800335c:	7819      	ldrb	r1, [r3, #0]
 800335e:	2900      	cmp	r1, #0
 8003360:	d178      	bne.n	8003454 <RCM_ExecRegularConv+0x108>
 8003362:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 8003364:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 8003366:	2900      	cmp	r1, #0
 8003368:	d07a      	beq.n	8003460 <RCM_ExecRegularConv+0x114>
      {
        if (RCM_NoInj_array[i].next > handle)
 800336a:	7ade      	ldrb	r6, [r3, #11]
 800336c:	4286      	cmp	r6, r0
 800336e:	f200 8097 	bhi.w	80034a0 <RCM_ExecRegularConv+0x154>
      if (true == RCM_NoInj_array [i].enable)
 8003372:	7b1a      	ldrb	r2, [r3, #12]
 8003374:	2a00      	cmp	r2, #0
 8003376:	f000 8096 	beq.w	80034a6 <RCM_ExecRegularConv+0x15a>
        if (RCM_NoInj_array[i].next > handle)
 800337a:	7c5e      	ldrb	r6, [r3, #17]
 800337c:	42b0      	cmp	r0, r6
 800337e:	d305      	bcc.n	800338c <RCM_ExecRegularConv+0x40>
      if (true == RCM_NoInj_array [i].enable)
 8003380:	7c9a      	ldrb	r2, [r3, #18]
 8003382:	2a00      	cmp	r2, #0
 8003384:	f040 8093 	bne.w	80034ae <RCM_ExecRegularConv+0x162>
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8003388:	2202      	movs	r2, #2
 800338a:	e070      	b.n	800346e <RCM_ExecRegularConv+0x122>
 800338c:	2202      	movs	r2, #2
      if (true == RCM_NoInj_array [i].enable)
 800338e:	4611      	mov	r1, r2
          RCM_NoInj_array[i].next = handle;
 8003390:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003394:	1821      	adds	r1, r4, r0
 8003396:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800339a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 800339e:	714e      	strb	r6, [r1, #5]
 80033a0:	4e47      	ldr	r6, [pc, #284]	; (80034c0 <RCM_ExecRegularConv+0x174>)
          RCM_NoInj_array[handle].prev = i;
 80033a2:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 80033a4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 80033a8:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80033ac:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array[i].next = handle;
 80033ae:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80033b0:	7138      	strb	r0, [r7, #4]
      {
        /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
 80033b2:	1821      	adds	r1, r4, r0
 80033b4:	0049      	lsls	r1, r1, #1
 80033b6:	185d      	adds	r5, r3, r1
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033bc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    RCM_NoInj_array[handle].status = notvalid;
 80033c0:	2700      	movs	r7, #0
 80033c2:	706f      	strb	r7, [r5, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033c4:	7852      	ldrb	r2, [r2, #1]
    RCM_NoInj_array[handle].enable = true;
 80033c6:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033c8:	42aa      	cmp	r2, r5
    RCM_NoInj_array[handle].enable = true;
 80033ca:	545d      	strb	r5, [r3, r1]
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80033cc:	bf18      	it	ne
 80033ce:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80033d0:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <RCM_ExecRegularConv+0x178>)
 80033d2:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	d132      	bne.n	8003440 <RCM_ExecRegularConv+0xf4>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <RCM_ExecRegularConv+0x17c>)
 80033dc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80033e0:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80033e2:	6811      	ldr	r1, [r2, #0]
 80033e4:	2d09      	cmp	r5, #9
 80033e6:	f04f 0201 	mov.w	r2, #1
 80033ea:	ea4f 6785 	mov.w	r7, r5, lsl #26
 80033ee:	fa02 f205 	lsl.w	r2, r2, r5
 80033f2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80033f6:	d929      	bls.n	800344c <RCM_ExecRegularConv+0x100>
 80033f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80033fc:	433a      	orrs	r2, r7
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80033fe:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003400:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  MODIFY_REG(*preg,
 8003404:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8003406:	0d12      	lsrs	r2, r2, #20
 8003408:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 800340c:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003410:	432a      	orrs	r2, r5
 8003412:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003414:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003416:	688a      	ldr	r2, [r1, #8]
 8003418:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800341c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003420:	f042 0204 	orr.w	r2, r2, #4
 8003424:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003426:	680a      	ldr	r2, [r1, #0]
 8003428:	0752      	lsls	r2, r2, #29
 800342a:	d5fc      	bpl.n	8003426 <RCM_ExecRegularConv+0xda>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 800342c:	1822      	adds	r2, r4, r0
 800342e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003434:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003436:	4d22      	ldr	r5, [pc, #136]	; (80034c0 <RCM_ExecRegularConv+0x174>)
    RCM_NoInj_array[handle].status = valid;
 8003438:	2102      	movs	r1, #2
 800343a:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 800343c:	7952      	ldrb	r2, [r2, #5]
 800343e:	702a      	strb	r2, [r5, #0]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003440:	4420      	add	r0, r4
 8003442:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  return retVal;
}
 8003446:	bcf0      	pop	{r4, r5, r6, r7}
 8003448:	8858      	ldrh	r0, [r3, #2]
 800344a:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800344c:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 8003450:	4332      	orrs	r2, r6
 8003452:	e7d7      	b.n	8003404 <RCM_ExecRegularConv+0xb8>
        if (RCM_NoInj_array[i].next > handle)
 8003454:	795e      	ldrb	r6, [r3, #5]
 8003456:	42b0      	cmp	r0, r6
 8003458:	d399      	bcc.n	800338e <RCM_ExecRegularConv+0x42>
      if (true == RCM_NoInj_array [i].enable)
 800345a:	7999      	ldrb	r1, [r3, #6]
 800345c:	2900      	cmp	r1, #0
 800345e:	d184      	bne.n	800336a <RCM_ExecRegularConv+0x1e>
 8003460:	7b19      	ldrb	r1, [r3, #12]
 8003462:	2900      	cmp	r1, #0
 8003464:	d189      	bne.n	800337a <RCM_ExecRegularConv+0x2e>
 8003466:	7c99      	ldrb	r1, [r3, #18]
 8003468:	bb09      	cbnz	r1, 80034ae <RCM_ExecRegularConv+0x162>
       if (LastEnable != RCM_MAX_CONV )
 800346a:	2a04      	cmp	r2, #4
 800346c:	d014      	beq.n	8003498 <RCM_ExecRegularConv+0x14c>
         formerNext = RCM_NoInj_array[LastEnable].next;
 800346e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8003472:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003476:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003478:	f895 c005 	ldrb.w	ip, [r5, #5]
 800347c:	4e10      	ldr	r6, [pc, #64]	; (80034c0 <RCM_ExecRegularConv+0x174>)
         RCM_NoInj_array[formerNext].prev = handle;
 800347e:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003482:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[formerNext].prev = handle;
 8003486:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 800348a:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array[handle].next = formerNext;
 800348c:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003490:	7138      	strb	r0, [r7, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003492:	7168      	strb	r0, [r5, #5]
 8003494:	7832      	ldrb	r2, [r6, #0]
 8003496:	e78c      	b.n	80033b2 <RCM_ExecRegularConv+0x66>
         RCM_currentHandle = handle;
 8003498:	4e09      	ldr	r6, [pc, #36]	; (80034c0 <RCM_ExecRegularConv+0x174>)
 800349a:	4602      	mov	r2, r0
 800349c:	7030      	strb	r0, [r6, #0]
 800349e:	e788      	b.n	80033b2 <RCM_ExecRegularConv+0x66>
      i++;
 80034a0:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 80034a2:	4611      	mov	r1, r2
 80034a4:	e774      	b.n	8003390 <RCM_ExecRegularConv+0x44>
 80034a6:	7c9a      	ldrb	r2, [r3, #18]
 80034a8:	b90a      	cbnz	r2, 80034ae <RCM_ExecRegularConv+0x162>
      i++;
 80034aa:	2201      	movs	r2, #1
 80034ac:	e7df      	b.n	800346e <RCM_ExecRegularConv+0x122>
        if (RCM_NoInj_array[i].next > handle)
 80034ae:	7dde      	ldrb	r6, [r3, #23]
 80034b0:	4286      	cmp	r6, r0
      i++;
 80034b2:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array[i].next > handle)
 80034b6:	d9da      	bls.n	800346e <RCM_ExecRegularConv+0x122>
 80034b8:	e769      	b.n	800338e <RCM_ExecRegularConv+0x42>
 80034ba:	bf00      	nop
 80034bc:	20001680 	.word	0x20001680
 80034c0:	2000169c 	.word	0x2000169c
 80034c4:	20000238 	.word	0x20000238
 80034c8:	200016a0 	.word	0x200016a0

080034cc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80034cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80034ce:	4c6c      	ldr	r4, [pc, #432]	; (8003680 <RCM_ExecUserConv+0x1b4>)
 80034d0:	7823      	ldrb	r3, [r4, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d000      	beq.n	80034d8 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80034d8:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <RCM_ExecUserConv+0x1b8>)
  if (false == RCM_NoInj_array [handle].enable)
 80034da:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <RCM_ExecUserConv+0x1bc>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80034dc:	7810      	ldrb	r0, [r2, #0]
  if (false == RCM_NoInj_array [handle].enable)
 80034de:	0042      	lsls	r2, r0, #1
 80034e0:	1811      	adds	r1, r2, r0
 80034e2:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d150      	bne.n	800358c <RCM_ExecUserConv+0xc0>
      if (true == RCM_NoInj_array [i].enable)
 80034ea:	781d      	ldrb	r5, [r3, #0]
 80034ec:	b1b5      	cbz	r5, 800351c <RCM_ExecUserConv+0x50>
        if (RCM_NoInj_array[i].next > handle)
 80034ee:	795e      	ldrb	r6, [r3, #5]
 80034f0:	42b0      	cmp	r0, r6
 80034f2:	d214      	bcs.n	800351e <RCM_ExecUserConv+0x52>
      if (true == RCM_NoInj_array [i].enable)
 80034f4:	460d      	mov	r5, r1
          RCM_NoInj_array[i].next = handle;
 80034f6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 80034fa:	1815      	adds	r5, r2, r0
 80034fc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003500:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003504:	716e      	strb	r6, [r5, #5]
          RCM_NoInj_array[i].next = handle;
 8003506:	eb03 0747 	add.w	r7, r3, r7, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800350a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 800350e:	4e5f      	ldr	r6, [pc, #380]	; (800368c <RCM_ExecUserConv+0x1c0>)
          RCM_NoInj_array[handle].prev = i;
 8003510:	7129      	strb	r1, [r5, #4]
          RCM_NoInj_array[i].next = handle;
 8003512:	7178      	strb	r0, [r7, #5]
 8003514:	7831      	ldrb	r1, [r6, #0]
          RCM_NoInj_array[formerNext].prev = handle;
 8003516:	f88c 0004 	strb.w	r0, [ip, #4]
 800351a:	e026      	b.n	800356a <RCM_ExecUserConv+0x9e>
  uint8_t LastEnable = RCM_MAX_CONV;
 800351c:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 800351e:	799d      	ldrb	r5, [r3, #6]
 8003520:	2d00      	cmp	r5, #0
 8003522:	f000 808e 	beq.w	8003642 <RCM_ExecUserConv+0x176>
        if (RCM_NoInj_array[i].next > handle)
 8003526:	7ade      	ldrb	r6, [r3, #11]
 8003528:	42b0      	cmp	r0, r6
 800352a:	f0c0 809c 	bcc.w	8003666 <RCM_ExecUserConv+0x19a>
      if (true == RCM_NoInj_array [i].enable)
 800352e:	7b19      	ldrb	r1, [r3, #12]
 8003530:	2900      	cmp	r1, #0
 8003532:	f040 809b 	bne.w	800366c <RCM_ExecUserConv+0x1a0>
 8003536:	7c99      	ldrb	r1, [r3, #18]
 8003538:	2900      	cmp	r1, #0
 800353a:	f040 8086 	bne.w	800364a <RCM_ExecUserConv+0x17e>
      i++;
 800353e:	2101      	movs	r1, #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003540:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8003544:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003548:	1815      	adds	r5, r2, r0
         formerNext = RCM_NoInj_array[LastEnable].next;
 800354a:	f897 e005 	ldrb.w	lr, [r7, #5]
 800354e:	4e4f      	ldr	r6, [pc, #316]	; (800368c <RCM_ExecUserConv+0x1c0>)
         RCM_NoInj_array[handle].next = formerNext;
 8003550:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array[formerNext].prev = handle;
 8003554:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8003558:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 800355c:	7129      	strb	r1, [r5, #4]
 800355e:	7831      	ldrb	r1, [r6, #0]
         RCM_NoInj_array[handle].next = formerNext;
 8003560:	f885 e005 	strb.w	lr, [r5, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003564:	f88c 0004 	strb.w	r0, [ip, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003568:	7178      	strb	r0, [r7, #5]
    RCM_NoInj_array[handle].enable = true;
 800356a:	1815      	adds	r5, r2, r0
 800356c:	006d      	lsls	r5, r5, #1
 800356e:	195f      	adds	r7, r3, r5
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003570:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003574:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RCM_NoInj_array[handle].status = notvalid;
 8003578:	f04f 0c00 	mov.w	ip, #0
 800357c:	f887 c001 	strb.w	ip, [r7, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003580:	7849      	ldrb	r1, [r1, #1]
    RCM_NoInj_array[handle].enable = true;
 8003582:	2701      	movs	r7, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003584:	42b9      	cmp	r1, r7
    RCM_NoInj_array[handle].enable = true;
 8003586:	555f      	strb	r7, [r3, r5]
      RCM_currentHandle = handle;
 8003588:	bf18      	it	ne
 800358a:	7030      	strbne	r0, [r6, #0]
  if (false == PWM_Handle_M1.ADCRegularLocked)
 800358c:	4940      	ldr	r1, [pc, #256]	; (8003690 <RCM_ExecUserConv+0x1c4>)
 800358e:	f891 108c 	ldrb.w	r1, [r1, #140]	; 0x8c
 8003592:	2900      	cmp	r1, #0
 8003594:	d143      	bne.n	800361e <RCM_ExecUserConv+0x152>
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003596:	493f      	ldr	r1, [pc, #252]	; (8003694 <RCM_ExecUserConv+0x1c8>)
 8003598:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800359c:	790e      	ldrb	r6, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800359e:	680d      	ldr	r5, [r1, #0]
 80035a0:	2e09      	cmp	r6, #9
 80035a2:	f04f 0101 	mov.w	r1, #1
 80035a6:	ea4f 6c86 	mov.w	ip, r6, lsl #26
 80035aa:	fa01 f106 	lsl.w	r1, r1, r6
 80035ae:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80035b2:	d83e      	bhi.n	8003632 <RCM_ExecUserConv+0x166>
 80035b4:	ea4c 5707 	orr.w	r7, ip, r7, lsl #20
 80035b8:	4339      	orrs	r1, r7
  MODIFY_REG(*preg,
 80035ba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80035bc:	0d09      	lsrs	r1, r1, #20
 80035be:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 80035c2:	f426 66f8 	bic.w	r6, r6, #1984	; 0x7c0
 80035c6:	4331      	orrs	r1, r6
 80035c8:	6329      	str	r1, [r5, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80035ca:	6c29      	ldr	r1, [r5, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80035cc:	68a9      	ldr	r1, [r5, #8]
 80035ce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80035d2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80035d6:	f041 0104 	orr.w	r1, r1, #4
 80035da:	60a9      	str	r1, [r5, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80035dc:	6829      	ldr	r1, [r5, #0]
 80035de:	0749      	lsls	r1, r1, #29
 80035e0:	d5fc      	bpl.n	80035dc <RCM_ExecUserConv+0x110>
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80035e2:	4402      	add	r2, r0
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80035e4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80035e6:	4d29      	ldr	r5, [pc, #164]	; (800368c <RCM_ExecUserConv+0x1c0>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80035e8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80035ec:	b289      	uxth	r1, r1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80035ee:	4a2a      	ldr	r2, [pc, #168]	; (8003698 <RCM_ExecUserConv+0x1cc>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80035f0:	8059      	strh	r1, [r3, #2]
    RCM_NoInj_array[handle].status = valid;
 80035f2:	2602      	movs	r6, #2
 80035f4:	705e      	strb	r6, [r3, #1]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80035f6:	795b      	ldrb	r3, [r3, #5]
 80035f8:	702b      	strb	r3, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80035fa:	8011      	strh	r1, [r2, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 80035fc:	2302      	movs	r3, #2
 80035fe:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003600:	4b26      	ldr	r3, [pc, #152]	; (800369c <RCM_ExecUserConv+0x1d0>)
 8003602:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8003606:	2d00      	cmp	r5, #0
 8003608:	f43f af65 	beq.w	80034d6 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800360c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8003610:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003612:	2300      	movs	r3, #0
 8003614:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003616:	462b      	mov	r3, r5
}
 8003618:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800361c:	4718      	bx	r3
 800361e:	4402      	add	r2, r0
 8003620:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003624:	4d1c      	ldr	r5, [pc, #112]	; (8003698 <RCM_ExecUserConv+0x1cc>)
 8003626:	785a      	ldrb	r2, [r3, #1]
  retVal = RCM_NoInj_array[handle].value;
 8003628:	8859      	ldrh	r1, [r3, #2]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800362a:	8029      	strh	r1, [r5, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800362c:	2a00      	cmp	r2, #0
 800362e:	d0e7      	beq.n	8003600 <RCM_ExecUserConv+0x134>
 8003630:	e7e4      	b.n	80035fc <RCM_ExecUserConv+0x130>
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003632:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003636:	ea41 010c 	orr.w	r1, r1, ip
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800363a:	3f1e      	subs	r7, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800363c:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
 8003640:	e7bb      	b.n	80035ba <RCM_ExecUserConv+0xee>
      if (true == RCM_NoInj_array [i].enable)
 8003642:	7b1d      	ldrb	r5, [r3, #12]
 8003644:	b995      	cbnz	r5, 800366c <RCM_ExecUserConv+0x1a0>
 8003646:	7c9d      	ldrb	r5, [r3, #18]
 8003648:	b135      	cbz	r5, 8003658 <RCM_ExecUserConv+0x18c>
        if (RCM_NoInj_array[i].next > handle)
 800364a:	7dde      	ldrb	r6, [r3, #23]
 800364c:	42b0      	cmp	r0, r6
      i++;
 800364e:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array[i].next > handle)
 8003652:	f4bf af75 	bcs.w	8003540 <RCM_ExecUserConv+0x74>
 8003656:	e74d      	b.n	80034f4 <RCM_ExecUserConv+0x28>
       if (LastEnable != RCM_MAX_CONV )
 8003658:	2904      	cmp	r1, #4
 800365a:	f47f af71 	bne.w	8003540 <RCM_ExecUserConv+0x74>
         RCM_currentHandle = handle;
 800365e:	4e0b      	ldr	r6, [pc, #44]	; (800368c <RCM_ExecUserConv+0x1c0>)
 8003660:	4601      	mov	r1, r0
 8003662:	7030      	strb	r0, [r6, #0]
 8003664:	e781      	b.n	800356a <RCM_ExecUserConv+0x9e>
      i++;
 8003666:	2101      	movs	r1, #1
      if (true == RCM_NoInj_array [i].enable)
 8003668:	460d      	mov	r5, r1
 800366a:	e744      	b.n	80034f6 <RCM_ExecUserConv+0x2a>
        if (RCM_NoInj_array[i].next > handle)
 800366c:	7c5e      	ldrb	r6, [r3, #17]
 800366e:	42b0      	cmp	r0, r6
 8003670:	d304      	bcc.n	800367c <RCM_ExecUserConv+0x1b0>
      if (true == RCM_NoInj_array [i].enable)
 8003672:	7c99      	ldrb	r1, [r3, #18]
 8003674:	2900      	cmp	r1, #0
 8003676:	d1e8      	bne.n	800364a <RCM_ExecUserConv+0x17e>
      i++;
 8003678:	2102      	movs	r1, #2
 800367a:	e761      	b.n	8003540 <RCM_ExecUserConv+0x74>
 800367c:	2102      	movs	r1, #2
 800367e:	e739      	b.n	80034f4 <RCM_ExecUserConv+0x28>
 8003680:	20001699 	.word	0x20001699
 8003684:	20001698 	.word	0x20001698
 8003688:	20001680 	.word	0x20001680
 800368c:	2000169c 	.word	0x2000169c
 8003690:	20000238 	.word	0x20000238
 8003694:	200016a0 	.word	0x200016a0
 8003698:	2000169a 	.word	0x2000169a
 800369c:	20001660 	.word	0x20001660

080036a0 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 80036a0:	b4f0      	push	{r4, r5, r6, r7}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <RCM_ExecNextConv+0x78>)
 80036a4:	481d      	ldr	r0, [pc, #116]	; (800371c <RCM_ExecNextConv+0x7c>)
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	0054      	lsls	r4, r2, #1
 80036aa:	18a3      	adds	r3, r4, r2
 80036ac:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80036b0:	b35b      	cbz	r3, 800370a <RCM_ExecNextConv+0x6a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <RCM_ExecNextConv+0x80>)
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80036ba:	2504      	movs	r5, #4
 80036bc:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80036be:	791d      	ldrb	r5, [r3, #4]
 80036c0:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80036c2:	2d09      	cmp	r5, #9
 80036c4:	ea4f 6785 	mov.w	r7, r5, lsl #26
 80036c8:	fa03 f305 	lsl.w	r3, r3, r5
 80036cc:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80036d0:	d91d      	bls.n	800370e <RCM_ExecNextConv+0x6e>
 80036d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036d6:	433b      	orrs	r3, r7
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80036d8:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80036da:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(*preg,
 80036de:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80036e0:	0d1b      	lsrs	r3, r3, #20
 80036e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036e6:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80036ea:	432b      	orrs	r3, r5
 80036ec:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80036ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80036f0:	688b      	ldr	r3, [r1, #8]

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80036f2:	4422      	add	r2, r4
 80036f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80036fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003700:	2201      	movs	r2, #1
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	7042      	strb	r2, [r0, #1]
 8003708:	608b      	str	r3, [r1, #8]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 800370a:	bcf0      	pop	{r4, r5, r6, r7}
 800370c:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800370e:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 8003712:	4333      	orrs	r3, r6
 8003714:	e7e3      	b.n	80036de <RCM_ExecNextConv+0x3e>
 8003716:	bf00      	nop
 8003718:	2000169c 	.word	0x2000169c
 800371c:	20001680 	.word	0x20001680
 8003720:	200016a0 	.word	0x200016a0

08003724 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003724:	b470      	push	{r4, r5, r6}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003726:	4810      	ldr	r0, [pc, #64]	; (8003768 <RCM_ReadOngoingConv+0x44>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <RCM_ReadOngoingConv+0x48>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 800372a:	7801      	ldrb	r1, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800372c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003730:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	075b      	lsls	r3, r3, #29
 8003736:	d513      	bpl.n	8003760 <RCM_ReadOngoingConv+0x3c>
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003738:	004a      	lsls	r2, r1, #1
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <RCM_ReadOngoingConv+0x4c>)
 800373c:	1855      	adds	r5, r2, r1
 800373e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003742:	786e      	ldrb	r6, [r5, #1]
 8003744:	f016 0ffd 	tst.w	r6, #253	; 0xfd
 8003748:	d003      	beq.n	8003752 <RCM_ReadOngoingConv+0x2e>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800374a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800374c:	806c      	strh	r4, [r5, #2]
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 800374e:	2402      	movs	r4, #2
 8003750:	706c      	strb	r4, [r5, #1]
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003752:	440a      	add	r2, r1
 8003754:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003758:	795b      	ldrb	r3, [r3, #5]
 800375a:	7003      	strb	r3, [r0, #0]
}
 800375c:	bc70      	pop	{r4, r5, r6}
 800375e:	4770      	bx	lr
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <RCM_ReadOngoingConv+0x4c>)
 8003762:	004a      	lsls	r2, r1, #1
 8003764:	e7f5      	b.n	8003752 <RCM_ReadOngoingConv+0x2e>
 8003766:	bf00      	nop
 8003768:	2000169c 	.word	0x2000169c
 800376c:	200016a0 	.word	0x200016a0
 8003770:	20001680 	.word	0x20001680

08003774 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_MspInit+0x3c>)
{
 8003776:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	661a      	str	r2, [r3, #96]	; 0x60
 8003780:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003782:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003784:	f002 0201 	and.w	r2, r2, #1
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800378e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003792:	659a      	str	r2, [r3, #88]	; 0x58
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800379c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80037a0:	f001 fa42 	bl	8004c28 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037a4:	b003      	add	sp, #12
 80037a6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80037aa:	f001 bcaf 	b.w	800510c <HAL_PWREx_DisableUCPDDeadBattery>
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037b4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b6:	2300      	movs	r3, #0
{
 80037b8:	b09d      	sub	sp, #116	; 0x74
 80037ba:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037bc:	4619      	mov	r1, r3
 80037be:	a80b      	add	r0, sp, #44	; 0x2c
 80037c0:	2244      	movs	r2, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80037c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80037ca:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037cc:	f005 fd7f 	bl	80092ce <memset>
  if(hadc->Instance==ADC1)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d6:	d004      	beq.n	80037e2 <HAL_ADC_MspInit+0x2e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80037d8:	4a3d      	ldr	r2, [pc, #244]	; (80038d0 <HAL_ADC_MspInit+0x11c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d043      	beq.n	8003866 <HAL_ADC_MspInit+0xb2>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80037de:	b01d      	add	sp, #116	; 0x74
 80037e0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80037e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80037e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ea:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80037ec:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80037ee:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f0:	f002 f8be 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d165      	bne.n	80038c4 <HAL_ADC_MspInit+0x110>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80037f8:	4a36      	ldr	r2, [pc, #216]	; (80038d4 <HAL_ADC_MspInit+0x120>)
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80037fe:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003802:	d109      	bne.n	8003818 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_ADC_MspInit+0x124>)
 8003806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800380c:	64da      	str	r2, [r3, #76]	; 0x4c
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_ADC_MspInit+0x124>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800381a:	4830      	ldr	r0, [pc, #192]	; (80038dc <HAL_ADC_MspInit+0x128>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800381e:	f042 0204 	orr.w	r2, r2, #4
 8003822:	64da      	str	r2, [r3, #76]	; 0x4c
 8003824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003826:	f002 0204 	and.w	r2, r2, #4
 800382a:	9202      	str	r2, [sp, #8]
 800382c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	64da      	str	r2, [r3, #76]	; 0x4c
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800383e:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8003840:	2306      	movs	r3, #6
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003844:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800384a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800384e:	f001 faf9 	bl	8004e44 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	a906      	add	r1, sp, #24
 8003854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003858:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385e:	f001 faf1 	bl	8004e44 <HAL_GPIO_Init>
}
 8003862:	b01d      	add	sp, #116	; 0x74
 8003864:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003866:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800386a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003870:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003872:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003874:	f002 f87c 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8003878:	bb38      	cbnz	r0, 80038ca <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_ADC_MspInit+0x120>)
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003880:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003882:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003884:	d109      	bne.n	800389a <HAL_ADC_MspInit+0xe6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_ADC_MspInit+0x124>)
 8003888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800388e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003896:	9304      	str	r3, [sp, #16]
 8003898:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_ADC_MspInit+0x124>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389c:	480f      	ldr	r0, [pc, #60]	; (80038dc <HAL_ADC_MspInit+0x128>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a0:	f042 0204 	orr.w	r2, r2, #4
 80038a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 80038b0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b2:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b4:	9c05      	ldr	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b8:	e9cd 3306 	strd	r3, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038bc:	f001 fac2 	bl	8004e44 <HAL_GPIO_Init>
}
 80038c0:	b01d      	add	sp, #116	; 0x74
 80038c2:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80038c4:	f7fd fc88 	bl	80011d8 <Error_Handler>
 80038c8:	e796      	b.n	80037f8 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 80038ca:	f7fd fc85 	bl	80011d8 <Error_Handler>
 80038ce:	e7d4      	b.n	800387a <HAL_ADC_MspInit+0xc6>
 80038d0:	50000100 	.word	0x50000100
 80038d4:	200016b0 	.word	0x200016b0
 80038d8:	40021000 	.word	0x40021000
 80038dc:	48000800 	.word	0x48000800

080038e0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80038e0:	6802      	ldr	r2, [r0, #0]
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_CORDIC_MspInit+0x2c>)
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d000      	beq.n	80038ea <HAL_CORDIC_MspInit+0xa>
 80038e8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80038ea:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80038f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80038fa:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80038fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003906:	b002      	add	sp, #8
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40020c00 	.word	0x40020c00

08003910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003910:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003912:	6801      	ldr	r1, [r0, #0]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_TIM_Base_MspInit+0x68>)
{
 8003916:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800391a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003920:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003924:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003928:	b008      	add	sp, #32
 800392a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800392c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003930:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003934:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393c:	661a      	str	r2, [r3, #96]	; 0x60
 800393e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003940:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003944:	9201      	str	r2, [sp, #4]
 8003946:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003958:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800395a:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800395c:	2540      	movs	r5, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800395e:	2412      	movs	r4, #18
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003964:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003966:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003968:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800396c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800396e:	f001 fa69 	bl	8004e44 <HAL_GPIO_Init>
}
 8003972:	b008      	add	sp, #32
 8003974:	bd70      	pop	{r4, r5, r6, pc}
 8003976:	bf00      	nop
 8003978:	40012c00 	.word	0x40012c00

0800397c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800397c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 800397e:	6803      	ldr	r3, [r0, #0]
{
 8003980:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003982:	2400      	movs	r4, #0
  if(htim_encoder->Instance==TIM2)
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800398c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003990:	9407      	str	r4, [sp, #28]
  if(htim_encoder->Instance==TIM2)
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003994:	b008      	add	sp, #32
 8003996:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003998:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2602      	movs	r6, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800399e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	659a      	str	r2, [r3, #88]	; 0x58
 80039a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039a8:	f002 0201 	and.w	r2, r2, #1
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80039b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039ba:	f002 0201 	and.w	r2, r2, #1
 80039be:	9201      	str	r2, [sp, #4]
 80039c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039c4:	f042 0202 	orr.w	r2, r2, #2
 80039c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80039ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039d2:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 80039d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80039d8:	a903      	add	r1, sp, #12
 80039da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039e0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80039e6:	f001 fa2d 	bl	8004e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 80039ea:	2308      	movs	r3, #8
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80039ec:	a903      	add	r1, sp, #12
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039f2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 80039f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80039fa:	f001 fa23 	bl	8004e44 <HAL_GPIO_Init>
}
 80039fe:	b008      	add	sp, #32
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
 8003a02:	bf00      	nop
 8003a04:	48000400 	.word	0x48000400

08003a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a08:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003a0a:	6801      	ldr	r1, [r0, #0]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <HAL_TIM_MspPostInit+0x58>)
{
 8003a0e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003a12:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003a18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003a1c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a20:	b007      	add	sp, #28
 8003a22:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a28:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a3e:	2206      	movs	r2, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a42:	f44f 64e0 	mov.w	r4, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4a:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a4c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a52:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	f001 f9f5 	bl	8004e44 <HAL_GPIO_Init>
}
 8003a5a:	b007      	add	sp, #28
 8003a5c:	bd30      	pop	{r4, r5, pc}
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00

08003a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a64:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a66:	2300      	movs	r3, #0
{
 8003a68:	b098      	sub	sp, #96	; 0x60
 8003a6a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	2244      	movs	r2, #68	; 0x44
 8003a70:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003a76:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003a7a:	9306      	str	r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a7c:	f005 fc27 	bl	80092ce <memset>
  if(huart->Instance==USART2)
 8003a80:	6822      	ldr	r2, [r4, #0]
 8003a82:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <HAL_UART_MspInit+0xe0>)
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_UART_MspInit+0x28>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a88:	b018      	add	sp, #96	; 0x60
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a8c:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8e:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a90:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a92:	f001 ff6d 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d14a      	bne.n	8003b30 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003a9c:	4e2b      	ldr	r6, [pc, #172]	; (8003b4c <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aa0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8003aa6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aa8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003aac:	9200      	str	r2, [sp, #0]
 8003aae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003ac0:	230c      	movs	r3, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac8:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003aca:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad0:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	e9cd 5504 	strd	r5, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ada:	f001 f9b3 	bl	8004e44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003ade:	491c      	ldr	r1, [pc, #112]	; (8003b50 <HAL_UART_MspInit+0xec>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ae0:	60b5      	str	r5, [r6, #8]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003ae2:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ae6:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae8:	60f5      	str	r5, [r6, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aea:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aee:	e9c6 5507 	strd	r5, r5, [r6, #28]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003af2:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003af6:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003af8:	f001 f90c 	bl	8004d14 <HAL_DMA_Init>
 8003afc:	b9f0      	cbnz	r0, 8003b3c <HAL_UART_MspInit+0xd8>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003afe:	4d15      	ldr	r5, [pc, #84]	; (8003b54 <HAL_UART_MspInit+0xf0>)
 8003b00:	4815      	ldr	r0, [pc, #84]	; (8003b58 <HAL_UART_MspInit+0xf4>)
 8003b02:	6028      	str	r0, [r5, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003b04:	231b      	movs	r3, #27
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b06:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b08:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003b0a:	606b      	str	r3, [r5, #4]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b0c:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b10:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b12:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b14:	60a9      	str	r1, [r5, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b16:	e9c5 3203 	strd	r3, r2, [r5, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1a:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b1e:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b22:	f001 f8f7 	bl	8004d14 <HAL_DMA_Init>
 8003b26:	b930      	cbnz	r0, 8003b36 <HAL_UART_MspInit+0xd2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b28:	67a5      	str	r5, [r4, #120]	; 0x78
 8003b2a:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003b2c:	b018      	add	sp, #96	; 0x60
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003b30:	f7fd fb52 	bl	80011d8 <Error_Handler>
 8003b34:	e7b1      	b.n	8003a9a <HAL_UART_MspInit+0x36>
      Error_Handler();
 8003b36:	f7fd fb4f 	bl	80011d8 <Error_Handler>
 8003b3a:	e7f5      	b.n	8003b28 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8003b3c:	f7fd fb4c 	bl	80011d8 <Error_Handler>
 8003b40:	e7dd      	b.n	8003afe <HAL_UART_MspInit+0x9a>
 8003b42:	bf00      	nop
 8003b44:	40004400 	.word	0x40004400
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	200016b8 	.word	0x200016b8
 8003b50:	40020008 	.word	0x40020008
 8003b54:	200017f0 	.word	0x200017f0
 8003b58:	4002001c 	.word	0x4002001c

08003b5c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b60:	2240      	movs	r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8003b64:	f7fe b82e 	b.w	8001bc4 <TSK_HighFrequencyTask>

08003b68 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003b6a:	4804      	ldr	r0, [pc, #16]	; (8003b7c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003b6c:	f06f 0201 	mvn.w	r2, #1
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	f004 bd3b 	b.w	80085ec <R3_2_TIMx_UP_IRQHandler>
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	20000238 	.word	0x20000238

08003b80 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003b80:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	0611      	lsls	r1, r2, #24
 8003b88:	d40d      	bmi.n	8003ba6 <TIM1_BRK_TIM15_IRQHandler+0x26>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	05d2      	lsls	r2, r2, #23
 8003b90:	d505      	bpl.n	8003b9e <TIM1_BRK_TIM15_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003b92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b96:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8003b98:	4807      	ldr	r0, [pc, #28]	; (8003bb8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003b9a:	f004 fd65 	bl	8008668 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003ba2:	f7fd bfc7 	b.w	8001b34 <MC_Scheduler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003ba6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003baa:	611a      	str	r2, [r3, #16]
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003bae:	f004 fd7f 	bl	80086b0 <R3_2_BRK_IRQHandler>
 8003bb2:	e7ea      	b.n	8003b8a <TIM1_BRK_TIM15_IRQHandler+0xa>
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	20000238 	.word	0x20000238

08003bbc <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) != 0U)
 8003bbc:	4806      	ldr	r0, [pc, #24]	; (8003bd8 <TIM2_IRQHandler+0x1c>)
 8003bbe:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	07d1      	lsls	r1, r2, #31
 8003bc4:	d502      	bpl.n	8003bcc <TIM2_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	07d2      	lsls	r2, r2, #31
 8003bca:	d400      	bmi.n	8003bce <TIM2_IRQHandler+0x12>
    /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003bcc:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003bce:	f06f 0201 	mvn.w	r2, #1
 8003bd2:	611a      	str	r2, [r3, #16]
      (void)ENC_IRQHandler(&ENCODER_M1);
 8003bd4:	f003 bb00 	b.w	80071d8 <ENC_IRQHandler>
 8003bd8:	200000e0 	.word	0x200000e0

08003bdc <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <DMA1_Channel1_IRQHandler+0x14>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	0792      	lsls	r2, r2, #30
 8003be2:	d400      	bmi.n	8003be6 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8003be4:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003be6:	2202      	movs	r2, #2
 8003be8:	605a      	str	r2, [r3, #4]
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003bea:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <DMA1_Channel1_IRQHandler+0x18>)
 8003bec:	f7fc bfb8 	b.w	8000b60 <ASPEP_HWDataReceivedIT>
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	2000045c 	.word	0x2000045c

08003bf8 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003bf8:	4b32      	ldr	r3, [pc, #200]	; (8003cc4 <USART2_IRQHandler+0xcc>)
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8003bfe:	b510      	push	{r4, lr}
 8003c00:	d455      	bmi.n	8003cae <USART2_IRQHandler+0xb6>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <USART2_IRQHandler+0xcc>)
 8003c04:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003c06:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003c08:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003c0a:	689c      	ldr	r4, [r3, #8]
 8003c0c:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003c0e:	f000 0008 	and.w	r0, r0, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003c12:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003c16:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003c1a:	d516      	bpl.n	8003c4a <USART2_IRQHandler+0x52>
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	d013      	beq.n	8003c4a <USART2_IRQHandler+0x52>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8003c22:	210e      	movs	r1, #14
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <USART2_IRQHandler+0xd0>)
 8003c26:	6219      	str	r1, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	e842 3100 	strex	r1, r3, [r2]
 8003c34:	2900      	cmp	r1, #0
 8003c36:	d1f7      	bne.n	8003c28 <USART2_IRQHandler+0x30>
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <USART2_IRQHandler+0xcc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c3e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	e842 3100 	strex	r1, r3, [r2]
 8003c46:	2900      	cmp	r1, #0
 8003c48:	d1f7      	bne.n	8003c3a <USART2_IRQHandler+0x42>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <USART2_IRQHandler+0xcc>)
 8003c4c:	69d3      	ldr	r3, [r2, #28]
 8003c4e:	06d9      	lsls	r1, r3, #27
 8003c50:	d52b      	bpl.n	8003caa <USART2_IRQHandler+0xb2>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	06db      	lsls	r3, r3, #27
 8003c56:	d400      	bmi.n	8003c5a <USART2_IRQHandler+0x62>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003c58:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	e842 3100 	strex	r1, r3, [r2]
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d1f7      	bne.n	8003c5a <USART2_IRQHandler+0x62>
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <USART2_IRQHandler+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c70:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	e843 2100 	strex	r1, r2, [r3]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	d1f7      	bne.n	8003c6c <USART2_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	e843 2100 	strex	r1, r2, [r3]
 8003c88:	2900      	cmp	r1, #0
 8003c8a:	d1f7      	bne.n	8003c7c <USART2_IRQHandler+0x84>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <USART2_IRQHandler+0xcc>)
 8003c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	e843 2100 	strex	r1, r2, [r3]
 8003c9c:	2900      	cmp	r1, #0
 8003c9e:	d1f7      	bne.n	8003c90 <USART2_IRQHandler+0x98>
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003ca0:	480a      	ldr	r0, [pc, #40]	; (8003ccc <USART2_IRQHandler+0xd4>)
}
 8003ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003ca6:	f7fc bfa9 	b.w	8000bfc <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003caa:	6813      	ldr	r3, [r2, #0]
}
 8003cac:	bd10      	pop	{r4, pc}
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <USART2_IRQHandler+0xd8>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003cb0:	4806      	ldr	r0, [pc, #24]	; (8003ccc <USART2_IRQHandler+0xd4>)
 8003cb2:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003cb4:	2440      	movs	r4, #64	; 0x40
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	600a      	str	r2, [r1, #0]
 8003cbc:	621c      	str	r4, [r3, #32]
 8003cbe:	f7fc fdb7 	bl	8000830 <ASPEP_HWDataTransmittedIT>
 8003cc2:	e79e      	b.n	8003c02 <USART2_IRQHandler+0xa>
 8003cc4:	40004400 	.word	0x40004400
 8003cc8:	40004408 	.word	0x40004408
 8003ccc:	2000045c 	.word	0x2000045c
 8003cd0:	4002001c 	.word	0x4002001c

08003cd4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003cd4:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003cd6:	f7fe f869 	bl	8001dac <TSK_HardwareFaultTask>
 8003cda:	e7fe      	b.n	8003cda <HardFault_Handler+0x6>

08003cdc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003cdc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003cde:	4c0a      	ldr	r4, [pc, #40]	; (8003d08 <SysTick_Handler+0x2c>)
 8003ce0:	7823      	ldrb	r3, [r4, #0]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d009      	beq.n	8003cfa <SysTick_Handler+0x1e>
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003cea:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8003cec:	f7fe f852 	bl	8001d94 <MC_RunMotorControlTasks>
    TC_IncTick(&PosCtrlM1);
 8003cf0:	4806      	ldr	r0, [pc, #24]	; (8003d0c <SysTick_Handler+0x30>)

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 8003cf6:	f005 ba5d 	b.w	80091b4 <TC_IncTick>
    HAL_IncTick();
 8003cfa:	f000 f8f1 	bl	8003ee0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003cfe:	f001 f805 	bl	8004d0c <HAL_SYSTICK_IRQHandler>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e7f1      	b.n	8003cea <SysTick_Handler+0xe>
 8003d06:	bf00      	nop
 8003d08:	200004d4 	.word	0x200004d4
 8003d0c:	200002c8 	.word	0x200002c8

08003d10 <EXTI15_10_IRQHandler>:
/**
  * @brief  This function handles Button IRQ on PIN PC13.
  *                 and M1 Encoder Index IRQ on PIN PB10.
  */
void EXTI15_10_IRQHandler (void)
{
 8003d10:	b508      	push	{r3, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <EXTI15_10_IRQHandler+0x30>)
 8003d14:	695a      	ldr	r2, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8003d16:	0491      	lsls	r1, r2, #18
 8003d18:	d40c      	bmi.n	8003d34 <EXTI15_10_IRQHandler+0x24>
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <EXTI15_10_IRQHandler+0x30>)
 8003d1c:	695a      	ldr	r2, [r3, #20]
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    ( void )UI_HandleStartStopButton_cb ();
  }

	/* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8003d1e:	0552      	lsls	r2, r2, #21
 8003d20:	d400      	bmi.n	8003d24 <EXTI15_10_IRQHandler+0x14>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    TC_EncoderReset(&PosCtrlM1);
  }

}
 8003d22:	bd08      	pop	{r3, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d28:	615a      	str	r2, [r3, #20]
    TC_EncoderReset(&PosCtrlM1);
 8003d2a:	4806      	ldr	r0, [pc, #24]	; (8003d44 <EXTI15_10_IRQHandler+0x34>)
}
 8003d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TC_EncoderReset(&PosCtrlM1);
 8003d30:	f005 ba00 	b.w	8009134 <TC_EncoderReset>
 8003d34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d38:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 8003d3a:	f7fe f847 	bl	8001dcc <UI_HandleStartStopButton_cb>
 8003d3e:	e7ec      	b.n	8003d1a <EXTI15_10_IRQHandler+0xa>
 8003d40:	40010400 	.word	0x40010400
 8003d44:	200002c8 	.word	0x200002c8

08003d48 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003d48:	6802      	ldr	r2, [r0, #0]
 8003d4a:	2340      	movs	r3, #64	; 0x40
{
 8003d4c:	b470      	push	{r4, r5, r6}
 8003d4e:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	e842 3100 	strex	r1, r3, [r2]
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d1f7      	bne.n	8003d50 <UASPEP_INIT+0x8>
 8003d60:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	e841 3400 	strex	r4, r3, [r1]
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	d1f7      	bne.n	8003d64 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003d74:	6901      	ldr	r1, [r0, #16]
 8003d76:	4e17      	ldr	r6, [pc, #92]	; (8003dd4 <UASPEP_INIT+0x8c>)
 8003d78:	6883      	ldr	r3, [r0, #8]
 8003d7a:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003d7c:	68c1      	ldr	r1, [r0, #12]
 8003d7e:	6845      	ldr	r5, [r0, #4]
 8003d80:	5c71      	ldrb	r1, [r6, r1]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003d82:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003d84:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8003d88:	609c      	str	r4, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	6213      	str	r3, [r2, #32]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003d8e:	586b      	ldr	r3, [r5, r1]
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	506b      	str	r3, [r5, r1]
 8003d96:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	e841 3400 	strex	r4, r3, [r1]
 8003da6:	2c00      	cmp	r4, #0
 8003da8:	d1f7      	bne.n	8003d9a <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003daa:	68c3      	ldr	r3, [r0, #12]
 8003dac:	5cf3      	ldrb	r3, [r6, r3]
 8003dae:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003db0:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003db4:	2340      	movs	r3, #64	; 0x40
 8003db6:	60a9      	str	r1, [r5, #8]
 8003db8:	f102 0108 	add.w	r1, r2, #8
 8003dbc:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	e841 3200 	strex	r2, r3, [r1]
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d1f7      	bne.n	8003dbe <UASPEP_INIT+0x76>
}
 8003dce:	bc70      	pop	{r4, r5, r6}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	08009588 	.word	0x08009588

08003dd8 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003dd8:	b470      	push	{r4, r5, r6}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003dda:	6903      	ldr	r3, [r0, #16]
 8003ddc:	4d0b      	ldr	r5, [pc, #44]	; (8003e0c <UASPEP_SEND_PACKET+0x34>)
 8003dde:	6884      	ldr	r4, [r0, #8]
 8003de0:	5ce8      	ldrb	r0, [r5, r3]
 8003de2:	5826      	ldr	r6, [r4, r0]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003de4:	07f3      	lsls	r3, r6, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003de6:	eb04 0500 	add.w	r5, r4, r0
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003dea:	d40c      	bmi.n	8003e06 <UASPEP_SEND_PACKET+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003dec:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003dee:	686b      	ldr	r3, [r5, #4]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	4313      	orrs	r3, r2
 8003df6:	606b      	str	r3, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003df8:	5823      	ldr	r3, [r4, r0]
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	5023      	str	r3, [r4, r0]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003e00:	2001      	movs	r0, #1
  else
  {
    result = false;
  }
  return result;
}
 8003e02:	bc70      	pop	{r4, r5, r6}
 8003e04:	4770      	bx	lr
    result = false;
 8003e06:	2000      	movs	r0, #0
}
 8003e08:	bc70      	pop	{r4, r5, r6}
 8003e0a:	4770      	bx	lr
 8003e0c:	08009588 	.word	0x08009588

08003e10 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003e10:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003e12:	68c3      	ldr	r3, [r0, #12]
 8003e14:	4d09      	ldr	r5, [pc, #36]	; (8003e3c <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003e16:	6844      	ldr	r4, [r0, #4]
 8003e18:	5ce8      	ldrb	r0, [r5, r3]
 8003e1a:	5823      	ldr	r3, [r4, r0]
 8003e1c:	1825      	adds	r5, r4, r0
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003e24:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003e26:	686b      	ldr	r3, [r5, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003e30:	5823      	ldr	r3, [r4, r0]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003e38:	bc30      	pop	{r4, r5}
 8003e3a:	4770      	bx	lr
 8003e3c:	08009588 	.word	0x08009588

08003e40 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003e40:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003e42:	2310      	movs	r3, #16
 8003e44:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003e4a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	e842 3100 	strex	r1, r3, [r2]
 8003e52:	2900      	cmp	r1, #0
 8003e54:	d1f7      	bne.n	8003e46 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003e56:	4770      	bx	lr

08003e58 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e58:	4a03      	ldr	r2, [pc, #12]	; (8003e68 <SystemInit+0x10>)
 8003e5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e66:	4770      	bx	lr
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e6c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_InitTick+0x40>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b90b      	cbnz	r3, 8003e78 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e74:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e78:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <HAL_InitTick+0x44>)
 8003e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7e:	4605      	mov	r5, r0
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	6808      	ldr	r0, [r1, #0]
 8003e86:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e8a:	f000 ff23 	bl	8004cd4 <HAL_SYSTICK_Config>
 8003e8e:	4604      	mov	r4, r0
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d1ef      	bne.n	8003e74 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e94:	2d0f      	cmp	r5, #15
 8003e96:	d8ed      	bhi.n	8003e74 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f000 fed4 	bl	8004c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_InitTick+0x48>)
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	601d      	str	r5, [r3, #0]
}
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	200004dc 	.word	0x200004dc
 8003eb0:	200004d8 	.word	0x200004d8
 8003eb4:	200004e0 	.word	0x200004e0

08003eb8 <HAL_Init>:
{
 8003eb8:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eba:	2003      	movs	r0, #3
{
 8003ebc:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ebe:	f000 feb3 	bl	8004c28 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ec2:	2004      	movs	r0, #4
 8003ec4:	f7ff ffd2 	bl	8003e6c <HAL_InitTick>
 8003ec8:	b118      	cbz	r0, 8003ed2 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
}
 8003ecc:	b003      	add	sp, #12
 8003ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ed2:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8003ed4:	f7ff fc4e 	bl	8003774 <HAL_MspInit>
 8003ed8:	9801      	ldr	r0, [sp, #4]
}
 8003eda:	b003      	add	sp, #12
 8003edc:	f85d fb04 	ldr.w	pc, [sp], #4

08003ee0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003ee0:	4a03      	ldr	r2, [pc, #12]	; (8003ef0 <HAL_IncTick+0x10>)
 8003ee2:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <HAL_IncTick+0x14>)
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	6809      	ldr	r1, [r1, #0]
 8003ee8:	440b      	add	r3, r1
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20001a38 	.word	0x20001a38
 8003ef4:	200004dc 	.word	0x200004dc

08003ef8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ef8:	4b01      	ldr	r3, [pc, #4]	; (8003f00 <HAL_GetTick+0x8>)
 8003efa:	6818      	ldr	r0, [r3, #0]
}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20001a38 	.word	0x20001a38

08003f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f000 80a3 	beq.w	8004058 <HAL_ADC_Init+0x154>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f12:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003f14:	4604      	mov	r4, r0
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	f000 8093 	beq.w	8004042 <HAL_ADC_Init+0x13e>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f1c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f1e:	6893      	ldr	r3, [r2, #8]
 8003f20:	009d      	lsls	r5, r3, #2
 8003f22:	d505      	bpl.n	8003f30 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f24:	6893      	ldr	r3, [r2, #8]
 8003f26:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f2e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f30:	6893      	ldr	r3, [r2, #8]
 8003f32:	00d8      	lsls	r0, r3, #3
 8003f34:	d419      	bmi.n	8003f6a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_ADC_Init+0x20c>)
 8003f38:	4876      	ldr	r0, [pc, #472]	; (8004114 <HAL_ADC_Init+0x210>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003f3c:	6891      	ldr	r1, [r2, #8]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	fba0 0303 	umull	r0, r3, r0, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003f56:	6091      	str	r1, [r2, #8]
 8003f58:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	b12b      	cbz	r3, 8003f6a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003f64:	9b01      	ldr	r3, [sp, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f9      	bne.n	8003f5e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f6a:	6893      	ldr	r3, [r2, #8]
 8003f6c:	00d9      	lsls	r1, r3, #3
 8003f6e:	d45a      	bmi.n	8004026 <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f72:	f043 0310 	orr.w	r3, r3, #16
 8003f76:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f80:	6893      	ldr	r3, [r2, #8]
 8003f82:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8003f86:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f8c:	d152      	bne.n	8004034 <HAL_ADC_Init+0x130>
 8003f8e:	06db      	lsls	r3, r3, #27
 8003f90:	d450      	bmi.n	8004034 <HAL_ADC_Init+0x130>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f9e:	6893      	ldr	r3, [r2, #8]
 8003fa0:	07de      	lsls	r6, r3, #31
 8003fa2:	d409      	bmi.n	8003fb8 <HAL_ADC_Init+0xb4>
 8003fa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fa8:	495b      	ldr	r1, [pc, #364]	; (8004118 <HAL_ADC_Init+0x214>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	6889      	ldr	r1, [r1, #8]
 8003fae:	07cd      	lsls	r5, r1, #31
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	f140 8083 	bpl.w	80040be <HAL_ADC_Init+0x1ba>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003fb8:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8003fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fbe:	432b      	orrs	r3, r5
 8003fc0:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fc2:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fc4:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003fc8:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fcc:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fd2:	d103      	bne.n	8003fdc <HAL_ADC_Init+0xd8>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003fd6:	3901      	subs	r1, #1
 8003fd8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003fde:	b121      	cbz	r1, 8003fea <HAL_ADC_Init+0xe6>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003fe0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe2:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fe6:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe8:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fea:	68d6      	ldr	r6, [r2, #12]
 8003fec:	494b      	ldr	r1, [pc, #300]	; (800411c <HAL_ADC_Init+0x218>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fee:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ff0:	4031      	ands	r1, r6
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ff6:	6913      	ldr	r3, [r2, #16]
 8003ff8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003ffc:	432b      	orrs	r3, r5
 8003ffe:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004000:	6893      	ldr	r3, [r2, #8]
 8004002:	0759      	lsls	r1, r3, #29
 8004004:	d52b      	bpl.n	800405e <HAL_ADC_Init+0x15a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004006:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004008:	6963      	ldr	r3, [r4, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d04f      	beq.n	80040ae <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800400e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004010:	f023 030f 	bic.w	r3, r3, #15
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004016:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004018:	f023 0303 	bic.w	r3, r3, #3
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004022:	b002      	add	sp, #8
 8004024:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004026:	6893      	ldr	r3, [r2, #8]
 8004028:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402c:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004030:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004032:	d0ac      	beq.n	8003f8e <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004034:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004036:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800403e:	b002      	add	sp, #8
 8004040:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004042:	f7ff fbb7 	bl	80037b4 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004046:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8004048:	6625      	str	r5, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800404a:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 800404c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004050:	009d      	lsls	r5, r3, #2
 8004052:	f57f af6d 	bpl.w	8003f30 <HAL_ADC_Init+0x2c>
 8004056:	e765      	b.n	8003f24 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8004058:	2001      	movs	r0, #1
}
 800405a:	b002      	add	sp, #8
 800405c:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800405e:	6893      	ldr	r3, [r2, #8]
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	d4d1      	bmi.n	8004008 <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004064:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004066:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800406a:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 800406c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800406e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004072:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004074:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004078:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800407c:	430b      	orrs	r3, r1
 800407e:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004080:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004082:	b33d      	cbz	r5, 80040d4 <HAL_ADC_Init+0x1d0>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004088:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800408a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800408e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004092:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004096:	432b      	orrs	r3, r5
 8004098:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800409c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d023      	beq.n	80040ec <HAL_ADC_Init+0x1e8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040a4:	6913      	ldr	r3, [r2, #16]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6113      	str	r3, [r2, #16]
 80040ac:	e7ac      	b.n	8004008 <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040b0:	6a23      	ldr	r3, [r4, #32]
 80040b2:	f021 010f 	bic.w	r1, r1, #15
 80040b6:	3b01      	subs	r3, #1
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6313      	str	r3, [r2, #48]	; 0x30
 80040bc:	e7ab      	b.n	8004016 <HAL_ADC_Init+0x112>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f af7a 	bne.w	8003fb8 <HAL_ADC_Init+0xb4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040c4:	4916      	ldr	r1, [pc, #88]	; (8004120 <HAL_ADC_Init+0x21c>)
 80040c6:	6865      	ldr	r5, [r4, #4]
 80040c8:	688b      	ldr	r3, [r1, #8]
 80040ca:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80040ce:	432b      	orrs	r3, r5
 80040d0:	608b      	str	r3, [r1, #8]
 80040d2:	e771      	b.n	8003fb8 <HAL_ADC_Init+0xb4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80040da:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80040de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80040ea:	e7d7      	b.n	800409c <HAL_ADC_Init+0x198>
        MODIFY_REG(hadc->Instance->CFGR2,
 80040ec:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 80040f0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80040f2:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6911      	ldr	r1, [r2, #16]
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	4333      	orrs	r3, r6
 80040fe:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004102:	432b      	orrs	r3, r5
 8004104:	f021 0104 	bic.w	r1, r1, #4
 8004108:	430b      	orrs	r3, r1
 800410a:	6113      	str	r3, [r2, #16]
 800410c:	e77c      	b.n	8004008 <HAL_ADC_Init+0x104>
 800410e:	bf00      	nop
 8004110:	200004d8 	.word	0x200004d8
 8004114:	053e2d63 	.word	0x053e2d63
 8004118:	50000100 	.word	0x50000100
 800411c:	fff04007 	.word	0xfff04007
 8004120:	50000300 	.word	0x50000300

08004124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004128:	4603      	mov	r3, r0
 800412a:	b083      	sub	sp, #12
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800412c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0UL;
 8004130:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8004132:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004134:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004136:	f000 810e 	beq.w	8004356 <HAL_ADC_ConfigChannel+0x232>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800413a:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800413c:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 800413e:	2001      	movs	r0, #1
 8004140:	0765      	lsls	r5, r4, #29
 8004142:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8004146:	d448      	bmi.n	80041da <HAL_ADC_ConfigChannel+0xb6>
  MODIFY_REG(*preg,
 8004148:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800414c:	09a6      	lsrs	r6, r4, #6
 800414e:	f006 060c 	and.w	r6, r6, #12
 8004152:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8004156:	f004 041f 	and.w	r4, r4, #31
 800415a:	5977      	ldr	r7, [r6, r5]
 800415c:	f04f 0c1f 	mov.w	ip, #31
 8004160:	fa0c fc04 	lsl.w	ip, ip, r4
 8004164:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004168:	40a0      	lsls	r0, r4
 800416a:	ea27 070c 	bic.w	r7, r7, ip
 800416e:	4338      	orrs	r0, r7
 8004170:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004172:	6890      	ldr	r0, [r2, #8]
 8004174:	0744      	lsls	r4, r0, #29
 8004176:	d542      	bpl.n	80041fe <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004178:	6890      	ldr	r0, [r2, #8]
 800417a:	680c      	ldr	r4, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800417c:	6890      	ldr	r0, [r2, #8]
 800417e:	07c0      	lsls	r0, r0, #31
 8004180:	d40c      	bmi.n	800419c <HAL_ADC_ConfigChannel+0x78>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004182:	4dc6      	ldr	r5, [pc, #792]	; (800449c <HAL_ADC_ConfigChannel+0x378>)
 8004184:	68ce      	ldr	r6, [r1, #12]
 8004186:	42ae      	cmp	r6, r5
 8004188:	f3c4 0012 	ubfx	r0, r4, #0, #19
 800418c:	f000 8090 	beq.w	80042b0 <HAL_ADC_ConfigChannel+0x18c>
    CLEAR_BIT(ADCx->DIFSEL,
 8004190:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8004194:	ea21 0100 	bic.w	r1, r1, r0
 8004198:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800419c:	49c0      	ldr	r1, [pc, #768]	; (80044a0 <HAL_ADC_ConfigChannel+0x37c>)
 800419e:	420c      	tst	r4, r1
 80041a0:	d02b      	beq.n	80041fa <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041a2:	4dc0      	ldr	r5, [pc, #768]	; (80044a4 <HAL_ADC_ConfigChannel+0x380>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80041a4:	49c0      	ldr	r1, [pc, #768]	; (80044a8 <HAL_ADC_ConfigChannel+0x384>)
 80041a6:	68a8      	ldr	r0, [r5, #8]
 80041a8:	428c      	cmp	r4, r1
 80041aa:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80041ae:	d01e      	beq.n	80041ee <HAL_ADC_ConfigChannel+0xca>
 80041b0:	49be      	ldr	r1, [pc, #760]	; (80044ac <HAL_ADC_ConfigChannel+0x388>)
 80041b2:	428c      	cmp	r4, r1
 80041b4:	d01b      	beq.n	80041ee <HAL_ADC_ConfigChannel+0xca>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041b6:	49be      	ldr	r1, [pc, #760]	; (80044b0 <HAL_ADC_ConfigChannel+0x38c>)
 80041b8:	428c      	cmp	r4, r1
 80041ba:	f040 80d0 	bne.w	800435e <HAL_ADC_ConfigChannel+0x23a>
 80041be:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80041c2:	d11a      	bne.n	80041fa <HAL_ADC_ConfigChannel+0xd6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041c4:	49bb      	ldr	r1, [pc, #748]	; (80044b4 <HAL_ADC_ConfigChannel+0x390>)
 80041c6:	428a      	cmp	r2, r1
 80041c8:	d017      	beq.n	80041fa <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041ca:	68aa      	ldr	r2, [r5, #8]
 80041cc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80041d0:	4316      	orrs	r6, r2
 80041d2:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80041d6:	60ae      	str	r6, [r5, #8]
 80041d8:	e003      	b.n	80041e2 <HAL_ADC_ConfigChannel+0xbe>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041dc:	f042 0220 	orr.w	r2, r2, #32
 80041e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80041e8:	b003      	add	sp, #12
 80041ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041ee:	0201      	lsls	r1, r0, #8
 80041f0:	d403      	bmi.n	80041fa <HAL_ADC_ConfigChannel+0xd6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041f2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80041f6:	f000 80d7 	beq.w	80043a8 <HAL_ADC_ConfigChannel+0x284>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041fa:	2000      	movs	r0, #0
 80041fc:	e7f1      	b.n	80041e2 <HAL_ADC_ConfigChannel+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041fe:	6896      	ldr	r6, [r2, #8]
 8004200:	680c      	ldr	r4, [r1, #0]
 8004202:	f016 0608 	ands.w	r6, r6, #8
 8004206:	d1b9      	bne.n	800417c <HAL_ADC_ConfigChannel+0x58>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004208:	6888      	ldr	r0, [r1, #8]
 800420a:	f3c4 5e04 	ubfx	lr, r4, #20, #5
 800420e:	2507      	movs	r5, #7
 8004210:	0de4      	lsrs	r4, r4, #23
 8004212:	fa05 f50e 	lsl.w	r5, r5, lr
 8004216:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800421a:	f004 0404 	and.w	r4, r4, #4
 800421e:	ea6f 0505 	mvn.w	r5, r5
 8004222:	f102 0c14 	add.w	ip, r2, #20
 8004226:	f000 80de 	beq.w	80043e6 <HAL_ADC_ConfigChannel+0x2c2>
  MODIFY_REG(*preg,
 800422a:	f854 700c 	ldr.w	r7, [r4, ip]
 800422e:	fa00 f00e 	lsl.w	r0, r0, lr
 8004232:	403d      	ands	r5, r7
 8004234:	4328      	orrs	r0, r5
 8004236:	f844 000c 	str.w	r0, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800423a:	6950      	ldr	r0, [r2, #20]
 800423c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004240:	6150      	str	r0, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004242:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004246:	68d7      	ldr	r7, [r2, #12]
 8004248:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800424a:	f1bc 0f04 	cmp.w	ip, #4
 800424e:	f102 0060 	add.w	r0, r2, #96	; 0x60
 8004252:	f000 80d2 	beq.w	80043fa <HAL_ADC_ConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 8004256:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800425a:	f044 4900 	orr.w	r9, r4, #2147483648	; 0x80000000
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800425e:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8004262:	694c      	ldr	r4, [r1, #20]
 8004264:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 8004268:	4d93      	ldr	r5, [pc, #588]	; (80044b8 <HAL_ADC_ConfigChannel+0x394>)
 800426a:	007f      	lsls	r7, r7, #1
 800426c:	40bc      	lsls	r4, r7
 800426e:	ea08 0505 	and.w	r5, r8, r5
 8004272:	ea44 0409 	orr.w	r4, r4, r9
 8004276:	432c      	orrs	r4, r5
 8004278:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800427c:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800427e:	698d      	ldr	r5, [r1, #24]
 8004280:	f850 4027 	ldr.w	r4, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004284:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8004288:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800428c:	432c      	orrs	r4, r5
 800428e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 8004292:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8004294:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8004298:	f1bc 0f01 	cmp.w	ip, #1
 800429c:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80042a0:	bf08      	it	eq
 80042a2:	f04f 7600 	moveq.w	r6, #33554432	; 0x2000000
 80042a6:	4326      	orrs	r6, r4
 80042a8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80042ac:	680c      	ldr	r4, [r1, #0]
 80042ae:	e765      	b.n	800417c <HAL_ADC_ConfigChannel+0x58>
    SET_BIT(ADCx->DIFSEL,
 80042b0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 80042b4:	4305      	orrs	r5, r0
 80042b6:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d063      	beq.n	8004386 <HAL_ADC_ConfigChannel+0x262>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80042c2:	2800      	cmp	r0, #0
 80042c4:	f000 8120 	beq.w	8004508 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80042c8:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042cc:	3001      	adds	r0, #1
 80042ce:	f000 001f 	and.w	r0, r0, #31
 80042d2:	2809      	cmp	r0, #9
 80042d4:	f240 8118 	bls.w	8004508 <HAL_ADC_ConfigChannel+0x3e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80042dc:	2800      	cmp	r0, #0
 80042de:	f000 813e 	beq.w	800455e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80042e2:	fab0 f080 	clz	r0, r0
 80042e6:	3001      	adds	r0, #1
 80042e8:	0680      	lsls	r0, r0, #26
 80042ea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80042f2:	2d00      	cmp	r5, #0
 80042f4:	f000 8138 	beq.w	8004568 <HAL_ADC_ConfigChannel+0x444>
  return __builtin_clz(value);
 80042f8:	fab5 f585 	clz	r5, r5
 80042fc:	3501      	adds	r5, #1
 80042fe:	f005 051f 	and.w	r5, r5, #31
 8004302:	2601      	movs	r6, #1
 8004304:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004308:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800430e:	2c00      	cmp	r4, #0
 8004310:	f000 8128 	beq.w	8004564 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8004314:	fab4 f484 	clz	r4, r4
 8004318:	3401      	adds	r4, #1
 800431a:	f004 041f 	and.w	r4, r4, #31
 800431e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004322:	3c1e      	subs	r4, #30
 8004324:	0524      	lsls	r4, r4, #20
 8004326:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800432a:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800432c:	0dc7      	lsrs	r7, r0, #23
 800432e:	f007 0704 	and.w	r7, r7, #4
 8004332:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004336:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800433a:	597c      	ldr	r4, [r7, r5]
 800433c:	688e      	ldr	r6, [r1, #8]
 800433e:	f04f 0c07 	mov.w	ip, #7
 8004342:	fa0c fc00 	lsl.w	ip, ip, r0
 8004346:	ea24 040c 	bic.w	r4, r4, ip
 800434a:	fa06 f000 	lsl.w	r0, r6, r0
 800434e:	4320      	orrs	r0, r4
 8004350:	5178      	str	r0, [r7, r5]
 8004352:	680c      	ldr	r4, [r1, #0]
 8004354:	e722      	b.n	800419c <HAL_ADC_ConfigChannel+0x78>
  __HAL_LOCK(hadc);
 8004356:	2002      	movs	r0, #2
}
 8004358:	b003      	add	sp, #12
 800435a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800435e:	4957      	ldr	r1, [pc, #348]	; (80044bc <HAL_ADC_ConfigChannel+0x398>)
 8004360:	428c      	cmp	r4, r1
 8004362:	f47f af4a 	bne.w	80041fa <HAL_ADC_ConfigChannel+0xd6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004366:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800436a:	f47f af46 	bne.w	80041fa <HAL_ADC_ConfigChannel+0xd6>
        if (ADC_VREFINT_INSTANCE(hadc))
 800436e:	4951      	ldr	r1, [pc, #324]	; (80044b4 <HAL_ADC_ConfigChannel+0x390>)
 8004370:	428a      	cmp	r2, r1
 8004372:	f43f af42 	beq.w	80041fa <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004376:	68aa      	ldr	r2, [r5, #8]
 8004378:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800437c:	4332      	orrs	r2, r6
 800437e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004382:	60aa      	str	r2, [r5, #8]
 8004384:	e72d      	b.n	80041e2 <HAL_ADC_ConfigChannel+0xbe>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004386:	0ea4      	lsrs	r4, r4, #26
 8004388:	3401      	adds	r4, #1
 800438a:	f004 051f 	and.w	r5, r4, #31
 800438e:	2001      	movs	r0, #1
 8004390:	06a4      	lsls	r4, r4, #26
 8004392:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004396:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004398:	2d09      	cmp	r5, #9
 800439a:	ea40 0004 	orr.w	r0, r0, r4
 800439e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80043a2:	d8be      	bhi.n	8004322 <HAL_ADC_ConfigChannel+0x1fe>
 80043a4:	0524      	lsls	r4, r4, #20
 80043a6:	e7c0      	b.n	800432a <HAL_ADC_ConfigChannel+0x206>
 80043a8:	483e      	ldr	r0, [pc, #248]	; (80044a4 <HAL_ADC_ConfigChannel+0x380>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043aa:	4a45      	ldr	r2, [pc, #276]	; (80044c0 <HAL_ADC_ConfigChannel+0x39c>)
 80043ac:	6881      	ldr	r1, [r0, #8]
 80043ae:	4c45      	ldr	r4, [pc, #276]	; (80044c4 <HAL_ADC_ConfigChannel+0x3a0>)
 80043b0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80043b4:	430e      	orrs	r6, r1
 80043b6:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 80043ba:	6086      	str	r6, [r0, #8]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	0992      	lsrs	r2, r2, #6
 80043c0:	fba4 1202 	umull	r1, r2, r4, r2
 80043c4:	0992      	lsrs	r2, r2, #6
 80043c6:	3201      	adds	r2, #1
 80043c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80043d0:	9a01      	ldr	r2, [sp, #4]
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	f43f af11 	beq.w	80041fa <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 80043d8:	9a01      	ldr	r2, [sp, #4]
 80043da:	3a01      	subs	r2, #1
 80043dc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80043de:	9a01      	ldr	r2, [sp, #4]
 80043e0:	2a00      	cmp	r2, #0
 80043e2:	d1f9      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x2b4>
 80043e4:	e709      	b.n	80041fa <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(*preg,
 80043e6:	f854 000c 	ldr.w	r0, [r4, ip]
 80043ea:	4005      	ands	r5, r0
 80043ec:	f844 500c 	str.w	r5, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80043f0:	6950      	ldr	r0, [r2, #20]
 80043f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80043f6:	6150      	str	r0, [r2, #20]
 80043f8:	e723      	b.n	8004242 <HAL_ADC_ConfigChannel+0x11e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043fa:	6e15      	ldr	r5, [r2, #96]	; 0x60
 80043fc:	6e15      	ldr	r5, [r2, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043fe:	f3c4 0712 	ubfx	r7, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004402:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004406:	2f00      	cmp	r7, #0
 8004408:	d141      	bne.n	800448e <HAL_ADC_ConfigChannel+0x36a>
 800440a:	f3c4 6684 	ubfx	r6, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800440e:	42b5      	cmp	r5, r6
 8004410:	d106      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8004412:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004414:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004418:	6614      	str	r4, [r2, #96]	; 0x60
 800441a:	680c      	ldr	r4, [r1, #0]
 800441c:	f3c4 0712 	ubfx	r7, r4, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004420:	6845      	ldr	r5, [r0, #4]
 8004422:	6846      	ldr	r6, [r0, #4]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004424:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004428:	2f00      	cmp	r7, #0
 800442a:	d14d      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x3a4>
 800442c:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004430:	42ae      	cmp	r6, r5
 8004432:	f040 809b 	bne.w	800456c <HAL_ADC_ConfigChannel+0x448>
  MODIFY_REG(*preg,
 8004436:	6844      	ldr	r4, [r0, #4]
 8004438:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800443c:	6044      	str	r4, [r0, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800443e:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004440:	6885      	ldr	r5, [r0, #8]
 8004442:	6886      	ldr	r6, [r0, #8]
 8004444:	f3c4 0512 	ubfx	r5, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004448:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800444c:	2d00      	cmp	r5, #0
 800444e:	d146      	bne.n	80044de <HAL_ADC_ConfigChannel+0x3ba>
 8004450:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004454:	42ae      	cmp	r6, r5
 8004456:	f100 070c 	add.w	r7, r0, #12
 800445a:	f040 808c 	bne.w	8004576 <HAL_ADC_ConfigChannel+0x452>
  MODIFY_REG(*preg,
 800445e:	6884      	ldr	r4, [r0, #8]
 8004460:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004464:	6084      	str	r4, [r0, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004466:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004468:	6838      	ldr	r0, [r7, #0]
 800446a:	6838      	ldr	r0, [r7, #0]
 800446c:	f3c4 0512 	ubfx	r5, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004470:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004474:	2d00      	cmp	r5, #0
 8004476:	d13f      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x3d4>
 8004478:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800447c:	4285      	cmp	r5, r0
 800447e:	f47f ae7d 	bne.w	800417c <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004488:	6038      	str	r0, [r7, #0]
 800448a:	680c      	ldr	r4, [r1, #0]
 800448c:	e676      	b.n	800417c <HAL_ADC_ConfigChannel+0x58>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004492:	2e00      	cmp	r6, #0
 8004494:	d0c4      	beq.n	8004420 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004496:	fab6 f686 	clz	r6, r6
 800449a:	e7b8      	b.n	800440e <HAL_ADC_ConfigChannel+0x2ea>
 800449c:	407f0000 	.word	0x407f0000
 80044a0:	80080000 	.word	0x80080000
 80044a4:	50000300 	.word	0x50000300
 80044a8:	c3210000 	.word	0xc3210000
 80044ac:	90c00010 	.word	0x90c00010
 80044b0:	c7520000 	.word	0xc7520000
 80044b4:	50000100 	.word	0x50000100
 80044b8:	03fff000 	.word	0x03fff000
 80044bc:	cb840000 	.word	0xcb840000
 80044c0:	200004d8 	.word	0x200004d8
 80044c4:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80044cc:	b11d      	cbz	r5, 80044d6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80044ce:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044d2:	42ae      	cmp	r6, r5
 80044d4:	d0af      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x312>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044d6:	6885      	ldr	r5, [r0, #8]
 80044d8:	6886      	ldr	r6, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044da:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80044e2:	b38d      	cbz	r5, 8004548 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80044e4:	fab5 f585 	clz	r5, r5
 80044e8:	42ae      	cmp	r6, r5
 80044ea:	f100 070c 	add.w	r7, r0, #12
 80044ee:	d0b6      	beq.n	800445e <HAL_ADC_ConfigChannel+0x33a>
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	6838      	ldr	r0, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044f4:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	f43f ae3d 	beq.w	800417c <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 8004502:	fab5 f585 	clz	r5, r5
 8004506:	e7b9      	b.n	800447c <HAL_ADC_ConfigChannel+0x358>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 800450c:	b320      	cbz	r0, 8004558 <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 800450e:	fab0 f080 	clz	r0, r0
 8004512:	3001      	adds	r0, #1
 8004514:	0680      	lsls	r0, r0, #26
 8004516:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800451e:	b1cd      	cbz	r5, 8004554 <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
 8004520:	fab5 f585 	clz	r5, r5
 8004524:	3501      	adds	r5, #1
 8004526:	f005 051f 	and.w	r5, r5, #31
 800452a:	2601      	movs	r6, #1
 800452c:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004530:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004536:	b154      	cbz	r4, 800454e <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
 8004538:	fab4 f484 	clz	r4, r4
 800453c:	3401      	adds	r4, #1
 800453e:	f004 041f 	and.w	r4, r4, #31
 8004542:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004546:	e72d      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x280>
 8004548:	f100 070c 	add.w	r7, r0, #12
 800454c:	e7d0      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x3cc>
  if (value == 0U)
 800454e:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8004552:	e6ea      	b.n	800432a <HAL_ADC_ConfigChannel+0x206>
 8004554:	2502      	movs	r5, #2
 8004556:	e7eb      	b.n	8004530 <HAL_ADC_ConfigChannel+0x40c>
 8004558:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800455c:	e7dd      	b.n	800451a <HAL_ADC_ConfigChannel+0x3f6>
 800455e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004562:	e6c4      	b.n	80042ee <HAL_ADC_ConfigChannel+0x1ca>
 8004564:	4c06      	ldr	r4, [pc, #24]	; (8004580 <HAL_ADC_ConfigChannel+0x45c>)
 8004566:	e6e0      	b.n	800432a <HAL_ADC_ConfigChannel+0x206>
 8004568:	2502      	movs	r5, #2
 800456a:	e6cd      	b.n	8004308 <HAL_ADC_ConfigChannel+0x1e4>
 800456c:	6886      	ldr	r6, [r0, #8]
 800456e:	6886      	ldr	r6, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004570:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004574:	e76e      	b.n	8004454 <HAL_ADC_ConfigChannel+0x330>
 8004576:	68c6      	ldr	r6, [r0, #12]
 8004578:	68c0      	ldr	r0, [r0, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800457a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800457e:	e77d      	b.n	800447c <HAL_ADC_ConfigChannel+0x358>
 8004580:	fe500000 	.word	0xfe500000

08004584 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004588:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 800458c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800458e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004590:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004592:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004594:	f000 8157 	beq.w	8004846 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004598:	6943      	ldr	r3, [r0, #20]
  __HAL_LOCK(hadc);
 800459a:	2201      	movs	r2, #1
 800459c:	4604      	mov	r4, r0
 800459e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06a      	beq.n	800467c <HAL_ADCEx_InjectedConfigChannel+0xf8>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80045a6:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d067      	beq.n	800467c <HAL_ADCEx_InjectedConfigChannel+0xf8>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045ac:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f040 8122 	bne.w	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x274>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045b4:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	2800      	cmp	r0, #0
 80045ba:	f000 8238 	beq.w	8004a2e <HAL_ADCEx_InjectedConfigChannel+0x4aa>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045be:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80045c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045c4:	4318      	orrs	r0, r3
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80045c6:	4310      	orrs	r0, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80045c8:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80045cc:	66a3      	str	r3, [r4, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80045ce:	f005 051f 	and.w	r5, r5, #31
 80045d2:	f3c2 6384 	ubfx	r3, r2, #26, #5
 80045d6:	40ab      	lsls	r3, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80045d8:	4318      	orrs	r0, r3
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	6660      	str	r0, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045de:	6898      	ldr	r0, [r3, #8]
 80045e0:	0700      	lsls	r0, r0, #28
 80045e2:	d410      	bmi.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x82>
 80045e4:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80045e8:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
 80045ec:	0540      	lsls	r0, r0, #21
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	f040 80f7 	bne.w	80047e2 <HAL_ADCEx_InjectedConfigChannel+0x25e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80045f4:	68dd      	ldr	r5, [r3, #12]
 80045f6:	f891 6024 	ldrb.w	r6, [r1, #36]	; 0x24
 80045fa:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80045fe:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004602:	4328      	orrs	r0, r5
 8004604:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004606:	6898      	ldr	r0, [r3, #8]
 8004608:	f010 0004 	ands.w	r0, r0, #4
 800460c:	d04f      	beq.n	80046ae <HAL_ADCEx_InjectedConfigChannel+0x12a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800460e:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004610:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004612:	689d      	ldr	r5, [r3, #8]
 8004614:	07ef      	lsls	r7, r5, #31
 8004616:	d40c      	bmi.n	8004632 <HAL_ADCEx_InjectedConfigChannel+0xae>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004618:	4ec5      	ldr	r6, [pc, #788]	; (8004930 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 800461a:	68cf      	ldr	r7, [r1, #12]
 800461c:	42b7      	cmp	r7, r6
 800461e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004622:	f000 8114 	beq.w	800484e <HAL_ADCEx_InjectedConfigChannel+0x2ca>
    CLEAR_BIT(ADCx->DIFSEL,
 8004626:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800462a:	ea21 0105 	bic.w	r1, r1, r5
 800462e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004632:	49c0      	ldr	r1, [pc, #768]	; (8004934 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8004634:	420a      	tst	r2, r1
 8004636:	d01b      	beq.n	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004638:	4dbf      	ldr	r5, [pc, #764]	; (8004938 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800463a:	4ec0      	ldr	r6, [pc, #768]	; (800493c <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 800463c:	68a9      	ldr	r1, [r5, #8]
 800463e:	42b2      	cmp	r2, r6
 8004640:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004644:	f000 80a7 	beq.w	8004796 <HAL_ADCEx_InjectedConfigChannel+0x212>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004648:	4ebd      	ldr	r6, [pc, #756]	; (8004940 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 800464a:	42b2      	cmp	r2, r6
 800464c:	f000 80a3 	beq.w	8004796 <HAL_ADCEx_InjectedConfigChannel+0x212>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004650:	4ebc      	ldr	r6, [pc, #752]	; (8004944 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004652:	42b2      	cmp	r2, r6
 8004654:	f040 8159 	bne.w	800490a <HAL_ADCEx_InjectedConfigChannel+0x386>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004658:	01ce      	lsls	r6, r1, #7
 800465a:	d409      	bmi.n	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800465c:	4aba      	ldr	r2, [pc, #744]	; (8004948 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d006      	beq.n	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004662:	68ab      	ldr	r3, [r5, #8]
 8004664:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004668:	431f      	orrs	r7, r3
 800466a:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 800466e:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004670:	2300      	movs	r3, #0
 8004672:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004676:	b003      	add	sp, #12
 8004678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800467c:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004680:	2809      	cmp	r0, #9
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	d1ab      	bne.n	80045de <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004686:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004688:	0c55      	lsrs	r5, r2, #17
 800468a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800468e:	b120      	cbz	r0, 800469a <HAL_ADCEx_InjectedConfigChannel+0x116>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004690:	6ace      	ldr	r6, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004692:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004696:	4330      	orrs	r0, r6
 8004698:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800469a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800469c:	4eab      	ldr	r6, [pc, #684]	; (800494c <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 800469e:	4030      	ands	r0, r6
 80046a0:	4328      	orrs	r0, r5
 80046a2:	64d8      	str	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046a4:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80046a6:	6665      	str	r5, [r4, #100]	; 0x64
 80046a8:	0700      	lsls	r0, r0, #28
 80046aa:	d4ac      	bmi.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x82>
 80046ac:	e79a      	b.n	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x60>
 80046ae:	689d      	ldr	r5, [r3, #8]
 80046b0:	f015 0508 	ands.w	r5, r5, #8
 80046b4:	d1ad      	bne.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046b6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80046b8:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80046bc:	2e00      	cmp	r6, #0
 80046be:	f040 80b5 	bne.w	800482c <HAL_ADCEx_InjectedConfigChannel+0x2a8>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80046c2:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046c4:	68d8      	ldr	r0, [r3, #12]
 80046c6:	bf0c      	ite	eq
 80046c8:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046cc:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 80046d0:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d2:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80046d4:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 80046d8:	2e01      	cmp	r6, #1
 80046da:	f000 8149 	beq.w	8004970 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80046de:	691e      	ldr	r6, [r3, #16]
 80046e0:	f026 0602 	bic.w	r6, r6, #2
 80046e4:	611e      	str	r6, [r3, #16]
 80046e6:	f3c2 5804 	ubfx	r8, r2, #20, #5
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80046ea:	688f      	ldr	r7, [r1, #8]
 80046ec:	0dd2      	lsrs	r2, r2, #23
 80046ee:	2607      	movs	r6, #7
 80046f0:	f002 0e04 	and.w	lr, r2, #4
 80046f4:	f103 0c14 	add.w	ip, r3, #20
 80046f8:	fa06 f608 	lsl.w	r6, r6, r8
 80046fc:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8004700:	ea6f 0606 	mvn.w	r6, r6
  MODIFY_REG(*preg,
 8004704:	f85e 200c 	ldr.w	r2, [lr, ip]
 8004708:	f000 812a 	beq.w	8004960 <HAL_ADCEx_InjectedConfigChannel+0x3dc>
 800470c:	4016      	ands	r6, r2
 800470e:	fa07 f708 	lsl.w	r7, r7, r8
 8004712:	4337      	orrs	r7, r6
 8004714:	f84e 700c 	str.w	r7, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800471e:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004720:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004724:	68df      	ldr	r7, [r3, #12]
 8004726:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004728:	f1be 0f04 	cmp.w	lr, #4
 800472c:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8004730:	f000 812a 	beq.w	8004988 <HAL_ADCEx_InjectedConfigChannel+0x404>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004734:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8004738:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(*preg,
 800473a:	f856 902e 	ldr.w	r9, [r6, lr, lsl #2]
 800473e:	f8df 821c 	ldr.w	r8, [pc, #540]	; 800495c <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8004742:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004746:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800474a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800474e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004752:	4317      	orrs	r7, r2
 8004754:	ea09 0808 	and.w	r8, r9, r8
 8004758:	ea47 0708 	orr.w	r7, r7, r8
 800475c:	f846 702e 	str.w	r7, [r6, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004760:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004764:	698f      	ldr	r7, [r1, #24]
 8004766:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800476a:	f891 e01c 	ldrb.w	lr, [r1, #28]
 800476e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004772:	433a      	orrs	r2, r7
 8004774:	f846 202c 	str.w	r2, [r6, ip, lsl #2]
 8004778:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800477a:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 800477e:	f1be 0f01 	cmp.w	lr, #1
 8004782:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004786:	bf08      	it	eq
 8004788:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800478c:	4315      	orrs	r5, r2
 800478e:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
 8004792:	680a      	ldr	r2, [r1, #0]
 8004794:	e73d      	b.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004796:	020a      	lsls	r2, r1, #8
 8004798:	f53f af6a 	bmi.w	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800479c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a0:	f47f af66 	bne.w	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047a4:	4a64      	ldr	r2, [pc, #400]	; (8004938 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80047a6:	496a      	ldr	r1, [pc, #424]	; (8004950 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80047a8:	6893      	ldr	r3, [r2, #8]
 80047aa:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80047ae:	431f      	orrs	r7, r3
 80047b0:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 80047b4:	6097      	str	r7, [r2, #8]
 80047b6:	680b      	ldr	r3, [r1, #0]
 80047b8:	4a66      	ldr	r2, [pc, #408]	; (8004954 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3318      	adds	r3, #24
 80047ca:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f43f af4e 	beq.w	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
          wait_loop_index--;
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f9      	bne.n	80047d4 <HAL_ADCEx_InjectedConfigChannel+0x250>
 80047e0:	e746      	b.n	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
      MODIFY_REG(hadc->Instance->CFGR,
 80047e2:	68dd      	ldr	r5, [r3, #12]
 80047e4:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80047e8:	4328      	orrs	r0, r5
 80047ea:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047ec:	6898      	ldr	r0, [r3, #8]
 80047ee:	f010 0004 	ands.w	r0, r0, #4
 80047f2:	f47f af0c 	bne.w	800460e <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80047f6:	e75a      	b.n	80046ae <HAL_ADCEx_InjectedConfigChannel+0x12a>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80047f8:	e9d1 2600 	ldrd	r2, r6, [r1]
 80047fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047fe:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004802:	f006 061f 	and.w	r6, r6, #31
 8004806:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004808:	431d      	orrs	r5, r3
 800480a:	3801      	subs	r0, #1
 800480c:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
 8004810:	6823      	ldr	r3, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004812:	2800      	cmp	r0, #0
 8004814:	f47f aee3 	bne.w	80045de <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004818:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800481a:	4e4c      	ldr	r6, [pc, #304]	; (800494c <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 800481c:	4030      	ands	r0, r6
 800481e:	4305      	orrs	r5, r0
 8004820:	64dd      	str	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004822:	6898      	ldr	r0, [r3, #8]
 8004824:	0700      	lsls	r0, r0, #28
 8004826:	f53f aeee 	bmi.w	8004606 <HAL_ADCEx_InjectedConfigChannel+0x82>
 800482a:	e6db      	b.n	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800482c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800482e:	2e00      	cmp	r6, #0
 8004830:	f43f af47 	beq.w	80046c2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004834:	2801      	cmp	r0, #1
 8004836:	f000 8129 	beq.w	8004a8c <HAL_ADCEx_InjectedConfigChannel+0x508>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800483a:	68d8      	ldr	r0, [r3, #12]
 800483c:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8004840:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004842:	4628      	mov	r0, r5
 8004844:	e746      	b.n	80046d4 <HAL_ADCEx_InjectedConfigChannel+0x150>
  __HAL_LOCK(hadc);
 8004846:	2002      	movs	r0, #2
}
 8004848:	b003      	add	sp, #12
 800484a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(ADCx->DIFSEL,
 800484e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8004852:	432e      	orrs	r6, r5
 8004854:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004858:	bb5d      	cbnz	r5, 80048b2 <HAL_ADCEx_InjectedConfigChannel+0x32e>
 800485a:	0e92      	lsrs	r2, r2, #26
 800485c:	3201      	adds	r2, #1
 800485e:	f002 061f 	and.w	r6, r2, #31
 8004862:	2501      	movs	r5, #1
 8004864:	0692      	lsls	r2, r2, #26
 8004866:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800486a:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800486c:	2e09      	cmp	r6, #9
 800486e:	ea45 0502 	orr.w	r5, r5, r2
 8004872:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004876:	d946      	bls.n	8004906 <HAL_ADCEx_InjectedConfigChannel+0x382>
 8004878:	3a1e      	subs	r2, #30
 800487a:	0512      	lsls	r2, r2, #20
 800487c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004880:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004882:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004886:	f00c 0c04 	and.w	ip, ip, #4
 800488a:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800488e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004892:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004896:	688e      	ldr	r6, [r1, #8]
 8004898:	f04f 0e07 	mov.w	lr, #7
 800489c:	fa0e fe02 	lsl.w	lr, lr, r2
 80048a0:	ea25 050e 	bic.w	r5, r5, lr
 80048a4:	fa06 f202 	lsl.w	r2, r6, r2
 80048a8:	432a      	orrs	r2, r5
 80048aa:	f84c 2007 	str.w	r2, [ip, r7]
 80048ae:	680a      	ldr	r2, [r1, #0]
 80048b0:	e6bf      	b.n	8004632 <HAL_ADCEx_InjectedConfigChannel+0xae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	f040 80bb 	bne.w	8004a32 <HAL_ADCEx_InjectedConfigChannel+0x4ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	f000 8111 	beq.w	8004ae8 <HAL_ADCEx_InjectedConfigChannel+0x564>
  return __builtin_clz(value);
 80048c6:	fab5 f585 	clz	r5, r5
 80048ca:	3501      	adds	r5, #1
 80048cc:	06ad      	lsls	r5, r5, #26
 80048ce:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	f000 8104 	beq.w	8004ae4 <HAL_ADCEx_InjectedConfigChannel+0x560>
  return __builtin_clz(value);
 80048dc:	fab6 f686 	clz	r6, r6
 80048e0:	3601      	adds	r6, #1
 80048e2:	f006 061f 	and.w	r6, r6, #31
 80048e6:	2701      	movs	r7, #1
 80048e8:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80048ec:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	f000 80f3 	beq.w	8004ade <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return __builtin_clz(value);
 80048f8:	fab2 f282 	clz	r2, r2
 80048fc:	3201      	adds	r2, #1
 80048fe:	f002 021f 	and.w	r2, r2, #31
 8004902:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004906:	0512      	lsls	r2, r2, #20
 8004908:	e7ba      	b.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800490a:	4e13      	ldr	r6, [pc, #76]	; (8004958 <HAL_ADCEx_InjectedConfigChannel+0x3d4>)
 800490c:	42b2      	cmp	r2, r6
 800490e:	f47f aeaf 	bne.w	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004912:	0249      	lsls	r1, r1, #9
 8004914:	f53f aeac 	bmi.w	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f43f aea8 	beq.w	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004920:	68ab      	ldr	r3, [r5, #8]
 8004922:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004926:	431f      	orrs	r7, r3
 8004928:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800492c:	60af      	str	r7, [r5, #8]
 800492e:	e69f      	b.n	8004670 <HAL_ADCEx_InjectedConfigChannel+0xec>
 8004930:	407f0000 	.word	0x407f0000
 8004934:	80080000 	.word	0x80080000
 8004938:	50000300 	.word	0x50000300
 800493c:	c3210000 	.word	0xc3210000
 8004940:	90c00010 	.word	0x90c00010
 8004944:	c7520000 	.word	0xc7520000
 8004948:	50000100 	.word	0x50000100
 800494c:	04104000 	.word	0x04104000
 8004950:	200004d8 	.word	0x200004d8
 8004954:	053e2d63 	.word	0x053e2d63
 8004958:	cb840000 	.word	0xcb840000
 800495c:	03fff000 	.word	0x03fff000
  MODIFY_REG(*preg,
 8004960:	4016      	ands	r6, r2
 8004962:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800496c:	615a      	str	r2, [r3, #20]
 800496e:	e6d7      	b.n	8004720 <HAL_ADCEx_InjectedConfigChannel+0x19c>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004970:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8004972:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004974:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004978:	433e      	orrs	r6, r7
 800497a:	f046 0602 	orr.w	r6, r6, #2
 800497e:	f42c 77ff 	bic.w	r7, ip, #510	; 0x1fe
 8004982:	433e      	orrs	r6, r7
 8004984:	611e      	str	r6, [r3, #16]
 8004986:	e6ae      	b.n	80046e6 <HAL_ADCEx_InjectedConfigChannel+0x162>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004988:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800498a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800498c:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004990:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004994:	f1bc 0f00 	cmp.w	ip, #0
 8004998:	d075      	beq.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x502>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 800499e:	b157      	cbz	r7, 80049b6 <HAL_ADCEx_InjectedConfigChannel+0x432>
  return __builtin_clz(value);
 80049a0:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049a4:	42bd      	cmp	r5, r7
 80049a6:	d106      	bne.n	80049b6 <HAL_ADCEx_InjectedConfigChannel+0x432>
  MODIFY_REG(*preg,
 80049a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
 80049b0:	680a      	ldr	r2, [r1, #0]
 80049b2:	f3c2 0c12 	ubfx	ip, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049b6:	6875      	ldr	r5, [r6, #4]
 80049b8:	6877      	ldr	r7, [r6, #4]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ba:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049be:	f1bc 0f00 	cmp.w	ip, #0
 80049c2:	d168      	bne.n	8004a96 <HAL_ADCEx_InjectedConfigChannel+0x512>
 80049c4:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049c8:	42af      	cmp	r7, r5
 80049ca:	f040 809d 	bne.w	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x584>
  MODIFY_REG(*preg,
 80049ce:	6872      	ldr	r2, [r6, #4]
 80049d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049d4:	6072      	str	r2, [r6, #4]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049d6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049d8:	68b5      	ldr	r5, [r6, #8]
 80049da:	68b7      	ldr	r7, [r6, #8]
 80049dc:	f3c2 0512 	ubfx	r5, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049e0:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	d161      	bne.n	8004aac <HAL_ADCEx_InjectedConfigChannel+0x528>
 80049e8:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049ec:	42af      	cmp	r7, r5
 80049ee:	f106 0c0c 	add.w	ip, r6, #12
 80049f2:	f040 8084 	bne.w	8004afe <HAL_ADCEx_InjectedConfigChannel+0x57a>
  MODIFY_REG(*preg,
 80049f6:	68b2      	ldr	r2, [r6, #8]
 80049f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049fc:	60b2      	str	r2, [r6, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049fe:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a00:	f8dc 5000 	ldr.w	r5, [ip]
 8004a04:	f8dc 6000 	ldr.w	r6, [ip]
 8004a08:	f3c2 0512 	ubfx	r5, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a0c:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a10:	2d00      	cmp	r5, #0
 8004a12:	d15a      	bne.n	8004aca <HAL_ADCEx_InjectedConfigChannel+0x546>
 8004a14:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a18:	42b5      	cmp	r5, r6
 8004a1a:	f47f adfa 	bne.w	8004612 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 8004a1e:	f8dc 2000 	ldr.w	r2, [ip]
 8004a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a26:	f8cc 2000 	str.w	r2, [ip]
 8004a2a:	680a      	ldr	r2, [r1, #0]
 8004a2c:	e5f1      	b.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004a2e:	4618      	mov	r0, r3
 8004a30:	e5ca      	b.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x44>
 8004a32:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a36:	3501      	adds	r5, #1
 8004a38:	f005 051f 	and.w	r5, r5, #31
 8004a3c:	2d09      	cmp	r5, #9
 8004a3e:	f67f af3d 	bls.w	80048bc <HAL_ADCEx_InjectedConfigChannel+0x338>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004a46:	2d00      	cmp	r5, #0
 8004a48:	d053      	beq.n	8004af2 <HAL_ADCEx_InjectedConfigChannel+0x56e>
  return __builtin_clz(value);
 8004a4a:	fab5 f585 	clz	r5, r5
 8004a4e:	3501      	adds	r5, #1
 8004a50:	06ad      	lsls	r5, r5, #26
 8004a52:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d047      	beq.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0x56a>
  return __builtin_clz(value);
 8004a5e:	fab6 f686 	clz	r6, r6
 8004a62:	3601      	adds	r6, #1
 8004a64:	f006 061f 	and.w	r6, r6, #31
 8004a68:	2701      	movs	r7, #1
 8004a6a:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004a6e:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004a74:	b38a      	cbz	r2, 8004ada <HAL_ADCEx_InjectedConfigChannel+0x556>
  return __builtin_clz(value);
 8004a76:	fab2 f282 	clz	r2, r2
 8004a7a:	3201      	adds	r2, #1
 8004a7c:	f002 021f 	and.w	r2, r2, #31
 8004a80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004a84:	e6f8      	b.n	8004878 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a86:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8004a8a:	e78b      	b.n	80049a4 <HAL_ADCEx_InjectedConfigChannel+0x420>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a8c:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8004a8e:	f046 0620 	orr.w	r6, r6, #32
 8004a92:	65e6      	str	r6, [r4, #92]	; 0x5c
 8004a94:	e61e      	b.n	80046d4 <HAL_ADCEx_InjectedConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004a9a:	b11d      	cbz	r5, 8004aa4 <HAL_ADCEx_InjectedConfigChannel+0x520>
  return __builtin_clz(value);
 8004a9c:	fab5 f585 	clz	r5, r5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004aa0:	42af      	cmp	r7, r5
 8004aa2:	d094      	beq.n	80049ce <HAL_ADCEx_InjectedConfigChannel+0x44a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004aa4:	68b5      	ldr	r5, [r6, #8]
 8004aa6:	68b7      	ldr	r7, [r6, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa8:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004ab0:	b315      	cbz	r5, 8004af8 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return __builtin_clz(value);
 8004ab2:	fab5 f585 	clz	r5, r5
 8004ab6:	42af      	cmp	r7, r5
 8004ab8:	f106 0c0c 	add.w	ip, r6, #12
 8004abc:	d09b      	beq.n	80049f6 <HAL_ADCEx_InjectedConfigChannel+0x472>
 8004abe:	f8dc 5000 	ldr.w	r5, [ip]
 8004ac2:	f8dc 6000 	ldr.w	r6, [ip]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ac6:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	f43f ad9f 	beq.w	8004612 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  return __builtin_clz(value);
 8004ad4:	fab5 f585 	clz	r5, r5
 8004ad8:	e79e      	b.n	8004a18 <HAL_ADCEx_InjectedConfigChannel+0x494>
  if (value == 0U)
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <HAL_ADCEx_InjectedConfigChannel+0x590>)
 8004adc:	e6d0      	b.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 8004ade:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004ae2:	e6cd      	b.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 8004ae4:	2602      	movs	r6, #2
 8004ae6:	e701      	b.n	80048ec <HAL_ADCEx_InjectedConfigChannel+0x368>
 8004ae8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004aec:	e6f1      	b.n	80048d2 <HAL_ADCEx_InjectedConfigChannel+0x34e>
 8004aee:	2602      	movs	r6, #2
 8004af0:	e7bd      	b.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8004af2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004af6:	e7ae      	b.n	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 8004af8:	f106 0c0c 	add.w	ip, r6, #12
 8004afc:	e7df      	b.n	8004abe <HAL_ADCEx_InjectedConfigChannel+0x53a>
 8004afe:	68f7      	ldr	r7, [r6, #12]
 8004b00:	68f6      	ldr	r6, [r6, #12]
 8004b02:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004b06:	e787      	b.n	8004a18 <HAL_ADCEx_InjectedConfigChannel+0x494>
 8004b08:	68b7      	ldr	r7, [r6, #8]
 8004b0a:	68b7      	ldr	r7, [r6, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b0c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004b10:	e76c      	b.n	80049ec <HAL_ADCEx_InjectedConfigChannel+0x468>
 8004b12:	bf00      	nop
 8004b14:	fe500000 	.word	0xfe500000

08004b18 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b18:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8004b1c:	2a01      	cmp	r2, #1
 8004b1e:	d04b      	beq.n	8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
{
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b22:	6804      	ldr	r4, [r0, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b24:	680e      	ldr	r6, [r1, #0]
{
 8004b26:	b09d      	sub	sp, #116	; 0x74
 8004b28:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b2a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004b2c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b2e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b32:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004b34:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004b38:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b3a:	d007      	beq.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b3c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b42:	f041 0120 	orr.w	r1, r1, #32
 8004b46:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004b48:	b01d      	add	sp, #116	; 0x74
 8004b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b4c:	4d27      	ldr	r5, [pc, #156]	; (8004bec <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8004b4e:	68aa      	ldr	r2, [r5, #8]
 8004b50:	0752      	lsls	r2, r2, #29
 8004b52:	d50a      	bpl.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b54:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b58:	f042 0220 	orr.w	r2, r2, #32
 8004b5c:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004b66:	b01d      	add	sp, #116	; 0x74
 8004b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6a:	68a0      	ldr	r0, [r4, #8]
 8004b6c:	f010 0004 	ands.w	r0, r0, #4
 8004b70:	d1f1      	bne.n	8004b56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b72:	b31e      	cbz	r6, 8004bbc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b74:	f8df e078 	ldr.w	lr, [pc, #120]	; 8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8004b78:	684f      	ldr	r7, [r1, #4]
 8004b7a:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004b7e:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b86:	433a      	orrs	r2, r7
 8004b88:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8004b8c:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b90:	68a2      	ldr	r2, [r4, #8]
 8004b92:	07d4      	lsls	r4, r2, #31
 8004b94:	d427      	bmi.n	8004be6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8004b96:	68a8      	ldr	r0, [r5, #8]
 8004b98:	f010 0001 	ands.w	r0, r0, #1
 8004b9c:	d121      	bne.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
        MODIFY_REG(tmpADC_Common->CCR,
 8004b9e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004ba2:	688c      	ldr	r4, [r1, #8]
 8004ba4:	f422 6171 	bic.w	r1, r2, #3856	; 0xf10
 8004ba8:	f021 010f 	bic.w	r1, r1, #15
 8004bac:	ea46 0204 	orr.w	r2, r6, r4
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	f8ce 2008 	str.w	r2, [lr, #8]
 8004bb6:	e7d3      	b.n	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8004bb8:	2002      	movs	r0, #2
}
 8004bba:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bbc:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8004bbe:	6891      	ldr	r1, [r2, #8]
 8004bc0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004bc4:	6091      	str	r1, [r2, #8]
 8004bc6:	68a0      	ldr	r0, [r4, #8]
 8004bc8:	68a9      	ldr	r1, [r5, #8]
 8004bca:	07c9      	lsls	r1, r1, #31
 8004bcc:	f000 0001 	and.w	r0, r0, #1
 8004bd0:	d407      	bmi.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bd2:	b930      	cbnz	r0, 8004be2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bd4:	6891      	ldr	r1, [r2, #8]
 8004bd6:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8004bda:	f021 010f 	bic.w	r1, r1, #15
 8004bde:	6091      	str	r1, [r2, #8]
 8004be0:	e7be      	b.n	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be2:	2000      	movs	r0, #0
 8004be4:	e7bc      	b.n	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8004be6:	68aa      	ldr	r2, [r5, #8]
 8004be8:	e7ba      	b.n	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8004bea:	bf00      	nop
 8004bec:	50000100 	.word	0x50000100
 8004bf0:	50000300 	.word	0x50000300

08004bf4 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004bf4:	b1b0      	cbz	r0, 8004c24 <HAL_CORDIC_Init+0x30>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004bf6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{
 8004bfa:	b510      	push	{r4, lr}
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004bfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c00:	4604      	mov	r4, r0
 8004c02:	b153      	cbz	r3, 8004c1a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004c04:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004c06:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004c08:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->pOutBuff = NULL;
 8004c0a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004c0e:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004c12:	6160      	str	r0, [r4, #20]
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004c14:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 8004c18:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004c1a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004c1e:	f7fe fe5f 	bl	80038e0 <HAL_CORDIC_MspInit>
 8004c22:	e7ef      	b.n	8004c04 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004c24:	2001      	movs	r0, #1
}
 8004c26:	4770      	bx	lr

08004c28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c28:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8004c30:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c32:	0200      	lsls	r0, r0, #8
 8004c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c38:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004c40:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004c42:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c4c:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <HAL_NVIC_SetPriority+0x64>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c54:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c56:	f1c3 0507 	rsb	r5, r3, #7
 8004c5a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	bf28      	it	cs
 8004c62:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c64:	2c06      	cmp	r4, #6
 8004c66:	d919      	bls.n	8004c9c <HAL_NVIC_SetPriority+0x50>
 8004c68:	3b03      	subs	r3, #3
 8004c6a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c6e:	409c      	lsls	r4, r3
 8004c70:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	40aa      	lsls	r2, r5
 8004c7a:	ea21 0102 	bic.w	r1, r1, r2
 8004c7e:	fa01 f203 	lsl.w	r2, r1, r3
 8004c82:	4322      	orrs	r2, r4
 8004c84:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8004c86:	2800      	cmp	r0, #0
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	db0a      	blt.n	8004ca2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c90:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c94:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c98:	bc30      	pop	{r4, r5}
 8004c9a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c9c:	2400      	movs	r4, #0
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	e7e8      	b.n	8004c74 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <HAL_NVIC_SetPriority+0x68>)
 8004ca4:	f000 000f 	and.w	r0, r0, #15
 8004ca8:	4403      	add	r3, r0
 8004caa:	761a      	strb	r2, [r3, #24]
 8004cac:	bc30      	pop	{r4, r5}
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00
 8004cb4:	e000ecfc 	.word	0xe000ecfc

08004cb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	db07      	blt.n	8004ccc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_NVIC_EnableIRQ+0x18>)
 8004cbe:	f000 011f 	and.w	r1, r0, #31
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	0940      	lsrs	r0, r0, #5
 8004cc6:	408b      	lsls	r3, r1
 8004cc8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000e100 	.word	0xe000e100

08004cd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd4:	3801      	subs	r0, #1
 8004cd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004cda:	d20e      	bcs.n	8004cfa <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cde:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce0:	4c08      	ldr	r4, [pc, #32]	; (8004d04 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce4:	20f0      	movs	r0, #240	; 0xf0
 8004ce6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cea:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cec:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cee:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8004cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e010 	.word	0xe000e010
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop

08004d0c <HAL_SYSTICK_IRQHandler>:
{
 8004d0c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004d0e:	f7ff fffb 	bl	8004d08 <HAL_SYSTICK_Callback>
}
 8004d12:	bd08      	pop	{r3, pc}

08004d14 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d07c      	beq.n	8004e12 <HAL_DMA_Init+0xfe>
 8004d18:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d1a:	4a3f      	ldr	r2, [pc, #252]	; (8004e18 <HAL_DMA_Init+0x104>)
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	4290      	cmp	r0, r2
{
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d24:	d961      	bls.n	8004dea <HAL_DMA_Init+0xd6>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d26:	493d      	ldr	r1, [pc, #244]	; (8004e1c <HAL_DMA_Init+0x108>)
 8004d28:	4a3d      	ldr	r2, [pc, #244]	; (8004e20 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8004d2a:	4c3e      	ldr	r4, [pc, #248]	; (8004e24 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d2c:	4401      	add	r1, r0
 8004d2e:	fba2 2101 	umull	r2, r1, r2, r1
 8004d32:	0909      	lsrs	r1, r1, #4
 8004d34:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d36:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3a:	691e      	ldr	r6, [r3, #16]
 8004d3c:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8004d3e:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d40:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d42:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d44:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8004e3c <HAL_DMA_Init+0x128>
 8004d48:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8004e18 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4c:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d4e:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d52:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d54:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d58:	4c31      	ldr	r4, [pc, #196]	; (8004e20 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8004d5a:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d5e:	69de      	ldr	r6, [r3, #28]
 8004d60:	6459      	str	r1, [r3, #68]	; 0x44
 8004d62:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d64:	b2c5      	uxtb	r5, r0
 8004d66:	3d08      	subs	r5, #8
 8004d68:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d6c:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d6e:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d70:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d74:	4e2c      	ldr	r6, [pc, #176]	; (8004e28 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d76:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d78:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d7c:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d80:	4540      	cmp	r0, r8
 8004d82:	bf98      	it	ls
 8004d84:	4676      	movls	r6, lr
  tmp |=  hdma->Init.Direction        |
 8004d86:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d8a:	0889      	lsrs	r1, r1, #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d8c:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d8e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8004e40 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8004d92:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d94:	fa05 f404 	lsl.w	r4, r5, r4
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d98:	eb06 0e81 	add.w	lr, r6, r1, lsl #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d9c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004da0:	651c      	str	r4, [r3, #80]	; 0x50
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004da2:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004da6:	d029      	beq.n	8004dfc <HAL_DMA_Init+0xe8>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004da8:	6858      	ldr	r0, [r3, #4]
 8004daa:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004dac:	3801      	subs	r0, #1
 8004dae:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004db0:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db4:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004db8:	d826      	bhi.n	8004e08 <HAL_DMA_Init+0xf4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dba:	491c      	ldr	r1, [pc, #112]	; (8004e2c <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dbc:	481c      	ldr	r0, [pc, #112]	; (8004e30 <HAL_DMA_Init+0x11c>)
 8004dbe:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dc0:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004dc2:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dc4:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004dc6:	f002 021f 	and.w	r2, r2, #31
 8004dca:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dce:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd0:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004dd2:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dd4:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd6:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd8:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8004dda:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ddc:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8004dde:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8004de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8004de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dea:	4912      	ldr	r1, [pc, #72]	; (8004e34 <HAL_DMA_Init+0x120>)
 8004dec:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8004dee:	4c12      	ldr	r4, [pc, #72]	; (8004e38 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004df0:	4401      	add	r1, r0
 8004df2:	fba2 2101 	umull	r2, r1, r2, r1
 8004df6:	0909      	lsrs	r1, r1, #4
 8004df8:	0089      	lsls	r1, r1, #2
 8004dfa:	e79c      	b.n	8004d36 <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e00:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e04:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 8004e08:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e0a:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e10:	e7e2      	b.n	8004dd8 <HAL_DMA_Init+0xc4>
    return HAL_ERROR;
 8004e12:	2001      	movs	r0, #1
}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40020407 	.word	0x40020407
 8004e1c:	bffdfbf8 	.word	0xbffdfbf8
 8004e20:	cccccccd 	.word	0xcccccccd
 8004e24:	40020400 	.word	0x40020400
 8004e28:	40020820 	.word	0x40020820
 8004e2c:	1000823f 	.word	0x1000823f
 8004e30:	40020940 	.word	0x40020940
 8004e34:	bffdfff8 	.word	0xbffdfff8
 8004e38:	40020000 	.word	0x40020000
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	40020880 	.word	0x40020880

08004e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e48:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e4a:	6809      	ldr	r1, [r1, #0]
{
 8004e4c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	d079      	beq.n	8004f46 <HAL_GPIO_Init+0x102>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e52:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8005000 <HAL_GPIO_Init+0x1bc>
  uint32_t position = 0x00U;
 8004e56:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e58:	f04f 0a01 	mov.w	sl, #1
 8004e5c:	fa0a fc05 	lsl.w	ip, sl, r5
    if (iocurrent != 0x00u)
 8004e60:	ea1c 0901 	ands.w	r9, ip, r1
 8004e64:	d06b      	beq.n	8004f3e <HAL_GPIO_Init+0xfa>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e66:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004e6a:	006e      	lsls	r6, r5, #1
 8004e6c:	f002 0303 	and.w	r3, r2, #3
 8004e70:	2403      	movs	r4, #3
 8004e72:	1e5f      	subs	r7, r3, #1
 8004e74:	40b4      	lsls	r4, r6
 8004e76:	43e4      	mvns	r4, r4
 8004e78:	2f01      	cmp	r7, #1
 8004e7a:	9400      	str	r4, [sp, #0]
 8004e7c:	d966      	bls.n	8004f4c <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d177      	bne.n	8004f72 <HAL_GPIO_Init+0x12e>
      temp = GPIOx->MODER;
 8004e82:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e84:	40b3      	lsls	r3, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e86:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e88:	4323      	orrs	r3, r4
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e8a:	f412 3f40 	tst.w	r2, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004e8e:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e90:	d055      	beq.n	8004f3e <HAL_GPIO_Init+0xfa>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	4c55      	ldr	r4, [pc, #340]	; (8004fe8 <HAL_GPIO_Init+0x1a4>)
 8004e94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6623      	str	r3, [r4, #96]	; 0x60
 8004e9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e9e:	f025 0603 	bic.w	r6, r5, #3
 8004ea2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004eae:	9303      	str	r3, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eb0:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb4:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004eb6:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eb8:	00a4      	lsls	r4, r4, #2
 8004eba:	230f      	movs	r3, #15
 8004ebc:	40a3      	lsls	r3, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ebe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ec2:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ec6:	d013      	beq.n	8004ef0 <HAL_GPIO_Init+0xac>
 8004ec8:	4f48      	ldr	r7, [pc, #288]	; (8004fec <HAL_GPIO_Init+0x1a8>)
 8004eca:	42b8      	cmp	r0, r7
 8004ecc:	d07e      	beq.n	8004fcc <HAL_GPIO_Init+0x188>
 8004ece:	4f48      	ldr	r7, [pc, #288]	; (8004ff0 <HAL_GPIO_Init+0x1ac>)
 8004ed0:	42b8      	cmp	r0, r7
 8004ed2:	d076      	beq.n	8004fc2 <HAL_GPIO_Init+0x17e>
 8004ed4:	4f47      	ldr	r7, [pc, #284]	; (8004ff4 <HAL_GPIO_Init+0x1b0>)
 8004ed6:	42b8      	cmp	r0, r7
 8004ed8:	d07c      	beq.n	8004fd4 <HAL_GPIO_Init+0x190>
 8004eda:	4f47      	ldr	r7, [pc, #284]	; (8004ff8 <HAL_GPIO_Init+0x1b4>)
 8004edc:	42b8      	cmp	r0, r7
 8004ede:	d07e      	beq.n	8004fde <HAL_GPIO_Init+0x19a>
 8004ee0:	4f46      	ldr	r7, [pc, #280]	; (8004ffc <HAL_GPIO_Init+0x1b8>)
 8004ee2:	42b8      	cmp	r0, r7
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2705      	moveq	r7, #5
 8004ee8:	2706      	movne	r7, #6
 8004eea:	fa07 f404 	lsl.w	r4, r7, r4
 8004eee:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ef0:	60b3      	str	r3, [r6, #8]
        temp = EXTI->RTSR1;
 8004ef2:	f8db 3008 	ldr.w	r3, [fp, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ef6:	02d4      	lsls	r4, r2, #11
        temp &= ~(iocurrent);
 8004ef8:	ea6f 0609 	mvn.w	r6, r9
 8004efc:	bf54      	ite	pl
 8004efe:	4033      	andpl	r3, r6
        {
          temp |= iocurrent;
 8004f00:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004f04:	f8cb 3008 	str.w	r3, [fp, #8]

        temp = EXTI->FTSR1;
 8004f08:	f8db 400c 	ldr.w	r4, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f0c:	0293      	lsls	r3, r2, #10
        temp &= ~(iocurrent);
 8004f0e:	bf54      	ite	pl
 8004f10:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004f12:	ea49 0404 	orrmi.w	r4, r9, r4
        }
        EXTI->FTSR1 = temp;
 8004f16:	f8cb 400c 	str.w	r4, [fp, #12]

        temp = EXTI->EMR1;
 8004f1a:	f8db 4004 	ldr.w	r4, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f1e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8004f20:	bf54      	ite	pl
 8004f22:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004f24:	ea49 0404 	orrmi.w	r4, r9, r4
        }
        EXTI->EMR1 = temp;
 8004f28:	f8cb 4004 	str.w	r4, [fp, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f2c:	f8db 3000 	ldr.w	r3, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f30:	03d2      	lsls	r2, r2, #15
        temp &= ~(iocurrent);
 8004f32:	bf54      	ite	pl
 8004f34:	4033      	andpl	r3, r6
        {
          temp |= iocurrent;
 8004f36:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->IMR1 = temp;
 8004f3a:	f8cb 3000 	str.w	r3, [fp]
      }
    }

    position++;
 8004f3e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f40:	fa31 f305 	lsrs.w	r3, r1, r5
 8004f44:	d18a      	bne.n	8004e5c <HAL_GPIO_Init+0x18>
  }
}
 8004f46:	b005      	add	sp, #20
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004f4c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f4e:	ea07 0e04 	and.w	lr, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f52:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8004f56:	40b7      	lsls	r7, r6
 8004f58:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004f5c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004f5e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f62:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f66:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f6a:	40af      	lsls	r7, r5
 8004f6c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8004f70:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004f72:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f74:	ea07 0c04 	and.w	ip, r7, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f78:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8004f7c:	40b7      	lsls	r7, r6
 8004f7e:	ea47 070c 	orr.w	r7, r7, ip
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f82:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 8004f84:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f86:	f47f af7c 	bne.w	8004e82 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8004f8a:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8004f8e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f92:	f005 0c07 	and.w	ip, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8004f96:	f8de 4020 	ldr.w	r4, [lr, #32]
 8004f9a:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004fa0:	240f      	movs	r4, #15
 8004fa2:	fa04 f70c 	lsl.w	r7, r4, ip
 8004fa6:	9c01      	ldr	r4, [sp, #4]
 8004fa8:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fac:	f8d8 4010 	ldr.w	r4, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fb0:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fb2:	fa04 f70c 	lsl.w	r7, r4, ip
 8004fb6:	9c01      	ldr	r4, [sp, #4]
 8004fb8:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8004fba:	f8ce 7020 	str.w	r7, [lr, #32]
 8004fbe:	9c00      	ldr	r4, [sp, #0]
 8004fc0:	e75f      	b.n	8004e82 <HAL_GPIO_Init+0x3e>
 8004fc2:	2702      	movs	r7, #2
 8004fc4:	fa07 f404 	lsl.w	r4, r7, r4
 8004fc8:	4323      	orrs	r3, r4
 8004fca:	e791      	b.n	8004ef0 <HAL_GPIO_Init+0xac>
 8004fcc:	fa0a f404 	lsl.w	r4, sl, r4
 8004fd0:	4323      	orrs	r3, r4
 8004fd2:	e78d      	b.n	8004ef0 <HAL_GPIO_Init+0xac>
 8004fd4:	2703      	movs	r7, #3
 8004fd6:	fa07 f404 	lsl.w	r4, r7, r4
 8004fda:	4323      	orrs	r3, r4
 8004fdc:	e788      	b.n	8004ef0 <HAL_GPIO_Init+0xac>
 8004fde:	2704      	movs	r7, #4
 8004fe0:	fa07 f404 	lsl.w	r4, r7, r4
 8004fe4:	4323      	orrs	r3, r4
 8004fe6:	e783      	b.n	8004ef0 <HAL_GPIO_Init+0xac>
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	48000400 	.word	0x48000400
 8004ff0:	48000800 	.word	0x48000800
 8004ff4:	48000c00 	.word	0x48000c00
 8004ff8:	48001000 	.word	0x48001000
 8004ffc:	48001400 	.word	0x48001400
 8005000:	40010400 	.word	0x40010400

08005004 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005004:	b90a      	cbnz	r2, 800500a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005006:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005008:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800500a:	6181      	str	r1, [r0, #24]
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005010:	4a3b      	ldr	r2, [pc, #236]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8005012:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005014:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005016:	b968      	cbnz	r0, 8005034 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d014      	beq.n	800504c <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005022:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005026:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800502a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005032:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005034:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005038:	d02f      	beq.n	800509a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800503a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800503e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005042:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005044:	2000      	movs	r0, #0
}
 8005046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800504a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800504c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005050:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005052:	482d      	ldr	r0, [pc, #180]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005054:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005058:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800505c:	6811      	ldr	r1, [r2, #0]
 800505e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005062:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005066:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005068:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800506c:	2332      	movs	r3, #50	; 0x32
 800506e:	fb03 f304 	mul.w	r3, r3, r4
 8005072:	fba0 0303 	umull	r0, r3, r0, r3
 8005076:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005078:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800507a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800507e:	d506      	bpl.n	800508e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005080:	e000      	b.n	8005084 <HAL_PWREx_ControlVoltageScaling+0x74>
 8005082:	b123      	cbz	r3, 800508e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005084:	6951      	ldr	r1, [r2, #20]
 8005086:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005088:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508c:	d4f9      	bmi.n	8005082 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800508e:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	055c      	lsls	r4, r3, #21
 8005094:	d5d6      	bpl.n	8005044 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8005096:	2003      	movs	r0, #3
 8005098:	e7d5      	b.n	8005046 <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800509a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	d009      	beq.n	80050b8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 80050a8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80050b0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80050b6:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80050be:	4812      	ldr	r0, [pc, #72]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80050c4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050c8:	6811      	ldr	r1, [r2, #0]
 80050ca:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80050ce:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80050d2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050d4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050d8:	2332      	movs	r3, #50	; 0x32
 80050da:	fb03 f304 	mul.w	r3, r3, r4
 80050de:	fba0 0303 	umull	r0, r3, r0, r3
 80050e2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050e4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050e6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ea:	d5d0      	bpl.n	800508e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80050ec:	e001      	b.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0xe2>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0cd      	beq.n	800508e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80050f2:	6951      	ldr	r1, [r2, #20]
 80050f4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80050f6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050fa:	d5c8      	bpl.n	800508e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80050fc:	e7f7      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0xde>
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000
 8005104:	200004d8 	.word	0x200004d8
 8005108:	431bde83 	.word	0x431bde83

0800510c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800510c:	4a02      	ldr	r2, [pc, #8]	; (8005118 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800510e:	6893      	ldr	r3, [r2, #8]
 8005110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005114:	6093      	str	r3, [r2, #8]
}
 8005116:	4770      	bx	lr
 8005118:	40007000 	.word	0x40007000

0800511c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800511c:	2800      	cmp	r0, #0
 800511e:	f000 816c 	beq.w	80053fa <HAL_RCC_OscConfig+0x2de>
{
 8005122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005126:	6803      	ldr	r3, [r0, #0]
 8005128:	07d9      	lsls	r1, r3, #31
{
 800512a:	b082      	sub	sp, #8
 800512c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512e:	d52d      	bpl.n	800518c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005130:	49b7      	ldr	r1, [pc, #732]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 8005132:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005134:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005136:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800513a:	2a0c      	cmp	r2, #12
 800513c:	f000 80f5 	beq.w	800532a <HAL_RCC_OscConfig+0x20e>
 8005140:	2a08      	cmp	r2, #8
 8005142:	f000 80f7 	beq.w	8005334 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005146:	6863      	ldr	r3, [r4, #4]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514c:	f000 812e 	beq.w	80053ac <HAL_RCC_OscConfig+0x290>
 8005150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005154:	f000 81e0 	beq.w	8005518 <HAL_RCC_OscConfig+0x3fc>
 8005158:	4dad      	ldr	r5, [pc, #692]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 800515a:	682a      	ldr	r2, [r5, #0]
 800515c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005160:	602a      	str	r2, [r5, #0]
 8005162:	682a      	ldr	r2, [r5, #0]
 8005164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005168:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 8123 	bne.w	80053b6 <HAL_RCC_OscConfig+0x29a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fe fec2 	bl	8003ef8 <HAL_GetTick>
 8005174:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005176:	e005      	b.n	8005184 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005178:	f7fe febe 	bl	8003ef8 <HAL_GetTick>
 800517c:	1b80      	subs	r0, r0, r6
 800517e:	2864      	cmp	r0, #100	; 0x64
 8005180:	f200 8137 	bhi.w	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	039f      	lsls	r7, r3, #14
 8005188:	d4f6      	bmi.n	8005178 <HAL_RCC_OscConfig+0x5c>
 800518a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518c:	079e      	lsls	r6, r3, #30
 800518e:	f100 80a5 	bmi.w	80052dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005192:	071a      	lsls	r2, r3, #28
 8005194:	d519      	bpl.n	80051ca <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005196:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005198:	4d9d      	ldr	r5, [pc, #628]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80d7 	beq.w	800534e <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 80051a0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fe fea4 	bl	8003ef8 <HAL_GetTick>
 80051b0:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b2:	e005      	b.n	80051c0 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fe fea0 	bl	8003ef8 <HAL_GetTick>
 80051b8:	1b80      	subs	r0, r0, r6
 80051ba:	2802      	cmp	r0, #2
 80051bc:	f200 8119 	bhi.w	80053f2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80051c4:	079f      	lsls	r7, r3, #30
 80051c6:	d5f5      	bpl.n	80051b4 <HAL_RCC_OscConfig+0x98>
 80051c8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ca:	0759      	lsls	r1, r3, #29
 80051cc:	d53f      	bpl.n	800524e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051ce:	4b90      	ldr	r3, [pc, #576]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 80051d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051d2:	00d2      	lsls	r2, r2, #3
 80051d4:	f100 812b 	bmi.w	800542e <HAL_RCC_OscConfig+0x312>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051ea:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ec:	4d89      	ldr	r5, [pc, #548]	; (8005414 <HAL_RCC_OscConfig+0x2f8>)
 80051ee:	682a      	ldr	r2, [r5, #0]
 80051f0:	05d7      	lsls	r7, r2, #23
 80051f2:	f140 80ee 	bpl.w	80053d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f000 811a 	beq.w	8005432 <HAL_RCC_OscConfig+0x316>
 80051fe:	2b05      	cmp	r3, #5
 8005200:	f000 81cb 	beq.w	800559a <HAL_RCC_OscConfig+0x47e>
 8005204:	4d82      	ldr	r5, [pc, #520]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 8005206:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8005212:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 810e 	bne.w	8005440 <HAL_RCC_OscConfig+0x324>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fe fe68 	bl	8003ef8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005228:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800522c:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800522e:	e006      	b.n	800523e <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fe fe62 	bl	8003ef8 <HAL_GetTick>
 8005234:	eba0 0008 	sub.w	r0, r0, r8
 8005238:	42b8      	cmp	r0, r7
 800523a:	f200 80da 	bhi.w	80053f2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800523e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005242:	079a      	lsls	r2, r3, #30
 8005244:	d4f4      	bmi.n	8005230 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005246:	2e00      	cmp	r6, #0
 8005248:	f040 8123 	bne.w	8005492 <HAL_RCC_OscConfig+0x376>
 800524c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800524e:	069b      	lsls	r3, r3, #26
 8005250:	d518      	bpl.n	8005284 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005252:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005254:	4d6e      	ldr	r5, [pc, #440]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8107 	beq.w	800546a <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_HSI48_ENABLE();
 800525c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fe fe46 	bl	8003ef8 <HAL_GetTick>
 800526c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526e:	e005      	b.n	800527c <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005270:	f7fe fe42 	bl	8003ef8 <HAL_GetTick>
 8005274:	1b80      	subs	r0, r0, r6
 8005276:	2802      	cmp	r0, #2
 8005278:	f200 80bb 	bhi.w	80053f2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800527c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005280:	079f      	lsls	r7, r3, #30
 8005282:	d5f5      	bpl.n	8005270 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005284:	69e0      	ldr	r0, [r4, #28]
 8005286:	b328      	cbz	r0, 80052d4 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005288:	4d61      	ldr	r5, [pc, #388]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 800528a:	68aa      	ldr	r2, [r5, #8]
 800528c:	f002 020c 	and.w	r2, r2, #12
 8005290:	2a0c      	cmp	r2, #12
 8005292:	f000 814e 	beq.w	8005532 <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005296:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005298:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800529a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800529e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052a0:	f000 80fd 	beq.w	800549e <HAL_RCC_OscConfig+0x382>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052a4:	68ea      	ldr	r2, [r5, #12]
 80052a6:	f022 0203 	bic.w	r2, r2, #3
 80052aa:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052ac:	68ea      	ldr	r2, [r5, #12]
 80052ae:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 80052b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052b6:	60ea      	str	r2, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fe fe1e 	bl	8003ef8 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052bc:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80052be:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c0:	e005      	b.n	80052ce <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fe fe19 	bl	8003ef8 <HAL_GetTick>
 80052c6:	1b40      	subs	r0, r0, r5
 80052c8:	2802      	cmp	r0, #2
 80052ca:	f200 8092 	bhi.w	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	019b      	lsls	r3, r3, #6
 80052d2:	d4f6      	bmi.n	80052c2 <HAL_RCC_OscConfig+0x1a6>
      }
    }
  }
  }

  return HAL_OK;
 80052d4:	2000      	movs	r0, #0
}
 80052d6:	b002      	add	sp, #8
 80052d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052dc:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 80052de:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e0:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e2:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d045      	beq.n	8005376 <HAL_RCC_OscConfig+0x25a>
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d047      	beq.n	800537e <HAL_RCC_OscConfig+0x262>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ee:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80052f0:	4d47      	ldr	r5, [pc, #284]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8083 	beq.w	80053fe <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_HSI_ENABLE();
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005300:	f7fe fdfa 	bl	8003ef8 <HAL_GetTick>
 8005304:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005306:	e004      	b.n	8005312 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005308:	f7fe fdf6 	bl	8003ef8 <HAL_GetTick>
 800530c:	1b80      	subs	r0, r0, r6
 800530e:	2802      	cmp	r0, #2
 8005310:	d86f      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	0558      	lsls	r0, r3, #21
 8005316:	d5f7      	bpl.n	8005308 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005318:	686b      	ldr	r3, [r5, #4]
 800531a:	6922      	ldr	r2, [r4, #16]
 800531c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005320:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005324:	606b      	str	r3, [r5, #4]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	e733      	b.n	8005192 <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800532a:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800532e:	2903      	cmp	r1, #3
 8005330:	f47f af09 	bne.w	8005146 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4a36      	ldr	r2, [pc, #216]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	0392      	lsls	r2, r2, #14
 800533a:	f57f af27 	bpl.w	800518c <HAL_RCC_OscConfig+0x70>
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	2a00      	cmp	r2, #0
 8005342:	f47f af23 	bne.w	800518c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005346:	2001      	movs	r0, #1
}
 8005348:	b002      	add	sp, #8
 800534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800534e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800535a:	f7fe fdcd 	bl	8003ef8 <HAL_GetTick>
 800535e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005360:	e004      	b.n	800536c <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005362:	f7fe fdc9 	bl	8003ef8 <HAL_GetTick>
 8005366:	1b80      	subs	r0, r0, r6
 8005368:	2802      	cmp	r0, #2
 800536a:	d842      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800536c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005370:	0798      	lsls	r0, r3, #30
 8005372:	d4f6      	bmi.n	8005362 <HAL_RCC_OscConfig+0x246>
 8005374:	e728      	b.n	80051c8 <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005376:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800537a:	2a02      	cmp	r2, #2
 800537c:	d1b7      	bne.n	80052ee <HAL_RCC_OscConfig+0x1d2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537e:	4b24      	ldr	r3, [pc, #144]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	055d      	lsls	r5, r3, #21
 8005384:	d502      	bpl.n	800538c <HAL_RCC_OscConfig+0x270>
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0dc      	beq.n	8005346 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 800538e:	6920      	ldr	r0, [r4, #16]
 8005390:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005392:	4921      	ldr	r1, [pc, #132]	; (8005418 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005398:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800539c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800539e:	6808      	ldr	r0, [r1, #0]
 80053a0:	f7fe fd64 	bl	8003e6c <HAL_InitTick>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1ce      	bne.n	8005346 <HAL_RCC_OscConfig+0x22a>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	e6f2      	b.n	8005192 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053b6:	f7fe fd9f 	bl	8003ef8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ba:	4d15      	ldr	r5, [pc, #84]	; (8005410 <HAL_RCC_OscConfig+0x2f4>)
        tickstart = HAL_GetTick();
 80053bc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053be:	e004      	b.n	80053ca <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fe fd9a 	bl	8003ef8 <HAL_GetTick>
 80053c4:	1b80      	subs	r0, r0, r6
 80053c6:	2864      	cmp	r0, #100	; 0x64
 80053c8:	d813      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	039b      	lsls	r3, r3, #14
 80053ce:	d5f7      	bpl.n	80053c0 <HAL_RCC_OscConfig+0x2a4>
 80053d0:	e6db      	b.n	800518a <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d2:	682a      	ldr	r2, [r5, #0]
 80053d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d8:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80053da:	f7fe fd8d 	bl	8003ef8 <HAL_GetTick>
 80053de:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	05d8      	lsls	r0, r3, #23
 80053e4:	f53f af07 	bmi.w	80051f6 <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e8:	f7fe fd86 	bl	8003ef8 <HAL_GetTick>
 80053ec:	1bc0      	subs	r0, r0, r7
 80053ee:	2802      	cmp	r0, #2
 80053f0:	d9f6      	bls.n	80053e0 <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 80053f2:	2003      	movs	r0, #3
}
 80053f4:	b002      	add	sp, #8
 80053f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80053fa:	2001      	movs	r0, #1
}
 80053fc:	4770      	bx	lr
        __HAL_RCC_HSI_DISABLE();
 80053fe:	682b      	ldr	r3, [r5, #0]
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005406:	f7fe fd77 	bl	8003ef8 <HAL_GetTick>
 800540a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800540c:	e00b      	b.n	8005426 <HAL_RCC_OscConfig+0x30a>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	40007000 	.word	0x40007000
 8005418:	200004e0 	.word	0x200004e0
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541c:	f7fe fd6c 	bl	8003ef8 <HAL_GetTick>
 8005420:	1b80      	subs	r0, r0, r6
 8005422:	2802      	cmp	r0, #2
 8005424:	d8e5      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	0559      	lsls	r1, r3, #21
 800542a:	d4f7      	bmi.n	800541c <HAL_RCC_OscConfig+0x300>
 800542c:	e7bc      	b.n	80053a8 <HAL_RCC_OscConfig+0x28c>
    FlagStatus       pwrclkchanged = RESET;
 800542e:	2600      	movs	r6, #0
 8005430:	e6dc      	b.n	80051ec <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005432:	4a61      	ldr	r2, [pc, #388]	; (80055b8 <HAL_RCC_OscConfig+0x49c>)
 8005434:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005440:	f7fe fd5a 	bl	8003ef8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005444:	4d5c      	ldr	r5, [pc, #368]	; (80055b8 <HAL_RCC_OscConfig+0x49c>)
      tickstart = HAL_GetTick();
 8005446:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544c:	e005      	b.n	800545a <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f7fe fd53 	bl	8003ef8 <HAL_GetTick>
 8005452:	eba0 0008 	sub.w	r0, r0, r8
 8005456:	42b8      	cmp	r0, r7
 8005458:	d8cb      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800545a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800545e:	0799      	lsls	r1, r3, #30
 8005460:	d5f5      	bpl.n	800544e <HAL_RCC_OscConfig+0x332>
    if (pwrclkchanged == SET)
 8005462:	2e00      	cmp	r6, #0
 8005464:	f43f aef2 	beq.w	800524c <HAL_RCC_OscConfig+0x130>
 8005468:	e013      	b.n	8005492 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_HSI48_DISABLE();
 800546a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005476:	f7fe fd3f 	bl	8003ef8 <HAL_GetTick>
 800547a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800547c:	e004      	b.n	8005488 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800547e:	f7fe fd3b 	bl	8003ef8 <HAL_GetTick>
 8005482:	1b80      	subs	r0, r0, r6
 8005484:	2802      	cmp	r0, #2
 8005486:	d8b4      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005488:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800548c:	0798      	lsls	r0, r3, #30
 800548e:	d4f6      	bmi.n	800547e <HAL_RCC_OscConfig+0x362>
 8005490:	e6f8      	b.n	8005284 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005492:	4a49      	ldr	r2, [pc, #292]	; (80055b8 <HAL_RCC_OscConfig+0x49c>)
 8005494:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800549a:	6593      	str	r3, [r2, #88]	; 0x58
 800549c:	e6d6      	b.n	800524c <HAL_RCC_OscConfig+0x130>
        tickstart = HAL_GetTick();
 800549e:	f7fe fd2b 	bl	8003ef8 <HAL_GetTick>
 80054a2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a4:	e004      	b.n	80054b0 <HAL_RCC_OscConfig+0x394>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fe fd27 	bl	8003ef8 <HAL_GetTick>
 80054aa:	1b80      	subs	r0, r0, r6
 80054ac:	2802      	cmp	r0, #2
 80054ae:	d8a0      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	0199      	lsls	r1, r3, #6
 80054b4:	d4f7      	bmi.n	80054a6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054b6:	68e9      	ldr	r1, [r5, #12]
 80054b8:	4b40      	ldr	r3, [pc, #256]	; (80055bc <HAL_RCC_OscConfig+0x4a0>)
 80054ba:	6a22      	ldr	r2, [r4, #32]
 80054bc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80054be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054c2:	400b      	ands	r3, r1
 80054c4:	4313      	orrs	r3, r2
 80054c6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80054ca:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80054ce:	3801      	subs	r0, #1
 80054d0:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80054d4:	0849      	lsrs	r1, r1, #1
 80054d6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80054da:	3901      	subs	r1, #1
 80054dc:	0852      	lsrs	r2, r2, #1
 80054de:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80054e2:	3a01      	subs	r2, #1
 80054e4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80054e8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80054ea:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ec:	4c32      	ldr	r4, [pc, #200]	; (80055b8 <HAL_RCC_OscConfig+0x49c>)
        __HAL_RCC_PLL_ENABLE();
 80054ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f2:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054f4:	68eb      	ldr	r3, [r5, #12]
 80054f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fa:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80054fc:	f7fe fcfc 	bl	8003ef8 <HAL_GetTick>
 8005500:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005502:	e005      	b.n	8005510 <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fe fcf8 	bl	8003ef8 <HAL_GetTick>
 8005508:	1b40      	subs	r0, r0, r5
 800550a:	2802      	cmp	r0, #2
 800550c:	f63f af71 	bhi.w	80053f2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	019a      	lsls	r2, r3, #6
 8005514:	d5f6      	bpl.n	8005504 <HAL_RCC_OscConfig+0x3e8>
 8005516:	e6dd      	b.n	80052d4 <HAL_RCC_OscConfig+0x1b8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800551c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e741      	b.n	80053b6 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005532:	2801      	cmp	r0, #1
 8005534:	f43f af08 	beq.w	8005348 <HAL_RCC_OscConfig+0x22c>
      temp_pllckcfg = RCC->PLLCFGR;
 8005538:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	6a22      	ldr	r2, [r4, #32]
 800553c:	f003 0103 	and.w	r1, r3, #3
 8005540:	4291      	cmp	r1, r2
 8005542:	f47f af00 	bne.w	8005346 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005546:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800554c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005552:	f47f aef8 	bne.w	8005346 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005556:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800555c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005560:	f47f aef1 	bne.w	8005346 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005564:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005566:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800556a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800556e:	f47f aeea 	bne.w	8005346 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005572:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005574:	0852      	lsrs	r2, r2, #1
 8005576:	3a01      	subs	r2, #1
 8005578:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800557c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005580:	f47f aee1 	bne.w	8005346 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005584:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005586:	0852      	lsrs	r2, r2, #1
 8005588:	3a01      	subs	r2, #1
 800558a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800558e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8005592:	bf14      	ite	ne
 8005594:	2001      	movne	r0, #1
 8005596:	2000      	moveq	r0, #0
 8005598:	e6d6      	b.n	8005348 <HAL_RCC_OscConfig+0x22c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <HAL_RCC_OscConfig+0x49c>)
 800559c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055a0:	f042 0204 	orr.w	r2, r2, #4
 80055a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80055a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80055b4:	e744      	b.n	8005440 <HAL_RCC_OscConfig+0x324>
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	019f800c 	.word	0x019f800c

080055c0 <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f000 8105 	beq.w	80057d0 <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055c6:	4aad      	ldr	r2, [pc, #692]	; (800587c <HAL_RCC_ClockConfig+0x2bc>)
{
 80055c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055cc:	6813      	ldr	r3, [r2, #0]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	428b      	cmp	r3, r1
 80055d4:	d20c      	bcs.n	80055f0 <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	f023 030f 	bic.w	r3, r3, #15
 80055dc:	430b      	orrs	r3, r1
 80055de:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	428b      	cmp	r3, r1
 80055e8:	d002      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80055ea:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 80055ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f0:	6803      	ldr	r3, [r0, #0]
 80055f2:	07df      	lsls	r7, r3, #31
 80055f4:	4604      	mov	r4, r0
 80055f6:	460d      	mov	r5, r1
 80055f8:	f140 8088 	bpl.w	800570c <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fc:	6842      	ldr	r2, [r0, #4]
 80055fe:	2a03      	cmp	r2, #3
 8005600:	f000 80ad 	beq.w	800575e <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005604:	4b9e      	ldr	r3, [pc, #632]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005606:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005608:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560a:	f000 80ff 	beq.w	800580c <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800560e:	055b      	lsls	r3, r3, #21
 8005610:	d5eb      	bpl.n	80055ea <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005612:	4b9b      	ldr	r3, [pc, #620]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 8005614:	6899      	ldr	r1, [r3, #8]
 8005616:	f001 010c 	and.w	r1, r1, #12
 800561a:	2904      	cmp	r1, #4
 800561c:	d00a      	beq.n	8005634 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800561e:	6899      	ldr	r1, [r3, #8]
 8005620:	f001 010c 	and.w	r1, r1, #12
 8005624:	2908      	cmp	r1, #8
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	f001 010c 	and.w	r1, r1, #12
 800562e:	290c      	cmp	r1, #12
 8005630:	f000 80fb 	beq.w	800582a <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005634:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005638:	4e91      	ldr	r6, [pc, #580]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 800563a:	68b3      	ldr	r3, [r6, #8]
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	431a      	orrs	r2, r3
 8005642:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005644:	f7fe fc58 	bl	8003ef8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800564c:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e005      	b.n	800565c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fe fc52 	bl	8003ef8 <HAL_GetTick>
 8005654:	eba0 0009 	sub.w	r0, r0, r9
 8005658:	42b8      	cmp	r0, r7
 800565a:	d874      	bhi.n	8005746 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565c:	68b3      	ldr	r3, [r6, #8]
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005668:	d1f2      	bne.n	8005650 <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	079f      	lsls	r7, r3, #30
 800566e:	f140 80d3 	bpl.w	8005818 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005672:	0758      	lsls	r0, r3, #29
 8005674:	d504      	bpl.n	8005680 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005676:	4982      	ldr	r1, [pc, #520]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800567e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005680:	0719      	lsls	r1, r3, #28
 8005682:	d506      	bpl.n	8005692 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005684:	4a7e      	ldr	r2, [pc, #504]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 8005686:	6893      	ldr	r3, [r2, #8]
 8005688:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800568c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005690:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005692:	4a7b      	ldr	r2, [pc, #492]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 8005694:	68a1      	ldr	r1, [r4, #8]
 8005696:	6893      	ldr	r3, [r2, #8]
 8005698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800569c:	430b      	orrs	r3, r1
 800569e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a0:	4e76      	ldr	r6, [pc, #472]	; (800587c <HAL_RCC_ClockConfig+0x2bc>)
 80056a2:	6832      	ldr	r2, [r6, #0]
 80056a4:	f002 020f 	and.w	r2, r2, #15
 80056a8:	42aa      	cmp	r2, r5
 80056aa:	d837      	bhi.n	800571c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	075a      	lsls	r2, r3, #29
 80056b0:	d506      	bpl.n	80056c0 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b2:	4973      	ldr	r1, [pc, #460]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 80056b4:	68e0      	ldr	r0, [r4, #12]
 80056b6:	688a      	ldr	r2, [r1, #8]
 80056b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056bc:	4302      	orrs	r2, r0
 80056be:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	071b      	lsls	r3, r3, #28
 80056c2:	d443      	bmi.n	800574c <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056c4:	4a6e      	ldr	r2, [pc, #440]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 80056c6:	6893      	ldr	r3, [r2, #8]
 80056c8:	f003 030c 	and.w	r3, r3, #12
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	f000 80d3 	beq.w	8005878 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056d2:	6893      	ldr	r3, [r2, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	2b08      	cmp	r3, #8
 80056da:	f000 809b 	beq.w	8005814 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80056de:	6893      	ldr	r3, [r2, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d075      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80056e8:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056ea:	4a65      	ldr	r2, [pc, #404]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 80056ec:	4c65      	ldr	r4, [pc, #404]	; (8005884 <HAL_RCC_ClockConfig+0x2c4>)
 80056ee:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 80056f0:	4865      	ldr	r0, [pc, #404]	; (8005888 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056f2:	4966      	ldr	r1, [pc, #408]	; (800588c <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 80056f4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056f6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80056fa:	5ca2      	ldrb	r2, [r4, r2]
 80056fc:	f002 021f 	and.w	r2, r2, #31
 8005700:	40d3      	lsrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
}
 8005704:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005708:	f7fe bbb0 	b.w	8003e6c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570c:	079e      	lsls	r6, r3, #30
 800570e:	d4b0      	bmi.n	8005672 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005710:	4e5a      	ldr	r6, [pc, #360]	; (800587c <HAL_RCC_ClockConfig+0x2bc>)
 8005712:	6832      	ldr	r2, [r6, #0]
 8005714:	f002 020f 	and.w	r2, r2, #15
 8005718:	42aa      	cmp	r2, r5
 800571a:	d9c7      	bls.n	80056ac <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571c:	6832      	ldr	r2, [r6, #0]
 800571e:	f022 020f 	bic.w	r2, r2, #15
 8005722:	432a      	orrs	r2, r5
 8005724:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8005726:	f7fe fbe7 	bl	8003ef8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800572e:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	42ab      	cmp	r3, r5
 8005738:	d0b8      	beq.n	80056ac <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573a:	f7fe fbdd 	bl	8003ef8 <HAL_GetTick>
 800573e:	eba0 0008 	sub.w	r0, r0, r8
 8005742:	42b8      	cmp	r0, r7
 8005744:	d9f4      	bls.n	8005730 <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8005746:	2003      	movs	r0, #3
}
 8005748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574c:	4a4c      	ldr	r2, [pc, #304]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 800574e:	6921      	ldr	r1, [r4, #16]
 8005750:	6893      	ldr	r3, [r2, #8]
 8005752:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005756:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800575a:	6093      	str	r3, [r2, #8]
 800575c:	e7b2      	b.n	80056c4 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575e:	4948      	ldr	r1, [pc, #288]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 8005760:	6808      	ldr	r0, [r1, #0]
 8005762:	0180      	lsls	r0, r0, #6
 8005764:	f57f af41 	bpl.w	80055ea <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005768:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800576a:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 800576c:	4f48      	ldr	r7, [pc, #288]	; (8005890 <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800576e:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 8005772:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005774:	68ce      	ldr	r6, [r1, #12]
 8005776:	bf0c      	ite	eq
 8005778:	4946      	ldreq	r1, [pc, #280]	; (8005894 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800577a:	4947      	ldrne	r1, [pc, #284]	; (8005898 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800577c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005780:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005782:	fbb1 f1f0 	udiv	r1, r1, r0
 8005786:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800578a:	4e3d      	ldr	r6, [pc, #244]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800578c:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005790:	68f0      	ldr	r0, [r6, #12]
 8005792:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005796:	3001      	adds	r0, #1
 8005798:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 800579a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 800579e:	42b9      	cmp	r1, r7
 80057a0:	f67f af48 	bls.w	8005634 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057a4:	68b1      	ldr	r1, [r6, #8]
 80057a6:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80057aa:	d007      	beq.n	80057bc <HAL_RCC_ClockConfig+0x1fc>
 80057ac:	f013 0802 	ands.w	r8, r3, #2
 80057b0:	f43f af42 	beq.w	8005638 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f47f af3c 	bne.w	8005634 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057bc:	4930      	ldr	r1, [pc, #192]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 80057be:	688b      	ldr	r3, [r1, #8]
 80057c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057ca:	f04f 0880 	mov.w	r8, #128	; 0x80
 80057ce:	e733      	b.n	8005638 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 80057d0:	2001      	movs	r0, #1
}
 80057d2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057d4:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d6:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d8:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057da:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057de:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 80057e2:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057e8:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ec:	bf0c      	ite	eq
 80057ee:	4b29      	ldreq	r3, [pc, #164]	; (8005894 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057f0:	4b29      	ldrne	r3, [pc, #164]	; (8005898 <HAL_RCC_ClockConfig+0x2d8>)
 80057f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057f6:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8005802:	3201      	adds	r2, #1
 8005804:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8005806:	fbb3 f3f2 	udiv	r3, r3, r2
 800580a:	e76e      	b.n	80056ea <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800580c:	0399      	lsls	r1, r3, #14
 800580e:	f53f af00 	bmi.w	8005612 <HAL_RCC_ClockConfig+0x52>
 8005812:	e6ea      	b.n	80055ea <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <HAL_RCC_ClockConfig+0x2d4>)
 8005816:	e768      	b.n	80056ea <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8005818:	f1b8 0f00 	cmp.w	r8, #0
 800581c:	f43f af40 	beq.w	80056a0 <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005820:	68b3      	ldr	r3, [r6, #8]
 8005822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005826:	60b3      	str	r3, [r6, #8]
 8005828:	e73a      	b.n	80056a0 <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800582a:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800582c:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 800582e:	4e18      	ldr	r6, [pc, #96]	; (8005890 <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005830:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8005834:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005836:	68d8      	ldr	r0, [r3, #12]
 8005838:	bf0c      	ite	eq
 800583a:	4b16      	ldreq	r3, [pc, #88]	; (8005894 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800583c:	4b16      	ldrne	r3, [pc, #88]	; (8005898 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800583e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8005842:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005844:	fbb3 f3f1 	udiv	r3, r3, r1
 8005848:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800584c:	480c      	ldr	r0, [pc, #48]	; (8005880 <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800584e:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005852:	68c1      	ldr	r1, [r0, #12]
 8005854:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005858:	3101      	adds	r1, #1
 800585a:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 800585c:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8005860:	42b3      	cmp	r3, r6
 8005862:	f67f aee7 	bls.w	8005634 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005866:	6883      	ldr	r3, [r0, #8]
 8005868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005870:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005872:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005876:	e6df      	b.n	8005638 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <HAL_RCC_ClockConfig+0x2d8>)
 800587a:	e736      	b.n	80056ea <HAL_RCC_ClockConfig+0x12a>
 800587c:	40022000 	.word	0x40022000
 8005880:	40021000 	.word	0x40021000
 8005884:	08009590 	.word	0x08009590
 8005888:	200004e0 	.word	0x200004e0
 800588c:	200004d8 	.word	0x200004d8
 8005890:	04c4b400 	.word	0x04c4b400
 8005894:	016e3600 	.word	0x016e3600
 8005898:	00f42400 	.word	0x00f42400

0800589c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800589c:	4b18      	ldr	r3, [pc, #96]	; (8005900 <HAL_RCC_GetSysClockFreq+0x64>)
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	f002 020c 	and.w	r2, r2, #12
 80058a4:	2a04      	cmp	r2, #4
 80058a6:	d027      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	f002 020c 	and.w	r2, r2, #12
 80058ae:	2a08      	cmp	r2, #8
 80058b0:	d024      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	f002 020c 	and.w	r2, r2, #12
 80058b8:	2a0c      	cmp	r2, #12
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 80058bc:	2000      	movs	r0, #0
}
 80058be:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058c0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058c2:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058c4:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058c6:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058ca:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 80058ce:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d4:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d8:	bf0c      	ite	eq
 80058da:	480a      	ldreq	r0, [pc, #40]	; (8005904 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058dc:	480a      	ldrne	r0, [pc, #40]	; (8005908 <HAL_RCC_GetSysClockFreq+0x6c>)
 80058de:	fbb0 f0f2 	udiv	r0, r0, r2
 80058e2:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_GetSysClockFreq+0x64>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80058ee:	3301      	adds	r3, #1
 80058f0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80058f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80058f6:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80058f8:	4803      	ldr	r0, [pc, #12]	; (8005908 <HAL_RCC_GetSysClockFreq+0x6c>)
 80058fa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <HAL_RCC_GetSysClockFreq+0x68>)
 80058fe:	4770      	bx	lr
 8005900:	40021000 	.word	0x40021000
 8005904:	016e3600 	.word	0x016e3600
 8005908:	00f42400 	.word	0x00f42400

0800590c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800590c:	4b01      	ldr	r3, [pc, #4]	; (8005914 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	200004d8 	.word	0x200004d8

08005918 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_GetPCLK1Freq+0x18>)
 800591a:	4a06      	ldr	r2, [pc, #24]	; (8005934 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800591c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800591e:	4906      	ldr	r1, [pc, #24]	; (8005938 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005920:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	5cd3      	ldrb	r3, [r2, r3]
 8005928:	f003 031f 	and.w	r3, r3, #31
}
 800592c:	40d8      	lsrs	r0, r3
 800592e:	4770      	bx	lr
 8005930:	40021000 	.word	0x40021000
 8005934:	080095a0 	.word	0x080095a0
 8005938:	200004d8 	.word	0x200004d8

0800593c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x18>)
 800593e:	4a06      	ldr	r2, [pc, #24]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005940:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005942:	4906      	ldr	r1, [pc, #24]	; (800595c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005944:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005948:	6808      	ldr	r0, [r1, #0]
 800594a:	5cd3      	ldrb	r3, [r2, r3]
 800594c:	f003 031f 	and.w	r3, r3, #31
}
 8005950:	40d8      	lsrs	r0, r3
 8005952:	4770      	bx	lr
 8005954:	40021000 	.word	0x40021000
 8005958:	080095a0 	.word	0x080095a0
 800595c:	200004d8 	.word	0x200004d8

08005960 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005960:	4a02      	ldr	r2, [pc, #8]	; (800596c <HAL_RCC_EnableCSS+0xc>)
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005968:	6013      	str	r3, [r2, #0]
}
 800596a:	4770      	bx	lr
 800596c:	40021000 	.word	0x40021000

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005974:	6803      	ldr	r3, [r0, #0]
{
 8005976:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005978:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 800597c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800597e:	d057      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005980:	4b9f      	ldr	r3, [pc, #636]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005982:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005984:	00d0      	lsls	r0, r2, #3
 8005986:	f140 810d 	bpl.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    FlagStatus       pwrclkchanged = RESET;
 800598a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800598c:	4d9d      	ldr	r5, [pc, #628]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005996:	f7fe faaf 	bl	8003ef8 <HAL_GetTick>
 800599a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800599c:	e005      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fe faab 	bl	8003ef8 <HAL_GetTick>
 80059a2:	1b80      	subs	r0, r0, r6
 80059a4:	2802      	cmp	r0, #2
 80059a6:	f200 810f 	bhi.w	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059aa:	682b      	ldr	r3, [r5, #0]
 80059ac:	05d9      	lsls	r1, r3, #23
 80059ae:	d5f6      	bpl.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059b0:	4b93      	ldr	r3, [pc, #588]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80059b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80059b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059b8:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80059bc:	d028      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80059be:	428a      	cmp	r2, r1
 80059c0:	d026      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059c2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80059ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80059d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059de:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e2:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 80059e4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e8:	d512      	bpl.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ea:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 80059ec:	f7fe fa84 	bl	8003ef8 <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f0:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80059f4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f6:	e006      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f8:	f7fe fa7e 	bl	8003ef8 <HAL_GetTick>
 80059fc:	eba0 0008 	sub.w	r0, r0, r8
 8005a00:	42b0      	cmp	r0, r6
 8005a02:	f200 80e1 	bhi.w	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a06:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005a0a:	079b      	lsls	r3, r3, #30
 8005a0c:	d5f4      	bpl.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005a0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a10:	4a7b      	ldr	r2, [pc, #492]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a20:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a22:	b127      	cbz	r7, 8005a2e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a24:	4a76      	ldr	r2, [pc, #472]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2e:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a30:	07de      	lsls	r6, r3, #31
 8005a32:	d508      	bpl.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a34:	4972      	ldr	r1, [pc, #456]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a36:	6865      	ldr	r5, [r4, #4]
 8005a38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a3c:	f022 0203 	bic.w	r2, r2, #3
 8005a40:	432a      	orrs	r2, r5
 8005a42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a46:	079d      	lsls	r5, r3, #30
 8005a48:	d508      	bpl.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a4a:	496d      	ldr	r1, [pc, #436]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a4c:	68a5      	ldr	r5, [r4, #8]
 8005a4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a52:	f022 020c 	bic.w	r2, r2, #12
 8005a56:	432a      	orrs	r2, r5
 8005a58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a5c:	0759      	lsls	r1, r3, #29
 8005a5e:	d508      	bpl.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a60:	4967      	ldr	r1, [pc, #412]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a62:	68e5      	ldr	r5, [r4, #12]
 8005a64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a68:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005a6c:	432a      	orrs	r2, r5
 8005a6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a72:	071a      	lsls	r2, r3, #28
 8005a74:	d508      	bpl.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a76:	4962      	ldr	r1, [pc, #392]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a78:	6925      	ldr	r5, [r4, #16]
 8005a7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a82:	432a      	orrs	r2, r5
 8005a84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a88:	069f      	lsls	r7, r3, #26
 8005a8a:	d508      	bpl.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a8c:	495c      	ldr	r1, [pc, #368]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a8e:	6965      	ldr	r5, [r4, #20]
 8005a90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a98:	432a      	orrs	r2, r5
 8005a9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a9e:	065e      	lsls	r6, r3, #25
 8005aa0:	d508      	bpl.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aa2:	4957      	ldr	r1, [pc, #348]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005aa4:	69a5      	ldr	r5, [r4, #24]
 8005aa6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005aaa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005aae:	432a      	orrs	r2, r5
 8005ab0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab4:	061d      	lsls	r5, r3, #24
 8005ab6:	d508      	bpl.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ab8:	4951      	ldr	r1, [pc, #324]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005aba:	69e5      	ldr	r5, [r4, #28]
 8005abc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ac0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005ac4:	432a      	orrs	r2, r5
 8005ac6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aca:	05d9      	lsls	r1, r3, #23
 8005acc:	d508      	bpl.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ace:	494c      	ldr	r1, [pc, #304]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ad0:	6a25      	ldr	r5, [r4, #32]
 8005ad2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ad6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005ada:	432a      	orrs	r2, r5
 8005adc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ae0:	059a      	lsls	r2, r3, #22
 8005ae2:	d508      	bpl.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ae4:	4946      	ldr	r1, [pc, #280]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ae6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ae8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005aec:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005af0:	432a      	orrs	r2, r5
 8005af2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005af6:	055f      	lsls	r7, r3, #21
 8005af8:	d50b      	bpl.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005afa:	4941      	ldr	r1, [pc, #260]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005afc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005afe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005b02:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005b06:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b08:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b0c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b10:	d05c      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x25c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b12:	051e      	lsls	r6, r3, #20
 8005b14:	d50b      	bpl.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b16:	493a      	ldr	r1, [pc, #232]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005b18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005b1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005b1e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005b22:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b24:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b2c:	d053      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x266>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b2e:	04dd      	lsls	r5, r3, #19
 8005b30:	d50b      	bpl.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b32:	4933      	ldr	r1, [pc, #204]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005b34:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005b36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005b3a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b3e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b40:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b44:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b48:	d04a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x270>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b4a:	0499      	lsls	r1, r3, #18
 8005b4c:	d50b      	bpl.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b4e:	492c      	ldr	r1, [pc, #176]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005b50:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005b52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005b56:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005b5a:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b5c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b64:	d041      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x27a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b66:	045a      	lsls	r2, r3, #17
 8005b68:	d50b      	bpl.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b6a:	4925      	ldr	r1, [pc, #148]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005b6c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005b6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005b72:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005b76:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b78:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b7c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b80:	d038      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	d50b      	bpl.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005b88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005b8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005b92:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b94:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b9c:	d00d      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  }

#endif /* QUADSPI */

  return status;
}
 8005b9e:	b002      	add	sp, #8
 8005ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ba6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005baa:	659a      	str	r2, [r3, #88]	; 0x58
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005bb6:	2701      	movs	r7, #1
 8005bb8:	e6e8      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bba:	68d3      	ldr	r3, [r2, #12]
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	60d3      	str	r3, [r2, #12]
}
 8005bc2:	b002      	add	sp, #8
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 8005bc8:	2003      	movs	r0, #3
 8005bca:	e72a      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bcc:	68ca      	ldr	r2, [r1, #12]
 8005bce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bd2:	60ca      	str	r2, [r1, #12]
 8005bd4:	e79d      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd6:	68ca      	ldr	r2, [r1, #12]
 8005bd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bdc:	60ca      	str	r2, [r1, #12]
 8005bde:	e7a6      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be0:	68ca      	ldr	r2, [r1, #12]
 8005be2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005be6:	60ca      	str	r2, [r1, #12]
 8005be8:	e7af      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bea:	68ca      	ldr	r2, [r1, #12]
 8005bec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bf0:	60ca      	str	r2, [r1, #12]
 8005bf2:	e7b8      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf4:	68ca      	ldr	r2, [r1, #12]
 8005bf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bfa:	60ca      	str	r2, [r1, #12]
 8005bfc:	e7c1      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	40007000 	.word	0x40007000

08005c08 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	f000 8082 	beq.w	8005d12 <HAL_TIM_Base_Init+0x10a>
{
 8005c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c14:	4604      	mov	r4, r0
 8005c16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c1a:	b363      	cbz	r3, 8005c76 <HAL_TIM_Base_Init+0x6e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c1e:	4e46      	ldr	r6, [pc, #280]	; (8005d38 <HAL_TIM_Base_Init+0x130>)
 8005c20:	69a5      	ldr	r5, [r4, #24]
 8005c22:	68e0      	ldr	r0, [r4, #12]
 8005c24:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	2302      	movs	r3, #2
 8005c28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005c2e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	d071      	beq.n	8005d16 <HAL_TIM_Base_Init+0x10e>
 8005c32:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005c36:	d052      	beq.n	8005cde <HAL_TIM_Base_Init+0xd6>
 8005c38:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005c3c:	42b2      	cmp	r2, r6
 8005c3e:	d01f      	beq.n	8005c80 <HAL_TIM_Base_Init+0x78>
 8005c40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005c44:	42b2      	cmp	r2, r6
 8005c46:	d01b      	beq.n	8005c80 <HAL_TIM_Base_Init+0x78>
 8005c48:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8005c4c:	42b2      	cmp	r2, r6
 8005c4e:	d017      	beq.n	8005c80 <HAL_TIM_Base_Init+0x78>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c50:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005c54:	42b2      	cmp	r2, r6
 8005c56:	d06d      	beq.n	8005d34 <HAL_TIM_Base_Init+0x12c>
 8005c58:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005c5c:	42b2      	cmp	r2, r6
 8005c5e:	d069      	beq.n	8005d34 <HAL_TIM_Base_Init+0x12c>
 8005c60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005c64:	42b2      	cmp	r2, r6
 8005c66:	d065      	beq.n	8005d34 <HAL_TIM_Base_Init+0x12c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6c:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8005c6e:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c70:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c72:	6291      	str	r1, [r2, #40]	; 0x28
 8005c74:	e017      	b.n	8005ca6 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8005c76:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c7a:	f7fd fe49 	bl	8003910 <HAL_TIM_Base_MspInit>
 8005c7e:	e7cd      	b.n	8005c1c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005c80:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c82:	4f2e      	ldr	r7, [pc, #184]	; (8005d3c <HAL_TIM_Base_Init+0x134>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c88:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c90:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c96:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c98:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8005c9a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c9e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca0:	d12b      	bne.n	8005cfa <HAL_TIM_Base_Init+0xf2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca2:	6963      	ldr	r3, [r4, #20]
 8005ca4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8005caa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cb4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ccc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cd0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005cd4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005cde:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ce6:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cec:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005cf4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cf8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_TIM_Base_Init+0x138>)
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d0d0      	beq.n	8005ca2 <HAL_TIM_Base_Init+0x9a>
 8005d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d0cc      	beq.n	8005ca2 <HAL_TIM_Base_Init+0x9a>
 8005d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d1ca      	bne.n	8005ca6 <HAL_TIM_Base_Init+0x9e>
 8005d10:	e7c7      	b.n	8005ca2 <HAL_TIM_Base_Init+0x9a>
    return HAL_ERROR;
 8005d12:	2001      	movs	r0, #1
}
 8005d14:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005d16:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d18:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d1e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d24:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005d2c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d30:	6291      	str	r1, [r2, #40]	; 0x28
 8005d32:	e7b6      	b.n	8005ca2 <HAL_TIM_Base_Init+0x9a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d34:	6926      	ldr	r6, [r4, #16]
 8005d36:	e7f3      	b.n	8005d20 <HAL_TIM_Base_Init+0x118>
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40014000 	.word	0x40014000

08005d44 <HAL_TIM_PWM_MspInit>:
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop

08005d48 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f000 8082 	beq.w	8005e52 <HAL_TIM_PWM_Init+0x10a>
{
 8005d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d54:	4604      	mov	r4, r0
 8005d56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d5a:	b363      	cbz	r3, 8005db6 <HAL_TIM_PWM_Init+0x6e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5e:	4e46      	ldr	r6, [pc, #280]	; (8005e78 <HAL_TIM_PWM_Init+0x130>)
 8005d60:	69a5      	ldr	r5, [r4, #24]
 8005d62:	68e0      	ldr	r0, [r4, #12]
 8005d64:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005d66:	2302      	movs	r3, #2
 8005d68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d6c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005d6e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	d071      	beq.n	8005e56 <HAL_TIM_PWM_Init+0x10e>
 8005d72:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005d76:	d052      	beq.n	8005e1e <HAL_TIM_PWM_Init+0xd6>
 8005d78:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005d7c:	42b2      	cmp	r2, r6
 8005d7e:	d01f      	beq.n	8005dc0 <HAL_TIM_PWM_Init+0x78>
 8005d80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d84:	42b2      	cmp	r2, r6
 8005d86:	d01b      	beq.n	8005dc0 <HAL_TIM_PWM_Init+0x78>
 8005d88:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8005d8c:	42b2      	cmp	r2, r6
 8005d8e:	d017      	beq.n	8005dc0 <HAL_TIM_PWM_Init+0x78>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d90:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005d94:	42b2      	cmp	r2, r6
 8005d96:	d06d      	beq.n	8005e74 <HAL_TIM_PWM_Init+0x12c>
 8005d98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d9c:	42b2      	cmp	r2, r6
 8005d9e:	d069      	beq.n	8005e74 <HAL_TIM_PWM_Init+0x12c>
 8005da0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005da4:	42b2      	cmp	r2, r6
 8005da6:	d065      	beq.n	8005e74 <HAL_TIM_PWM_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dac:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005dae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005db2:	6291      	str	r1, [r2, #40]	; 0x28
 8005db4:	e017      	b.n	8005de6 <HAL_TIM_PWM_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8005db6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005dba:	f7ff ffc3 	bl	8005d44 <HAL_TIM_PWM_MspInit>
 8005dbe:	e7cd      	b.n	8005d5c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005dc0:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc2:	4f2e      	ldr	r7, [pc, #184]	; (8005e7c <HAL_TIM_PWM_Init+0x134>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005dc8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dca:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd6:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8005dda:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ddc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dde:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	d12b      	bne.n	8005e3a <HAL_TIM_PWM_Init+0xf2>
    TIMx->RCR = Structure->RepetitionCounter;
 8005de2:	6963      	ldr	r3, [r4, #20]
 8005de4:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005de6:	2301      	movs	r3, #1
 8005de8:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8005dea:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005df4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005df8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005dfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e10:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005e14:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005e1e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e20:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e26:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e32:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005e34:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e36:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e38:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e3a:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <HAL_TIM_PWM_Init+0x138>)
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d0d0      	beq.n	8005de2 <HAL_TIM_PWM_Init+0x9a>
 8005e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d0cc      	beq.n	8005de2 <HAL_TIM_PWM_Init+0x9a>
 8005e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d1ca      	bne.n	8005de6 <HAL_TIM_PWM_Init+0x9e>
 8005e50:	e7c7      	b.n	8005de2 <HAL_TIM_PWM_Init+0x9a>
    return HAL_ERROR;
 8005e52:	2001      	movs	r0, #1
}
 8005e54:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005e56:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e58:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005e5e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e64:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005e6c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e70:	6291      	str	r1, [r2, #40]	; 0x28
 8005e72:	e7b6      	b.n	8005de2 <HAL_TIM_PWM_Init+0x9a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e74:	6926      	ldr	r6, [r4, #16]
 8005e76:	e7f3      	b.n	8005e60 <HAL_TIM_PWM_Init+0x118>
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40013400 	.word	0x40013400
 8005e80:	40014000 	.word	0x40014000

08005e84 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f000 80b4 	beq.w	8005ff2 <HAL_TIM_Encoder_Init+0x16e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8005e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e96:	4604      	mov	r4, r0
 8005e98:	460d      	mov	r5, r1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d038      	beq.n	8005f10 <HAL_TIM_Encoder_Init+0x8c>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e9e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea0:	4e5e      	ldr	r6, [pc, #376]	; (800601c <HAL_TIM_Encoder_Init+0x198>)
 8005ea2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8005ea6:	68e0      	ldr	r0, [r4, #12]
 8005ea8:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8005eb6:	f022 0207 	bic.w	r2, r2, #7
 8005eba:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ebc:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005ebe:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec0:	f000 8099 	beq.w	8005ff6 <HAL_TIM_Encoder_Init+0x172>
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec8:	d078      	beq.n	8005fbc <HAL_TIM_Encoder_Init+0x138>
 8005eca:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005ece:	42b3      	cmp	r3, r6
 8005ed0:	d023      	beq.n	8005f1a <HAL_TIM_Encoder_Init+0x96>
 8005ed2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ed6:	42b3      	cmp	r3, r6
 8005ed8:	d01f      	beq.n	8005f1a <HAL_TIM_Encoder_Init+0x96>
 8005eda:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8005ede:	42b3      	cmp	r3, r6
 8005ee0:	d01b      	beq.n	8005f1a <HAL_TIM_Encoder_Init+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005ee6:	42b3      	cmp	r3, r6
 8005ee8:	f000 8095 	beq.w	8006016 <HAL_TIM_Encoder_Init+0x192>
 8005eec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ef0:	42b3      	cmp	r3, r6
 8005ef2:	f000 8090 	beq.w	8006016 <HAL_TIM_Encoder_Init+0x192>
 8005ef6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005efa:	42b3      	cmp	r3, r6
 8005efc:	f000 808b 	beq.w	8006016 <HAL_TIM_Encoder_Init+0x192>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f04:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8005f08:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f0a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f0c:	6299      	str	r1, [r3, #40]	; 0x28
 8005f0e:	e018      	b.n	8005f42 <HAL_TIM_Encoder_Init+0xbe>
    htim->Lock = HAL_UNLOCKED;
 8005f10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005f14:	f7fd fd32 	bl	800397c <HAL_TIM_Encoder_MspInit>
 8005f18:	e7c1      	b.n	8005e9e <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 |= Structure->CounterMode;
 8005f1a:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f1c:	4f40      	ldr	r7, [pc, #256]	; (8006020 <HAL_TIM_Encoder_Init+0x19c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f22:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f24:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f30:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f34:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8005f36:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f3a:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f3c:	d14d      	bne.n	8005fda <HAL_TIM_Encoder_Init+0x156>
    TIMx->RCR = Structure->RepetitionCounter;
 8005f3e:	6962      	ldr	r2, [r4, #20]
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005f42:	2601      	movs	r6, #1
 8005f44:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8005f46:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005f4a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f4c:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f4e:	69af      	ldr	r7, [r5, #24]
 8005f50:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8005f52:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f56:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f5a:	69e8      	ldr	r0, [r5, #28]
 8005f5c:	0112      	lsls	r2, r2, #4
 8005f5e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005f62:	68e8      	ldr	r0, [r5, #12]
 8005f64:	4302      	orrs	r2, r0
 8005f66:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f68:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f6c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005f70:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 8005f74:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f76:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f7a:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f7e:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f80:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f84:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f88:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f8c:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f90:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8005f92:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f96:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8005f98:	609d      	str	r5, [r3, #8]
  return HAL_OK;
 8005f9a:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 8005f9c:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8005f9e:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa0:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8005fbc:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbe:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fc4:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fca:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd0:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8005fd4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <HAL_TIM_Encoder_Init+0x1a0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d0ae      	beq.n	8005f3e <HAL_TIM_Encoder_Init+0xba>
 8005fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d0aa      	beq.n	8005f3e <HAL_TIM_Encoder_Init+0xba>
 8005fe8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d1a8      	bne.n	8005f42 <HAL_TIM_Encoder_Init+0xbe>
 8005ff0:	e7a5      	b.n	8005f3e <HAL_TIM_Encoder_Init+0xba>
    return HAL_ERROR;
 8005ff2:	2001      	movs	r0, #1
}
 8005ff4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005ff6:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ffe:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8006000:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006004:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600a:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 800600e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006010:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006012:	6299      	str	r1, [r3, #40]	; 0x28
 8006014:	e793      	b.n	8005f3e <HAL_TIM_Encoder_Init+0xba>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006016:	6926      	ldr	r6, [r4, #16]
 8006018:	e7f2      	b.n	8006000 <HAL_TIM_Encoder_Init+0x17c>
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40014000 	.word	0x40014000

08006028 <HAL_TIM_PWM_ConfigChannel>:
{
 8006028:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800602a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800602e:	2801      	cmp	r0, #1
 8006030:	f000 81d2 	beq.w	80063d8 <HAL_TIM_PWM_ConfigChannel+0x3b0>
 8006034:	2001      	movs	r0, #1
{
 8006036:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006038:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 800603c:	2a14      	cmp	r2, #20
 800603e:	f200 81c5 	bhi.w	80063cc <HAL_TIM_PWM_ConfigChannel+0x3a4>
 8006042:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006046:	005a      	.short	0x005a
 8006048:	01c301c3 	.word	0x01c301c3
 800604c:	00a501c3 	.word	0x00a501c3
 8006050:	01c301c3 	.word	0x01c301c3
 8006054:	017d01c3 	.word	0x017d01c3
 8006058:	01c301c3 	.word	0x01c301c3
 800605c:	00ee01c3 	.word	0x00ee01c3
 8006060:	01c301c3 	.word	0x01c301c3
 8006064:	013701c3 	.word	0x013701c3
 8006068:	01c301c3 	.word	0x01c301c3
 800606c:	001501c3 	.word	0x001501c3
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006070:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006072:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006076:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	4eb0      	ldr	r6, [pc, #704]	; (800633c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800607c:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8006080:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8006082:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006084:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8006086:	6d10      	ldr	r0, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006088:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800608c:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006090:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006096:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	d00f      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80060a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80060a4:	42b2      	cmp	r2, r6
 80060a6:	d00b      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80060a8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80060ac:	42b2      	cmp	r2, r6
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80060b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060b4:	42b2      	cmp	r2, r6
 80060b6:	d003      	beq.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80060b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060bc:	42b2      	cmp	r2, r6
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_ConfigChannel+0xa2>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060c0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060c2:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060c6:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ca:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80060cc:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 80060ce:	6510      	str	r0, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 80060d0:	64d6      	str	r6, [r2, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d2:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060d4:	6d10      	ldr	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060d6:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060d8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80060dc:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060de:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80060e0:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80060e4:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060e6:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80060e8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80060ec:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80060ee:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80060f6:	bcf0      	pop	{r4, r5, r6, r7}
 80060f8:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060fa:	681a      	ldr	r2, [r3, #0]
  tmpccer |= OC_Config->OCPolarity;
 80060fc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006100:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006102:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006104:	4e8d      	ldr	r6, [pc, #564]	; (800633c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006106:	f025 0501 	bic.w	r5, r5, #1
 800610a:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 800610c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800610e:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8006110:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006112:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8006116:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800611a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800611e:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8006120:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmrx |= OC_Config->OCMode;
 8006124:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006128:	d00f      	beq.n	800614a <HAL_TIM_PWM_ConfigChannel+0x122>
 800612a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800612e:	42b2      	cmp	r2, r6
 8006130:	d00b      	beq.n	800614a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006132:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006136:	42b2      	cmp	r2, r6
 8006138:	d007      	beq.n	800614a <HAL_TIM_PWM_ConfigChannel+0x122>
 800613a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800613e:	42b2      	cmp	r2, r6
 8006140:	d003      	beq.n	800614a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006142:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006146:	42b2      	cmp	r2, r6
 8006148:	d10b      	bne.n	8006162 <HAL_TIM_PWM_ConfigChannel+0x13a>
    tmpccer |= OC_Config->OCNPolarity;
 800614a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800614c:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006150:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006152:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800615a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800615c:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006160:	4335      	orrs	r5, r6
  TIMx->CCR1 = OC_Config->Pulse;
 8006162:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006164:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006166:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006168:	6356      	str	r6, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800616a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800616c:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800616e:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006170:	f040 0008 	orr.w	r0, r0, #8
 8006174:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006176:	6990      	ldr	r0, [r2, #24]
 8006178:	f020 0004 	bic.w	r0, r0, #4
 800617c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800617e:	6991      	ldr	r1, [r2, #24]
 8006180:	4321      	orrs	r1, r4
 8006182:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8006184:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006186:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800618c:	bcf0      	pop	{r4, r5, r6, r7}
 800618e:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006190:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006192:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006196:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800619a:	4e68      	ldr	r6, [pc, #416]	; (800633c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619c:	f025 0510 	bic.w	r5, r5, #16
 80061a0:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80061a2:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80061a4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80061a6:	6990      	ldr	r0, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061a8:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80061ac:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b0:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b4:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061b6:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ba:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061be:	f000 810d 	beq.w	80063dc <HAL_TIM_PWM_ConfigChannel+0x3b4>
 80061c2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80061c6:	42b2      	cmp	r2, r6
 80061c8:	f000 8108 	beq.w	80063dc <HAL_TIM_PWM_ConfigChannel+0x3b4>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061cc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80061d0:	42b2      	cmp	r2, r6
 80061d2:	d007      	beq.n	80061e4 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80061d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061d8:	42b2      	cmp	r2, r6
 80061da:	d003      	beq.n	80061e4 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 80061dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061e0:	42b2      	cmp	r2, r6
 80061e2:	d106      	bne.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1ca>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061e4:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e8:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ec:	433e      	orrs	r6, r7
 80061ee:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80061f2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061f4:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80061f6:	6190      	str	r0, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80061f8:	6396      	str	r6, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80061fa:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061fc:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fe:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006200:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006204:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006206:	6990      	ldr	r0, [r2, #24]
 8006208:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800620c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800620e:	6991      	ldr	r1, [r2, #24]
 8006210:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8006214:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8006216:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006218:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800621e:	bcf0      	pop	{r4, r5, r6, r7}
 8006220:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006222:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006224:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006228:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800622a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800622c:	4e43      	ldr	r6, [pc, #268]	; (800633c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800622e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8006232:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8006234:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006236:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8006238:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800623a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800623e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006242:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006246:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006248:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006250:	f000 80d4 	beq.w	80063fc <HAL_TIM_PWM_ConfigChannel+0x3d4>
 8006254:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006258:	42b2      	cmp	r2, r6
 800625a:	f000 80cf 	beq.w	80063fc <HAL_TIM_PWM_ConfigChannel+0x3d4>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006262:	42b2      	cmp	r2, r6
 8006264:	d007      	beq.n	8006276 <HAL_TIM_PWM_ConfigChannel+0x24e>
 8006266:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800626a:	42b2      	cmp	r2, r6
 800626c:	d003      	beq.n	8006276 <HAL_TIM_PWM_ConfigChannel+0x24e>
 800626e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006272:	42b2      	cmp	r2, r6
 8006274:	d106      	bne.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x25c>
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006276:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800627a:	f425 4540 	bic.w	r5, r5, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800627e:	433e      	orrs	r6, r7
 8006280:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8006284:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006286:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006288:	61d0      	str	r0, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800628a:	6416      	str	r6, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800628c:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628e:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006290:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006292:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006296:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006298:	69d0      	ldr	r0, [r2, #28]
 800629a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800629e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062a0:	69d1      	ldr	r1, [r2, #28]
 80062a2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80062a6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80062a8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80062b0:	bcf0      	pop	{r4, r5, r6, r7}
 80062b2:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062b4:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062b6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062ba:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80062bc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062be:	4e1f      	ldr	r6, [pc, #124]	; (800633c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062c0:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80062c4:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80062c6:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80062c8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80062ca:	6d10      	ldr	r0, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062cc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80062d0:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062d4:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062da:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80062de:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e2:	d00f      	beq.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80062e4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80062e8:	42b2      	cmp	r2, r6
 80062ea:	d00b      	beq.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80062ec:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80062f0:	42b2      	cmp	r2, r6
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80062f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062f8:	42b2      	cmp	r2, r6
 80062fa:	d003      	beq.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80062fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006300:	42b2      	cmp	r2, r6
 8006302:	d104      	bne.n	800630e <HAL_TIM_PWM_ConfigChannel+0x2e6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006304:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006306:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800630a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800630e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006310:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006312:	6510      	str	r0, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006314:	6496      	str	r6, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006316:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006318:	6d10      	ldr	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800631a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800631c:	f040 0008 	orr.w	r0, r0, #8
 8006320:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006322:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8006324:	f020 0004 	bic.w	r0, r0, #4
 8006328:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800632a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800632c:	4321      	orrs	r1, r4
 800632e:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006330:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006338:	bcf0      	pop	{r4, r5, r6, r7}
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006340:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006342:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006346:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006348:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800634a:	4e30      	ldr	r6, [pc, #192]	; (800640c <HAL_TIM_PWM_ConfigChannel+0x3e4>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800634c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006350:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8006352:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8006354:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8006356:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006358:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800635c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006360:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006364:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006366:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800636a:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800636e:	d03d      	beq.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x3c4>
 8006370:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006374:	42b2      	cmp	r2, r6
 8006376:	d039      	beq.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x3c4>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800637c:	42b2      	cmp	r2, r6
 800637e:	d007      	beq.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x368>
 8006380:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006384:	42b2      	cmp	r2, r6
 8006386:	d003      	beq.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x368>
 8006388:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800638c:	42b2      	cmp	r2, r6
 800638e:	d106      	bne.n	800639e <HAL_TIM_PWM_ConfigChannel+0x376>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006390:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006394:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006398:	433e      	orrs	r6, r7
 800639a:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800639e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80063a0:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80063a2:	61d0      	str	r0, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80063a4:	63d6      	str	r6, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80063a6:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063a8:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063aa:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ac:	f040 0008 	orr.w	r0, r0, #8
 80063b0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063b2:	69d0      	ldr	r0, [r2, #28]
 80063b4:	f020 0004 	bic.w	r0, r0, #4
 80063b8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ba:	69d1      	ldr	r1, [r2, #28]
 80063bc:	4321      	orrs	r1, r4
 80063be:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80063c0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063c8:	bcf0      	pop	{r4, r5, r6, r7}
 80063ca:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 80063cc:	2200      	movs	r2, #0
      status = HAL_ERROR;
 80063ce:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063d4:	bcf0      	pop	{r4, r5, r6, r7}
 80063d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80063d8:	2002      	movs	r0, #2
}
 80063da:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063dc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80063de:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e2:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e6:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80063ea:	e6fb      	b.n	80061e4 <HAL_TIM_PWM_ConfigChannel+0x1bc>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ec:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ee:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80063f6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80063fa:	e7c9      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x368>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063fc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80063fe:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006402:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006406:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800640a:	e734      	b.n	8006276 <HAL_TIM_PWM_ConfigChannel+0x24e>
 800640c:	40012c00 	.word	0x40012c00

08006410 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006410:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d054      	beq.n	80064c2 <HAL_TIM_SlaveConfigSynchro+0xb2>
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006418:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800641a:	2302      	movs	r3, #2
{
 800641c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800641e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006422:	6893      	ldr	r3, [r2, #8]
 8006424:	4604      	mov	r4, r0
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006426:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 800642a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006432:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006438:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800643c:	432b      	orrs	r3, r5
  __HAL_LOCK(htim);
 800643e:	2601      	movs	r6, #1

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006440:	2860      	cmp	r0, #96	; 0x60
  __HAL_LOCK(htim);
 8006442:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8006446:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8006448:	d061      	beq.n	800650e <HAL_TIM_SlaveConfigSynchro+0xfe>
 800644a:	d828      	bhi.n	800649e <HAL_TIM_SlaveConfigSynchro+0x8e>
 800644c:	2820      	cmp	r0, #32
 800644e:	d015      	beq.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 8006450:	d970      	bls.n	8006534 <HAL_TIM_SlaveConfigSynchro+0x124>
 8006452:	2840      	cmp	r0, #64	; 0x40
 8006454:	d037      	beq.n	80064c6 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8006456:	2850      	cmp	r0, #80	; 0x50
 8006458:	d171      	bne.n	800653e <HAL_TIM_SlaveConfigSynchro+0x12e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800645a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645c:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	6888      	ldr	r0, [r1, #8]
 8006460:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006462:	f026 0601 	bic.w	r6, r6, #1
 8006466:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006468:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006472:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006474:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006478:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800647a:	6211      	str	r1, [r2, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800647c:	68d3      	ldr	r3, [r2, #12]
 800647e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006482:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006484:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006486:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8006488:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800648a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800648e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006490:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8006492:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006496:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 800649a:	bcf0      	pop	{r4, r5, r6, r7}
 800649c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <HAL_TIM_SlaveConfigSynchro+0x13c>)
 80064a0:	4298      	cmp	r0, r3
 80064a2:	d0eb      	beq.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 80064a4:	d822      	bhi.n	80064ec <HAL_TIM_SlaveConfigSynchro+0xdc>
 80064a6:	2870      	cmp	r0, #112	; 0x70
 80064a8:	d14c      	bne.n	8006544 <HAL_TIM_SlaveConfigSynchro+0x134>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064aa:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80064ae:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80064b0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b2:	432b      	orrs	r3, r5
 80064b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064bc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064be:	6093      	str	r3, [r2, #8]
 80064c0:	e7dc      	b.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
  __HAL_LOCK(htim);
 80064c2:	2002      	movs	r0, #2
}
 80064c4:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80064c6:	2d05      	cmp	r5, #5
 80064c8:	d019      	beq.n	80064fe <HAL_TIM_SlaveConfigSynchro+0xee>
 80064ca:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 80064ce:	d016      	beq.n	80064fe <HAL_TIM_SlaveConfigSynchro+0xee>
      tmpccer = htim->Instance->CCER;
 80064d0:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80064d2:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064d4:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80064d6:	f020 0001 	bic.w	r0, r0, #1
 80064da:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80064dc:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064e2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80064e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80064e8:	6215      	str	r5, [r2, #32]
 80064ea:	e7c7      	b.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
  switch (sSlaveConfig->InputTrigger)
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <HAL_TIM_SlaveConfigSynchro+0x140>)
 80064ee:	4298      	cmp	r0, r3
 80064f0:	d0c4      	beq.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 80064f2:	3330      	adds	r3, #48	; 0x30
 80064f4:	4298      	cmp	r0, r3
 80064f6:	d0c1      	beq.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 80064f8:	3b40      	subs	r3, #64	; 0x40
 80064fa:	4298      	cmp	r0, r3
 80064fc:	d0be      	beq.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
    htim->State = HAL_TIM_STATE_READY;
 80064fe:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006500:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006502:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006506:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800650a:	bcf0      	pop	{r4, r5, r6, r7}
 800650c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650e:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006510:	688d      	ldr	r5, [r1, #8]
 8006512:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006514:	f020 0010 	bic.w	r0, r0, #16
 8006518:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651a:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 800651c:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006526:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800652a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800652e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006530:	6213      	str	r3, [r2, #32]
 8006532:	e7a3      	b.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
  switch (sSlaveConfig->InputTrigger)
 8006534:	2800      	cmp	r0, #0
 8006536:	d0a1      	beq.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 8006538:	2810      	cmp	r0, #16
 800653a:	d1e0      	bne.n	80064fe <HAL_TIM_SlaveConfigSynchro+0xee>
 800653c:	e79e      	b.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 800653e:	2830      	cmp	r0, #48	; 0x30
 8006540:	d1dd      	bne.n	80064fe <HAL_TIM_SlaveConfigSynchro+0xee>
 8006542:	e79b      	b.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 8006544:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 8006548:	d1d9      	bne.n	80064fe <HAL_TIM_SlaveConfigSynchro+0xee>
 800654a:	e797      	b.n	800647c <HAL_TIM_SlaveConfigSynchro+0x6c>
 800654c:	00100020 	.word	0x00100020
 8006550:	00100040 	.word	0x00100040

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006554:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d049      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
{
 800655c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800655e:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 8006560:	6805      	ldr	r5, [r0, #0]
 8006562:	680f      	ldr	r7, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	2302      	movs	r3, #2
 8006566:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800656a:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800656c:	4295      	cmp	r5, r2
  tmpcr2 = htim->Instance->CR2;
 800656e:	686b      	ldr	r3, [r5, #4]
  __HAL_LOCK(htim);
 8006570:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006574:	68ae      	ldr	r6, [r5, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006576:	d025      	beq.n	80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657c:	4295      	cmp	r5, r2
 800657e:	d02c      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0x86>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006580:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006588:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800658e:	606b      	str	r3, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006590:	d00a      	beq.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006592:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006594:	429d      	cmp	r5, r3
 8006596:	d007      	beq.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659c:	429d      	cmp	r5, r3
 800659e:	d003      	beq.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80065a0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80065a4:	429d      	cmp	r5, r3
 80065a6:	d104      	bne.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a8:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065aa:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ae:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b0:	60ae      	str	r6, [r5, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80065b2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	2201      	movs	r2, #1
 80065b6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80065ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80065be:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80065c0:	4618      	mov	r0, r3
}
 80065c2:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065c4:	684c      	ldr	r4, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ca:	4322      	orrs	r2, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 80065cc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80065d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d4:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 80065d6:	606a      	str	r2, [r5, #4]
 80065d8:	e7e6      	b.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065da:	684a      	ldr	r2, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065dc:	f423 0470 	bic.w	r4, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065e0:	4314      	orrs	r4, r2
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80065e6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ea:	433c      	orrs	r4, r7
  htim->Instance->CR2 = tmpcr2;
 80065ec:	606c      	str	r4, [r5, #4]
 80065ee:	e7db      	b.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 80065f0:	2002      	movs	r0, #2
}
 80065f2:	4770      	bx	lr
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40000400 	.word	0x40000400

080065fc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d044      	beq.n	800668e <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8006604:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006606:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800660a:	4602      	mov	r2, r0
 800660c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006610:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006614:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800661c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006620:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006624:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800662a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800662c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006630:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006632:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006634:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800663a:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800663c:	4c15      	ldr	r4, [pc, #84]	; (8006694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800663e:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006640:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006644:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006646:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800664a:	d00a      	beq.n	8006662 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800664c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006650:	42a0      	cmp	r0, r4
 8006652:	d006      	beq.n	8006662 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006654:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006656:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8006658:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800665a:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 800665c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8006660:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006662:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006664:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800666a:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800666c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006670:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006674:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800667c:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800667e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006682:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006684:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006686:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800668a:	430b      	orrs	r3, r1
 800668c:	e7e2      	b.n	8006654 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800668e:	2002      	movs	r0, #2
}
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00

08006698 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006698:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d053      	beq.n	8006748 <HAL_TIMEx_ConfigBreakInput+0xb0>
 80066a0:	6813      	ldr	r3, [r2, #0]
 80066a2:	3b01      	subs	r3, #1
{
 80066a4:	b4f0      	push	{r4, r5, r6, r7}
 80066a6:	2b0f      	cmp	r3, #15
  __HAL_LOCK(htim);
 80066a8:	f04f 0401 	mov.w	r4, #1
 80066ac:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
 80066b0:	d91e      	bls.n	80066f0 <HAL_TIMEx_ConfigBreakInput+0x58>

  switch (sBreakInputConfig->Source)
 80066b2:	2500      	movs	r5, #0
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80066b4:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80066b6:	462f      	mov	r7, r5
 80066b8:	462c      	mov	r4, r5
 80066ba:	462e      	mov	r6, r5
  switch (BreakInput)
 80066bc:	d026      	beq.n	800670c <HAL_TIMEx_ConfigBreakInput+0x74>
 80066be:	2902      	cmp	r1, #2
 80066c0:	d13b      	bne.n	800673a <HAL_TIMEx_ConfigBreakInput+0xa2>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80066c2:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80066c4:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 80066c6:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80066ca:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80066cc:	40bb      	lsls	r3, r7
 80066ce:	ea83 030c 	eor.w	r3, r3, ip
 80066d2:	4033      	ands	r3, r6
 80066d4:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80066d8:	40aa      	lsls	r2, r5
 80066da:	405a      	eors	r2, r3
 80066dc:	4022      	ands	r2, r4
 80066de:	4053      	eors	r3, r2

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80066e0:	664b      	str	r3, [r1, #100]	; 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80066e2:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80066e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return status;
}
 80066ea:	bcf0      	pop	{r4, r5, r6, r7}
 80066ec:	4618      	mov	r0, r3
 80066ee:	4770      	bx	lr
 80066f0:	4e17      	ldr	r6, [pc, #92]	; (8006750 <HAL_TIMEx_ConfigBreakInput+0xb8>)
 80066f2:	4c18      	ldr	r4, [pc, #96]	; (8006754 <HAL_TIMEx_ConfigBreakInput+0xbc>)
 80066f4:	4f18      	ldr	r7, [pc, #96]	; (8006758 <HAL_TIMEx_ConfigBreakInput+0xc0>)
 80066f6:	4d19      	ldr	r5, [pc, #100]	; (800675c <HAL_TIMEx_ConfigBreakInput+0xc4>)
 80066f8:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 80066fc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8006700:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8006704:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  switch (BreakInput)
 8006708:	2901      	cmp	r1, #1
 800670a:	d1d8      	bne.n	80066be <HAL_TIMEx_ConfigBreakInput+0x26>
      tmporx = htim->Instance->AF1;
 800670c:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800670e:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006710:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006714:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006716:	40bb      	lsls	r3, r7
 8006718:	ea83 030c 	eor.w	r3, r3, ip
 800671c:	4033      	ands	r3, r6
 800671e:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006722:	40aa      	lsls	r2, r5
 8006724:	405a      	eors	r2, r3
 8006726:	4022      	ands	r2, r4
 8006728:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 800672a:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800672c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800672e:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8006734:	bcf0      	pop	{r4, r5, r6, r7}
 8006736:	4618      	mov	r0, r3
 8006738:	4770      	bx	lr
      status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800673c:	2200      	movs	r2, #0
 800673e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8006742:	bcf0      	pop	{r4, r5, r6, r7}
 8006744:	4618      	mov	r0, r3
 8006746:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006748:	2302      	movs	r3, #2
}
 800674a:	4618      	mov	r0, r3
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	080095a8 	.word	0x080095a8
 8006754:	080095e8 	.word	0x080095e8
 8006758:	08009628 	.word	0x08009628
 800675c:	08009668 	.word	0x08009668

08006760 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006760:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006762:	07da      	lsls	r2, r3, #31
{
 8006764:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006766:	d506      	bpl.n	8006776 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800676c:	684a      	ldr	r2, [r1, #4]
 800676e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006772:	4322      	orrs	r2, r4
 8006774:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006776:	079c      	lsls	r4, r3, #30
 8006778:	d506      	bpl.n	8006788 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800677a:	6801      	ldr	r1, [r0, #0]
 800677c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800677e:	684a      	ldr	r2, [r1, #4]
 8006780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006784:	4322      	orrs	r2, r4
 8006786:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006788:	0759      	lsls	r1, r3, #29
 800678a:	d506      	bpl.n	800679a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800678c:	6801      	ldr	r1, [r0, #0]
 800678e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006790:	684a      	ldr	r2, [r1, #4]
 8006792:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006796:	4322      	orrs	r2, r4
 8006798:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800679a:	071a      	lsls	r2, r3, #28
 800679c:	d506      	bpl.n	80067ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800679e:	6801      	ldr	r1, [r0, #0]
 80067a0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80067a2:	684a      	ldr	r2, [r1, #4]
 80067a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067a8:	4322      	orrs	r2, r4
 80067aa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ac:	06dc      	lsls	r4, r3, #27
 80067ae:	d506      	bpl.n	80067be <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b0:	6801      	ldr	r1, [r0, #0]
 80067b2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80067b4:	688a      	ldr	r2, [r1, #8]
 80067b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067ba:	4322      	orrs	r2, r4
 80067bc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067be:	0699      	lsls	r1, r3, #26
 80067c0:	d506      	bpl.n	80067d0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067c2:	6801      	ldr	r1, [r0, #0]
 80067c4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80067c6:	688a      	ldr	r2, [r1, #8]
 80067c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067cc:	4322      	orrs	r2, r4
 80067ce:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d0:	065a      	lsls	r2, r3, #25
 80067d2:	d509      	bpl.n	80067e8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067d4:	6801      	ldr	r1, [r0, #0]
 80067d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80067d8:	684a      	ldr	r2, [r1, #4]
 80067da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80067de:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067e6:	d00b      	beq.n	8006800 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	d506      	bpl.n	80067fa <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ec:	6802      	ldr	r2, [r0, #0]
 80067ee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80067f0:	6853      	ldr	r3, [r2, #4]
 80067f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6053      	str	r3, [r2, #4]
  }
}
 80067fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067fe:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006800:	684a      	ldr	r2, [r1, #4]
 8006802:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006804:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006808:	4322      	orrs	r2, r4
 800680a:	604a      	str	r2, [r1, #4]
 800680c:	e7ec      	b.n	80067e8 <UART_AdvFeatureConfig+0x88>
 800680e:	bf00      	nop

08006810 <HAL_UART_Init>:
  if (huart == NULL)
 8006810:	2800      	cmp	r0, #0
 8006812:	d050      	beq.n	80068b6 <HAL_UART_Init+0xa6>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006814:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8006818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800681e:	2b00      	cmp	r3, #0
 8006820:	d044      	beq.n	80068ac <HAL_UART_Init+0x9c>
  __HAL_UART_DISABLE(huart);
 8006822:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006824:	6927      	ldr	r7, [r4, #16]
 8006826:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006828:	49c1      	ldr	r1, [pc, #772]	; (8006b30 <HAL_UART_Init+0x320>)
  huart->gState = HAL_UART_STATE_BUSY;
 800682a:	2224      	movs	r2, #36	; 0x24
 800682c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006830:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006832:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006834:	f020 0001 	bic.w	r0, r0, #1
 8006838:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800683a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800683c:	69e0      	ldr	r0, [r4, #28]
 800683e:	433a      	orrs	r2, r7
 8006840:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006842:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006844:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800684e:	4eb9      	ldr	r6, [pc, #740]	; (8006b34 <HAL_UART_Init+0x324>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006850:	69a7      	ldr	r7, [r4, #24]
 8006852:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006854:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006858:	430a      	orrs	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800685c:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800685e:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006860:	d02b      	beq.n	80068ba <HAL_UART_Init+0xaa>
    tmpreg |= huart->Init.OneBitSampling;
 8006862:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006864:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006868:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800686c:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006874:	f506 4638 	add.w	r6, r6, #47104	; 0xb800
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006878:	f022 020f 	bic.w	r2, r2, #15
 800687c:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800687e:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006880:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006882:	d03a      	beq.n	80068fa <HAL_UART_Init+0xea>
 8006884:	4aac      	ldr	r2, [pc, #688]	; (8006b38 <HAL_UART_Init+0x328>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d05a      	beq.n	8006940 <HAL_UART_Init+0x130>
 800688a:	4aac      	ldr	r2, [pc, #688]	; (8006b3c <HAL_UART_Init+0x32c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	f000 816c 	beq.w	8006b6a <HAL_UART_Init+0x35a>
 8006892:	4aab      	ldr	r2, [pc, #684]	; (8006b40 <HAL_UART_Init+0x330>)
 8006894:	4293      	cmp	r3, r2
 8006896:	f000 810b 	beq.w	8006ab0 <HAL_UART_Init+0x2a0>
  huart->NbRxDataToProcess = 1;
 800689a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800689e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80068a0:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80068a2:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 80068a6:	2001      	movs	r0, #1
}
 80068a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    huart->Lock = HAL_UNLOCKED;
 80068ac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80068b0:	f7fd f8d8 	bl	8003a64 <HAL_UART_MspInit>
 80068b4:	e7b5      	b.n	8006822 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 80068b6:	2001      	movs	r0, #1
}
 80068b8:	4770      	bx	lr
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ba:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80068be:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80068c2:	4339      	orrs	r1, r7
 80068c4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068c8:	489e      	ldr	r0, [pc, #632]	; (8006b44 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068ca:	f022 020f 	bic.w	r2, r2, #15
 80068ce:	432a      	orrs	r2, r5
 80068d0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068d2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80068d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068de:	f000 81a7 	beq.w	8006c30 <HAL_UART_Init+0x420>
 80068e2:	f240 816d 	bls.w	8006bc0 <HAL_UART_Init+0x3b0>
 80068e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ea:	f000 81d5 	beq.w	8006c98 <HAL_UART_Init+0x488>
 80068ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f2:	d1d2      	bne.n	800689a <HAL_UART_Init+0x8a>
        pclk = (uint32_t) LSE_VALUE;
 80068f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80068f8:	e16a      	b.n	8006bd0 <HAL_UART_Init+0x3c0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068fa:	4b92      	ldr	r3, [pc, #584]	; (8006b44 <HAL_UART_Init+0x334>)
 80068fc:	4a92      	ldr	r2, [pc, #584]	; (8006b48 <HAL_UART_Init+0x338>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006908:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800690c:	f000 8140 	beq.w	8006b90 <HAL_UART_Init+0x380>
    switch (clocksource)
 8006910:	2b08      	cmp	r3, #8
 8006912:	d8c2      	bhi.n	800689a <HAL_UART_Init+0x8a>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_UART_Init+0x10c>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006aab 	.word	0x08006aab
 8006920:	08006951 	.word	0x08006951
 8006924:	08006c3d 	.word	0x08006c3d
 8006928:	0800689b 	.word	0x0800689b
 800692c:	08006aa5 	.word	0x08006aa5
 8006930:	0800689b 	.word	0x0800689b
 8006934:	0800689b 	.word	0x0800689b
 8006938:	0800689b 	.word	0x0800689b
 800693c:	08006b8b 	.word	0x08006b8b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006940:	4b80      	ldr	r3, [pc, #512]	; (8006b44 <HAL_UART_Init+0x334>)
 8006942:	4a82      	ldr	r2, [pc, #520]	; (8006b4c <HAL_UART_Init+0x33c>)
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006948:	f003 030c 	and.w	r3, r3, #12
 800694c:	5cd3      	ldrb	r3, [r2, r3]
 800694e:	e7db      	b.n	8006908 <HAL_UART_Init+0xf8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7fe fff4 	bl	800593c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006954:	2800      	cmp	r0, #0
 8006956:	f000 8101 	beq.w	8006b5c <HAL_UART_Init+0x34c>
 800695a:	6a65      	ldr	r5, [r4, #36]	; 0x24
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	4a7c      	ldr	r2, [pc, #496]	; (8006b50 <HAL_UART_Init+0x340>)
 8006960:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8006964:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006968:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006970:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006974:	f1a0 0310 	sub.w	r3, r0, #16
 8006978:	4293      	cmp	r3, r2
 800697a:	d88e      	bhi.n	800689a <HAL_UART_Init+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800697c:	6821      	ldr	r1, [r4, #0]
  huart->RxISR = NULL;
 800697e:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006980:	60c8      	str	r0, [r1, #12]
  huart->TxISR = NULL;
 8006982:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006986:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800698a:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800698c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80e0 	bne.w	8006b54 <HAL_UART_Init+0x344>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800699c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80069a6:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b4:	f7fd faa0 	bl	8003ef8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	0716      	lsls	r6, r2, #28
  tickstart = HAL_GetTick();
 80069be:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069c0:	d40e      	bmi.n	80069e0 <HAL_UART_Init+0x1d0>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	0756      	lsls	r6, r2, #29
 80069c6:	d43f      	bmi.n	8006a48 <HAL_UART_Init+0x238>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80069d0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80069d4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

  return HAL_OK;
 80069d8:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e0:	69da      	ldr	r2, [r3, #28]
 80069e2:	0297      	lsls	r7, r2, #10
 80069e4:	d4ed      	bmi.n	80069c2 <HAL_UART_Init+0x1b2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fd fa87 	bl	8003ef8 <HAL_GetTick>
 80069ea:	1b40      	subs	r0, r0, r5
 80069ec:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80069f0:	f080 8134 	bcs.w	8006c5c <HAL_UART_Init+0x44c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	6819      	ldr	r1, [r3, #0]
 80069f8:	0748      	lsls	r0, r1, #29
 80069fa:	461a      	mov	r2, r3
 80069fc:	d5f0      	bpl.n	80069e0 <HAL_UART_Init+0x1d0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069fe:	69d9      	ldr	r1, [r3, #28]
 8006a00:	0509      	lsls	r1, r1, #20
 8006a02:	d5ed      	bpl.n	80069e0 <HAL_UART_Init+0x1d0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a08:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	e852 3f00 	ldrex	r3, [r2]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	e842 3100 	strex	r1, r3, [r2]
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d1f7      	bne.n	8006a0a <HAL_UART_Init+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	f102 0308 	add.w	r3, r2, #8
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	f102 0008 	add.w	r0, r2, #8
 8006a2a:	e840 3100 	strex	r1, r3, [r0]
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	d1f3      	bne.n	8006a1a <HAL_UART_Init+0x20a>

          huart->gState = HAL_UART_STATE_READY;
 8006a32:	2320      	movs	r3, #32
 8006a34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a38:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8006a40:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a42:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006a46:	e7c9      	b.n	80069dc <HAL_UART_Init+0x1cc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	025b      	lsls	r3, r3, #9
 8006a4c:	d4bc      	bmi.n	80069c8 <HAL_UART_Init+0x1b8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fd fa53 	bl	8003ef8 <HAL_GetTick>
 8006a52:	1b40      	subs	r0, r0, r5
 8006a54:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8006a58:	f080 8120 	bcs.w	8006c9c <HAL_UART_Init+0x48c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	0748      	lsls	r0, r1, #29
 8006a62:	461a      	mov	r2, r3
 8006a64:	d5f0      	bpl.n	8006a48 <HAL_UART_Init+0x238>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	0509      	lsls	r1, r1, #20
 8006a6a:	d5ed      	bpl.n	8006a48 <HAL_UART_Init+0x238>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a70:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	e842 3100 	strex	r1, r3, [r2]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d1f7      	bne.n	8006a72 <HAL_UART_Init+0x262>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	f102 0308 	add.w	r3, r2, #8
 8006a86:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	f102 0008 	add.w	r0, r2, #8
 8006a92:	e840 3100 	strex	r1, r3, [r0]
 8006a96:	2900      	cmp	r1, #0
 8006a98:	d1f3      	bne.n	8006a82 <HAL_UART_Init+0x272>
 8006a9a:	e7ca      	b.n	8006a32 <HAL_UART_Init+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006aa0:	f000 80d4 	beq.w	8006c4c <HAL_UART_Init+0x43c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa4:	f7fe fefa 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8006aa8:	e754      	b.n	8006954 <HAL_UART_Init+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aaa:	f7fe ff35 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8006aae:	e751      	b.n	8006954 <HAL_UART_Init+0x144>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab0:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <HAL_UART_Init+0x334>)
 8006ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d0ee      	beq.n	8006a9c <HAL_UART_Init+0x28c>
 8006abe:	d92c      	bls.n	8006b1a <HAL_UART_Init+0x30a>
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	f000 80bd 	beq.w	8006c40 <HAL_UART_Init+0x430>
 8006ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac8:	f47f aee7 	bne.w	800689a <HAL_UART_Init+0x8a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006acc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) LSE_VALUE;
 8006ad0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad4:	f47f af42 	bne.w	800695c <HAL_UART_Init+0x14c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad8:	6862      	ldr	r2, [r4, #4]
 8006ada:	491d      	ldr	r1, [pc, #116]	; (8006b50 <HAL_UART_Init+0x340>)
 8006adc:	0853      	lsrs	r3, r2, #1
 8006ade:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8006ae2:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006aee:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af2:	f1a3 0210 	sub.w	r2, r3, #16
 8006af6:	428a      	cmp	r2, r1
 8006af8:	f63f aecf 	bhi.w	800689a <HAL_UART_Init+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afc:	f023 020f 	bic.w	r2, r3, #15
 8006b00:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b02:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	4313      	orrs	r3, r2
  huart->NbRxDataToProcess = 1;
 8006b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 8006b0e:	2200      	movs	r2, #0
        huart->Instance->BRR = brrtemp;
 8006b10:	60c3      	str	r3, [r0, #12]
  huart->NbRxDataToProcess = 1;
 8006b12:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006b14:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
 8006b18:	e738      	b.n	800698c <HAL_UART_Init+0x17c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f47f aebd 	bne.w	800689a <HAL_UART_Init+0x8a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006b24:	d1c1      	bne.n	8006aaa <HAL_UART_Init+0x29a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b26:	f7fe fef7 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b2a:	b1b8      	cbz	r0, 8006b5c <HAL_UART_Init+0x34c>
 8006b2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b2e:	e7d3      	b.n	8006ad8 <HAL_UART_Init+0x2c8>
 8006b30:	cfff69f3 	.word	0xcfff69f3
 8006b34:	40008000 	.word	0x40008000
 8006b38:	40004400 	.word	0x40004400
 8006b3c:	40004800 	.word	0x40004800
 8006b40:	40004c00 	.word	0x40004c00
 8006b44:	40021000 	.word	0x40021000
 8006b48:	080096a8 	.word	0x080096a8
 8006b4c:	080096ac 	.word	0x080096ac
 8006b50:	080096bc 	.word	0x080096bc
    UART_AdvFeatureConfig(huart);
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff fe03 	bl	8006760 <UART_AdvFeatureConfig>
 8006b5a:	e71b      	b.n	8006994 <HAL_UART_Init+0x184>
  huart->NbRxDataToProcess = 1;
 8006b5c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006b60:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006b62:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006b64:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
 8006b68:	e710      	b.n	800698c <HAL_UART_Init+0x17c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b6a:	4b57      	ldr	r3, [pc, #348]	; (8006cc8 <HAL_UART_Init+0x4b8>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d091      	beq.n	8006a9c <HAL_UART_Init+0x28c>
 8006b78:	d9cf      	bls.n	8006b1a <HAL_UART_Init+0x30a>
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d060      	beq.n	8006c40 <HAL_UART_Init+0x430>
 8006b7e:	2b30      	cmp	r3, #48	; 0x30
 8006b80:	f47f ae8b 	bne.w	800689a <HAL_UART_Init+0x8a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006b88:	d0a6      	beq.n	8006ad8 <HAL_UART_Init+0x2c8>
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b8e:	e6e5      	b.n	800695c <HAL_UART_Init+0x14c>
    switch (clocksource)
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	f63f ae82 	bhi.w	800689a <HAL_UART_Init+0x8a>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <HAL_UART_Init+0x38c>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006b27 	.word	0x08006b27
 8006ba0:	08006c37 	.word	0x08006c37
 8006ba4:	08006c53 	.word	0x08006c53
 8006ba8:	0800689b 	.word	0x0800689b
 8006bac:	08006c4d 	.word	0x08006c4d
 8006bb0:	0800689b 	.word	0x0800689b
 8006bb4:	0800689b 	.word	0x0800689b
 8006bb8:	0800689b 	.word	0x0800689b
 8006bbc:	08006c57 	.word	0x08006c57
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f ae6a 	bne.w	800689a <HAL_UART_Init+0x8a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc6:	f7fe fea7 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0c6      	beq.n	8006b5c <HAL_UART_Init+0x34c>
 8006bce:	6a65      	ldr	r5, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bd0:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bd2:	4b3e      	ldr	r3, [pc, #248]	; (8006ccc <HAL_UART_Init+0x4bc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bd4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bd8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006bdc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006be0:	428b      	cmp	r3, r1
 8006be2:	f4ff ae5a 	bcc.w	800689a <HAL_UART_Init+0x8a>
 8006be6:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006bea:	f63f ae56 	bhi.w	800689a <HAL_UART_Init+0x8a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bee:	2500      	movs	r5, #0
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 fb10 	bl	8000218 <__aeabi_uldivmod>
 8006bf8:	020b      	lsls	r3, r1, #8
 8006bfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bfe:	0202      	lsls	r2, r0, #8
 8006c00:	0870      	lsrs	r0, r6, #1
 8006c02:	1817      	adds	r7, r2, r0
 8006c04:	f143 0800 	adc.w	r8, r3, #0
 8006c08:	4632      	mov	r2, r6
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	4641      	mov	r1, r8
 8006c10:	f7f9 fb02 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c14:	4b2e      	ldr	r3, [pc, #184]	; (8006cd0 <HAL_UART_Init+0x4c0>)
 8006c16:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f63f ae3d 	bhi.w	800689a <HAL_UART_Init+0x8a>
          huart->Instance->BRR = usartdiv;
 8006c20:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8006c22:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8006c26:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8006c28:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006c2c:	66a3      	str	r3, [r4, #104]	; 0x68
 8006c2e:	e6ad      	b.n	800698c <HAL_UART_Init+0x17c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006c30:	f7fe fe34 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8006c34:	e7c9      	b.n	8006bca <HAL_UART_Init+0x3ba>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c36:	f7fe fe81 	bl	800593c <HAL_RCC_GetPCLK2Freq>
 8006c3a:	e776      	b.n	8006b2a <HAL_UART_Init+0x31a>
        pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4825      	ldr	r0, [pc, #148]	; (8006cd4 <HAL_UART_Init+0x4c4>)
 8006c3e:	e68d      	b.n	800695c <HAL_UART_Init+0x14c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4823      	ldr	r0, [pc, #140]	; (8006cd4 <HAL_UART_Init+0x4c4>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	f47f ae89 	bne.w	800695c <HAL_UART_Init+0x14c>
 8006c4a:	e745      	b.n	8006ad8 <HAL_UART_Init+0x2c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4c:	f7fe fe26 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8006c50:	e76b      	b.n	8006b2a <HAL_UART_Init+0x31a>
        pclk = (uint32_t) HSI_VALUE;
 8006c52:	4820      	ldr	r0, [pc, #128]	; (8006cd4 <HAL_UART_Init+0x4c4>)
 8006c54:	e740      	b.n	8006ad8 <HAL_UART_Init+0x2c8>
        pclk = (uint32_t) LSE_VALUE;
 8006c56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006c5a:	e73d      	b.n	8006ad8 <HAL_UART_Init+0x2c8>
 8006c5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	e842 3100 	strex	r1, r3, [r2]
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	d1f7      	bne.n	8006c5e <HAL_UART_Init+0x44e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	f102 0308 	add.w	r3, r2, #8
 8006c72:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	f102 0008 	add.w	r0, r2, #8
 8006c7e:	e840 3100 	strex	r1, r3, [r0]
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d1f3      	bne.n	8006c6e <HAL_UART_Init+0x45e>
        huart->gState = HAL_UART_STATE_READY;
 8006c86:	2320      	movs	r3, #32
 8006c88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8006c8c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8006c90:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8006c92:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8006c96:	e6a1      	b.n	80069dc <HAL_UART_Init+0x1cc>
        pclk = (uint32_t) HSI_VALUE;
 8006c98:	480e      	ldr	r0, [pc, #56]	; (8006cd4 <HAL_UART_Init+0x4c4>)
 8006c9a:	e799      	b.n	8006bd0 <HAL_UART_Init+0x3c0>
 8006c9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ca2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	e842 3100 	strex	r1, r3, [r2]
 8006caa:	2900      	cmp	r1, #0
 8006cac:	d1f7      	bne.n	8006c9e <HAL_UART_Init+0x48e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	f102 0308 	add.w	r3, r2, #8
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	f102 0008 	add.w	r0, r2, #8
 8006cbe:	e840 3100 	strex	r1, r3, [r0]
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	d1f3      	bne.n	8006cae <HAL_UART_Init+0x49e>
 8006cc6:	e7de      	b.n	8006c86 <HAL_UART_Init+0x476>
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	080096bc 	.word	0x080096bc
 8006cd0:	000ffcff 	.word	0x000ffcff
 8006cd4:	00f42400 	.word	0x00f42400

08006cd8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	d017      	beq.n	8006d10 <HAL_UARTEx_DisableFifoMode+0x38>
{
 8006ce0:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ce4:	2124      	movs	r1, #36	; 0x24
 8006ce6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8006cea:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cec:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cee:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cf0:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cf2:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006cf6:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8006cfc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cfe:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d00:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8006d02:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d08:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8006d0c:	bc30      	pop	{r4, r5}
 8006d0e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d10:	2002      	movs	r0, #2
}
 8006d12:	4770      	bx	lr

08006d14 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d14:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006d18:	2a01      	cmp	r2, #1
 8006d1a:	d033      	beq.n	8006d84 <HAL_UARTEx_SetTxFifoThreshold+0x70>
 8006d1c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d20:	681a      	ldr	r2, [r3, #0]
{
 8006d22:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006d24:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d28:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2a:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d2c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006d2e:	f020 0001 	bic.w	r0, r0, #1
 8006d32:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d34:	6890      	ldr	r0, [r2, #8]
 8006d36:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006d3a:	4301      	orrs	r1, r0
 8006d3c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d3e:	b97d      	cbnz	r5, 8006d60 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8006d40:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006d42:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006d44:	2520      	movs	r5, #32
 8006d46:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d50:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006d52:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006d54:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d58:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8006d5c:	bcf0      	pop	{r4, r5, r6, r7}
 8006d5e:	4770      	bx	lr
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d60:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d62:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d64:	4808      	ldr	r0, [pc, #32]	; (8006d88 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d66:	4f09      	ldr	r7, [pc, #36]	; (8006d8c <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d68:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d6c:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d6e:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d70:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d72:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d74:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d76:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d78:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d7a:	fb91 f1f6 	sdiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d7e:	fb90 f0f5 	sdiv	r0, r0, r5
 8006d82:	e7df      	b.n	8006d44 <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006d84:	2002      	movs	r0, #2
}
 8006d86:	4770      	bx	lr
 8006d88:	080096dc 	.word	0x080096dc
 8006d8c:	080096d4 	.word	0x080096d4

08006d90 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006d90:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006d94:	2a01      	cmp	r2, #1
 8006d96:	d033      	beq.n	8006e00 <HAL_UARTEx_SetRxFifoThreshold+0x70>
 8006d98:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006d9a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d9c:	681a      	ldr	r2, [r3, #0]
{
 8006d9e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da4:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006da6:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006daa:	f020 0001 	bic.w	r0, r0, #1
 8006dae:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006db0:	6890      	ldr	r0, [r2, #8]
 8006db2:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006db6:	4301      	orrs	r1, r0
 8006db8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dba:	b97d      	cbnz	r5, 8006ddc <HAL_UARTEx_SetRxFifoThreshold+0x4c>
    huart->NbRxDataToProcess = 1U;
 8006dbc:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006dbe:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	2520      	movs	r5, #32
 8006dc2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dcc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006dce:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006dd4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8006dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dda:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ddc:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dde:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de0:	4808      	ldr	r0, [pc, #32]	; (8006e04 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006de2:	4f09      	ldr	r7, [pc, #36]	; (8006e08 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de4:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006de8:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dea:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dec:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dee:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006df0:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006df4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df6:	fb91 f1f6 	sdiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfa:	fb90 f0f5 	sdiv	r0, r0, r5
 8006dfe:	e7df      	b.n	8006dc0 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006e00:	2002      	movs	r0, #2
}
 8006e02:	4770      	bx	lr
 8006e04:	080096dc 	.word	0x080096dc
 8006e08:	080096d4 	.word	0x080096d4

08006e0c <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8006e0c:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8006e0e:	8840      	ldrh	r0, [r0, #2]
 8006e10:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8006e14:	0c00      	lsrs	r0, r0, #16
 8006e16:	4770      	bx	lr

08006e18 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006e18:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8006e1a:	8803      	ldrh	r3, [r0, #0]
 8006e1c:	140c      	asrs	r4, r1, #16
{
 8006e1e:	b084      	sub	sp, #16
 8006e20:	b20d      	sxth	r5, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8006e22:	fb04 f204 	mul.w	r2, r4, r4
{
 8006e26:	9101      	str	r1, [sp, #4]
    square_limit = maxModule * maxModule;
 8006e28:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006e2c:	fb05 2105 	mla	r1, r5, r5, r2

    if (square_sum > square_limit)
 8006e30:	428b      	cmp	r3, r1
 8006e32:	da10      	bge.n	8006e56 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8006e34:	8846      	ldrh	r6, [r0, #2]
 8006e36:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8006e3a:	4282      	cmp	r2, r0
 8006e3c:	dd14      	ble.n	8006e68 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8006e3e:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8006e40:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8006e44:	bfb8      	it	lt
 8006e46:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8006e48:	f7fa fbee 	bl	8001628 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8006e4c:	2d00      	cmp	r5, #0
 8006e4e:	da00      	bge.n	8006e52 <Circle_Limitation+0x3a>
        {
          new_q = - new_q;
 8006e50:	4240      	negs	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 8006e52:	b205      	sxth	r5, r0
      Local_Vqd.d = (int16_t)new_d;
 8006e54:	b234      	sxth	r4, r6
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8006e56:	b2ad      	uxth	r5, r5
 8006e58:	2000      	movs	r0, #0
 8006e5a:	b2a4      	uxth	r4, r4
 8006e5c:	f365 000f 	bfi	r0, r5, #0, #16
 8006e60:	f364 401f 	bfi	r0, r4, #16, #16
}
 8006e64:	b004      	add	sp, #16
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8006e68:	1a98      	subs	r0, r3, r2
 8006e6a:	f7fa fbdd 	bl	8001628 <MCM_Sqrt>
        if (Vqd.q < 0)
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	db03      	blt.n	8006e7a <Circle_Limitation+0x62>
        new_d = Vqd.d;
 8006e72:	4626      	mov	r6, r4
      Local_Vqd.q = (int16_t)new_q;
 8006e74:	b205      	sxth	r5, r0
      Local_Vqd.d = (int16_t)new_d;
 8006e76:	b234      	sxth	r4, r6
 8006e78:	e7ed      	b.n	8006e56 <Circle_Limitation+0x3e>
          new_q = -new_q;
 8006e7a:	4240      	negs	r0, r0
        new_d = Vqd.d;
 8006e7c:	4626      	mov	r6, r4
 8006e7e:	e7e8      	b.n	8006e52 <Circle_Limitation+0x3a>

08006e80 <EAC_Init>:
  * @param  pVSS: Pointer to Virtual Speed Sensor structure used by the EAC.
  * @param  pENC: Pointer to ENCoder structure used by the EAC.
  */
__weak void EAC_Init(EncAlign_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, VirtualSpeedSensor_Handle_t *pVSS,
                     ENCODER_Handle_t *pENC)
{
 8006e80:	b410      	push	{r4}
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8006e82:	2400      	movs	r4, #0
 8006e84:	7384      	strb	r4, [r0, #14]
    pHandle->EncRestart = false;
 8006e86:	73c4      	strb	r4, [r0, #15]
    pHandle->pVSS = pVSS;
 8006e88:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8006e8c:	6083      	str	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8006e94:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero.*/
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006e96:	2200      	movs	r2, #0
{
 8006e98:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	6840      	ldr	r0, [r0, #4]
 8006e9e:	f002 f9ad 	bl	80091fc <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle.*/
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8006ea2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8006ea6:	6860      	ldr	r0, [r4, #4]
 8006ea8:	f002 f9a0 	bl	80091ec <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE.*/
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	2104      	movs	r1, #4
 8006eb0:	f001 fe68 	bl	8008b84 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	f001 fe67 	bl	8008b8c <STC_ExecRamp>

    /* Execute the torque ramp.*/
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8006ebe:	8ae2      	ldrh	r2, [r4, #22]
 8006ec0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	f001 fe61 	bl	8008b8c <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase.*/
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006eca:	8ae1      	ldrh	r1, [r4, #22]
 8006ecc:	8a23      	ldrh	r3, [r4, #16]
    wAux /= 1000U;
 8006ece:	4a04      	ldr	r2, [pc, #16]	; (8006ee0 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006ed0:	fb03 f301 	mul.w	r3, r3, r1
    wAux /= 1000U;
 8006ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed8:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8006eda:	3301      	adds	r3, #1
 8006edc:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006ede:	bd10      	pop	{r4, pc}
 8006ee0:	10624dd3 	.word	0x10624dd3

08006ee4 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8006ee4:	8983      	ldrh	r3, [r0, #12]
 8006ee6:	b12b      	cbz	r3, 8006ef4 <EAC_Exec+0x10>
    {
      pHandle->hRemainingTicks--;
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 8006eee:	b11b      	cbz	r3, 8006ef8 <EAC_Exec+0x14>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8006ef0:	2000      	movs	r0, #0
    }
#endif
  }

  return (retVal);
}
 8006ef2:	4770      	bx	lr
  bool retVal = true;
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	4770      	bx	lr
{
 8006ef8:	b510      	push	{r4, lr}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8006efa:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8006efe:	7e03      	ldrb	r3, [r0, #24]
 8006f00:	fb91 f1f3 	sdiv	r1, r1, r3
 8006f04:	4604      	mov	r4, r0
 8006f06:	6880      	ldr	r0, [r0, #8]
 8006f08:	f000 f94c 	bl	80071a4 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	73a0      	strb	r0, [r4, #14]
}
 8006f10:	bd10      	pop	{r4, pc}
 8006f12:	bf00      	nop

08006f14 <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 8006f14:	7b80      	ldrb	r0, [r0, #14]
 8006f16:	4770      	bx	lr

08006f18 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8006f18:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006f1a:	4770      	bx	lr

08006f1c <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006f1c:	6a03      	ldr	r3, [r0, #32]
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006f1e:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 8006f22:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006f24:	681d      	ldr	r5, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006f26:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006f2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f2e:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006f30:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006f32:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8006f36:	601d      	str	r5, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006f38:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8006f3c:	6259      	str	r1, [r3, #36]	; 0x24
 8006f3e:	fbb4 f4f6 	udiv	r4, r4, r6
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006f42:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006f44:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006f46:	699a      	ldr	r2, [r3, #24]

    /* Set IC filter for both channel 1 & 2*/
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ((uint32_t)pHandle->ICx_Filter << 20U));
 8006f48:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 8006f4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006f50:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8006f54:	619a      	str	r2, [r3, #24]
 8006f56:	699a      	ldr	r2, [r3, #24]
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ((uint32_t)pHandle->ICx_Filter << 20U));
 8006f58:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 8006f5c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006f60:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f64:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006f68:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f6a:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer*/
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8006f7c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8006f80:	b13a      	cbz	r2, 8006f92 <ENC_Init+0x76>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006f82:	3a01      	subs	r2, #1
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	3201      	adds	r2, #1
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	3028      	adds	r0, #40	; 0x28
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006f8c:	bc70      	pop	{r4, r5, r6}
 8006f8e:	f002 b99e 	b.w	80092ce <memset>
 8006f92:	bc70      	pop	{r4, r5, r6}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop

08006f98 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8006f98:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006f9a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 8006f9e:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006fa0:	b13a      	cbz	r2, 8006fb2 <ENC_Clear+0x1a>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	3201      	adds	r2, #1
 8006fa8:	0092      	lsls	r2, r2, #2
 8006faa:	2100      	movs	r1, #0
 8006fac:	3028      	adds	r0, #40	; 0x28
 8006fae:	f002 f98e 	bl	80092ce <memset>
    }
    pHandle->SensorIsReliable = true;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	bf00      	nop

08006fbc <ENC_CalcAngle>:
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006fbc:	6a01      	ldr	r1, [r0, #32]
 8006fbe:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 8006fc0:	b430      	push	{r4, r5}
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006fc2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /*Computes and stores the rotor mechanical angle*/
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8006fc4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006fc8:	b2ad      	uxth	r5, r5
{
 8006fca:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006fcc:	fb02 f205 	mul.w	r2, r2, r5

    pHandle->_Super.hMecAngle = mecAngle;

    /*Computes and stores the rotor electrical angle*/
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006fd0:	7840      	ldrb	r0, [r0, #1]

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006fd2:	689c      	ldr	r4, [r3, #8]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006fd4:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006fd6:	b295      	uxth	r5, r2
    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006fd8:	1a69      	subs	r1, r5, r1
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006fda:	fb10 f005 	smulbb	r0, r0, r5
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006fde:	fa04 f181 	sxtah	r1, r4, r1
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006fe2:	b200      	sxth	r0, r0
    mecAngle = (int16_t)wtemp1;
 8006fe4:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006fe6:	6099      	str	r1, [r3, #8]
    pHandle->_Super.hElAngle = elAngle;
 8006fe8:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8006fea:	bc30      	pop	{r4, r5}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop

08006ff0 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006ff4:	6a04      	ldr	r4, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8006ff6:	f890 7074 	ldrb.w	r7, [r0, #116]	; 0x74
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007002:	6a62      	ldr	r2, [r4, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8007004:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 8007008:	ea5f 7cd2 	movs.w	ip, r2, lsr #31
    pHandle->TimerOverflowNb = 0;
 800700c:	f04f 0600 	mov.w	r6, #0
 8007010:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007014:	bf18      	it	ne
 8007016:	f06f 0601 	mvnne.w	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800701a:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800701c:	bf18      	it	ne
 800701e:	6126      	strne	r6, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007020:	68e6      	ldr	r6, [r4, #12]
    OverflowCntSample = pHandle->TimerOverflowNb;
 8007022:	b2ad      	uxth	r5, r5
 8007024:	f046 0601 	orr.w	r6, r6, #1

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8007028:	4465      	add	r5, ip
 800702a:	60e6      	str	r6, [r4, #12]
 800702c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007030:	f8b0 4072 	ldrh.w	r4, [r0, #114]	; 0x72
 8007034:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 8007038:	bf98      	it	ls
 800703a:	f890 6078 	ldrbls.w	r6, [r0, #120]	; 0x78
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 800703e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    {
      pHandle->TimerOverflowError = true;
 8007042:	bf88      	it	hi
 8007044:	2601      	movhi	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	bf88      	it	hi
 800704c:	f880 6078 	strbhi.w	r6, [r0, #120]	; 0x78
 8007050:	1b14      	subs	r4, r2, r4
 8007052:	fb0c f505 	mul.w	r5, ip, r5
    {
      /* Nothing to do */
    }

    /*Calculation of delta angle*/
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8093 	beq.w	8007182 <ENC_CalcAvrgMecSpeedUnit+0x192>
      /* encoder timer down-counting*/
      /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800705c:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8007060:	330a      	adds	r3, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8007062:	1b64      	subs	r4, r4, r5
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007064:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /*Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007068:	2f00      	cmp	r7, #0
 800706a:	f000 8093 	beq.w	8007194 <ENC_CalcAvrgMecSpeedUnit+0x1a4>
 800706e:	2f01      	cmp	r7, #1
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007070:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007072:	d939      	bls.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007074:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007076:	2f02      	cmp	r7, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007078:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800707a:	d035      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800707c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800707e:	2f03      	cmp	r7, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007080:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007082:	d031      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007084:	6b44      	ldr	r4, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007086:	2f04      	cmp	r7, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007088:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800708a:	d02d      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800708c:	6b84      	ldr	r4, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800708e:	2f05      	cmp	r7, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007090:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007092:	d029      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007094:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8007096:	2f06      	cmp	r7, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007098:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800709a:	d025      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800709c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800709e:	2f07      	cmp	r7, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070a0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070a2:	d021      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070a6:	2f08      	cmp	r7, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070a8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070aa:	d01d      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070ac:	6c84      	ldr	r4, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070ae:	2f09      	cmp	r7, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070b0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070b2:	d019      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070b4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070b6:	2f0a      	cmp	r7, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070b8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070ba:	d015      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070bc:	6d04      	ldr	r4, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070be:	2f0b      	cmp	r7, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070c0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070c2:	d011      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070c4:	6d44      	ldr	r4, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070c6:	2f0c      	cmp	r7, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070c8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070ca:	d00d      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070cc:	6d84      	ldr	r4, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070ce:	2f0d      	cmp	r7, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070d0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070d2:	d009      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070d4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070d6:	2f0e      	cmp	r7, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070d8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070da:	d005      	beq.n	80070e8 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070dc:	6e04      	ldr	r4, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80070de:	2f0f      	cmp	r7, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80070e0:	4423      	add	r3, r4
 80070e2:	bf1c      	itt	ne
 80070e4:	6e44      	ldrne	r4, [r0, #100]	; 0x64
 80070e6:	191b      	addne	r3, r3, r4
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80070e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 80070ea:	fb0c f707 	mul.w	r7, ip, r7
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80070ee:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 80070f2:	b10f      	cbz	r7, 80070f8 <ENC_CalcAvrgMecSpeedUnit+0x108>
 80070f4:	fb93 f3f7 	sdiv	r3, r3, r7
 80070f8:	fa0f fc83 	sxth.w	ip, r3
 80070fc:	b29b      	uxth	r3, r3

    *pMecSpeedUnit = (int16_t)wtemp1;
 80070fe:	f8a1 c000 	strh.w	ip, [r1]

    /*Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;

    /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007102:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /*last captured value update*/
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 8007106:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800710a:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800710e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007112:	340a      	adds	r4, #10
    pHandle->DeltaCapturesIndex++;
 8007114:	3501      	adds	r5, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8007116:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 800711a:	f8a0 c00c 	strh.w	ip, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 800711e:	b2ed      	uxtb	r5, r5
 8007120:	f880 5077 	strb.w	r5, [r0, #119]	; 0x77
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8007124:	7845      	ldrb	r5, [r0, #1]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8007126:	f890 c077 	ldrb.w	ip, [r0, #119]	; 0x77
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 800712a:	69c4      	ldr	r4, [r0, #28]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800712c:	fb07 f70e 	mul.w	r7, r7, lr
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8007130:	eba3 0308 	sub.w	r3, r3, r8
 8007134:	8243      	strh	r3, [r0, #18]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8007136:	f64f 7efe 	movw	lr, #65534	; 0xfffe
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800713a:	fb05 f307 	mul.w	r3, r5, r7
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800713e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007142:	4572      	cmp	r2, lr
 8007144:	bf88      	it	hi
 8007146:	462a      	movhi	r2, r5
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8007148:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 800714c:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
 8007150:	fb93 f3f7 	sdiv	r3, r3, r7
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8007154:	4565      	cmp	r5, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8007156:	fb04 f403 	mul.w	r4, r4, r3
    {
      pHandle->DeltaCapturesIndex = 0U;
 800715a:	bf98      	it	ls
 800715c:	2300      	movls	r3, #0
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800715e:	f8a0 2072 	strh.w	r2, [r0, #114]	; 0x72
      pHandle->DeltaCapturesIndex = 0U;
 8007162:	bf98      	it	ls
 8007164:	f880 3077 	strbls.w	r3, [r0, #119]	; 0x77
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007168:	8b42      	ldrh	r2, [r0, #26]
 800716a:	fb94 f4f2 	sdiv	r4, r4, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 800716e:	81c4      	strh	r4, [r0, #14]
    {
      /* nothing to do */
    }

    /*Checks the reliability status, then stores and returns it*/
    if (pHandle->TimerOverflowError)
 8007170:	b19e      	cbz	r6, 800719a <ENC_CalcAvrgMecSpeedUnit+0x1aa>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007172:	78c2      	ldrb	r2, [r0, #3]
 8007174:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 8007176:	2300      	movs	r3, #0
 8007178:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 800717c:	4618      	mov	r0, r3
 800717e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007182:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8007186:	330a      	adds	r3, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8007188:	442c      	add	r4, r5
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800718a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800718e:	2f00      	cmp	r7, #0
 8007190:	f47f af6d 	bne.w	800706e <ENC_CalcAvrgMecSpeedUnit+0x7e>
 8007194:	463b      	mov	r3, r7
 8007196:	46bc      	mov	ip, r7
 8007198:	e7b1      	b.n	80070fe <ENC_CalcAvrgMecSpeedUnit+0x10e>
}
 800719a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 800719e:	f001 bc8f 	b.w	8008ac0 <SPD_IsMecSpeedReliable>
 80071a2:	bf00      	nop

080071a4 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80071a4:	7842      	ldrb	r2, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 80071a6:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80071a8:	b28b      	uxth	r3, r1
 80071aa:	fb12 f203 	smulbb	r2, r2, r3
    if (localhMecAngle < 0)
 80071ae:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80071b0:	8082      	strh	r2, [r0, #4]
 80071b2:	bfb8      	it	lt
 80071b4:	f103 33ff 	addlt.w	r3, r3, #4294967295
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80071b8:	6a02      	ldr	r2, [r0, #32]
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80071ba:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 80071be:	4905      	ldr	r1, [pc, #20]	; (80071d4 <ENC_SetMecAngle+0x30>)
 80071c0:	bfb8      	it	lt
 80071c2:	b29b      	uxthlt	r3, r3
 80071c4:	fb03 f300 	mul.w	r3, r3, r0
 80071c8:	fba1 1303 	umull	r1, r3, r1, r3
 80071cc:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 80071ce:	6253      	str	r3, [r2, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	80008001 	.word	0x80008001

080071d8 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 80071d8:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 80071da:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 80071dc:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 80071e0:	3301      	adds	r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80071ee:	6846      	ldr	r6, [r0, #4]
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 80071f0:	4f57      	ldr	r7, [pc, #348]	; (8007350 <MCP_ReceivedPacket+0x164>)
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80071f2:	8833      	ldrh	r3, [r6, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80071f4:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80071f8:	f023 0507 	bic.w	r5, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80071fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8007200:	b2ad      	uxth	r5, r5
      userCommand = (command >> 3) & 0x1f;
 8007202:	bf04      	itt	eq
 8007204:	f3c5 0cc4 	ubfxeq	ip, r5, #3, #5
      command = MCP_USER_CMD;    	
 8007208:	4615      	moveq	r5, r2
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800720a:	6802      	ldr	r2, [r0, #0]
{
 800720c:	4604      	mov	r4, r0
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800720e:	8991      	ldrh	r1, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007210:	8980      	ldrh	r0, [r0, #12]
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8007212:	f103 33ff 	add.w	r3, r3, #4294967295
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007216:	f101 32ff 	add.w	r2, r1, #4294967295
    MCI_Handle_t *pMCI = &Mci[motorID];
 800721a:	f003 0307 	and.w	r3, r3, #7
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800721e:	f1a0 0002 	sub.w	r0, r0, #2
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007222:	f106 0e02 	add.w	lr, r6, #2
  uint8_t userCommand=0;
 8007226:	bf18      	it	ne
 8007228:	f04f 0c00 	movne.w	ip, #0
    MCI_Handle_t *pMCI = &Mci[motorID];
 800722c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007230:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007232:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8007234:	2600      	movs	r6, #0

    switch (command)
 8007236:	2d28      	cmp	r5, #40	; 0x28
{
 8007238:	b083      	sub	sp, #12
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800723a:	f8c4 e004 	str.w	lr, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 800723e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007242:	b20a      	sxth	r2, r1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007244:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 8007246:	81e6      	strh	r6, [r4, #14]
    switch (command)
 8007248:	d05e      	beq.n	8007308 <MCP_ReceivedPacket+0x11c>
 800724a:	d80d      	bhi.n	8007268 <MCP_ReceivedPacket+0x7c>
 800724c:	2d10      	cmp	r5, #16
 800724e:	d041      	beq.n	80072d4 <MCP_ReceivedPacket+0xe8>
 8007250:	d919      	bls.n	8007286 <MCP_ReceivedPacket+0x9a>
 8007252:	2d18      	cmp	r5, #24
 8007254:	d035      	beq.n	80072c2 <MCP_ReceivedPacket+0xd6>
 8007256:	2d20      	cmp	r5, #32
 8007258:	d142      	bne.n	80072e0 <MCP_ReceivedPacket+0xf4>
        {
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
        }
        else
        {
          (void)MCI_StopMotor(pMCI);
 800725a:	4638      	mov	r0, r7
 800725c:	f7fa f8b6 	bl	80013cc <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 8007260:	4630      	mov	r0, r6
 8007262:	89e5      	ldrh	r5, [r4, #14]
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	e016      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
    switch (command)
 8007268:	2d48      	cmp	r5, #72	; 0x48
 800726a:	d046      	beq.n	80072fa <MCP_ReceivedPacket+0x10e>
 800726c:	d919      	bls.n	80072a2 <MCP_ReceivedPacket+0xb6>
 800726e:	2d68      	cmp	r5, #104	; 0x68
 8007270:	d056      	beq.n	8007320 <MCP_ReceivedPacket+0x134>
 8007272:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007276:	d133      	bne.n	80072e0 <MCP_ReceivedPacket+0xf4>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
        break;
      }
      
      case MCP_USER_CMD:
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007278:	f1bc 0f01 	cmp.w	ip, #1
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	d959      	bls.n	8007334 <MCP_ReceivedPacket+0x148>
 8007280:	4635      	mov	r5, r6
    	  {
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
    	  }
    	  else
    	  {
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8007282:	200d      	movs	r0, #13
 8007284:	e007      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
    switch (command)
 8007286:	b37d      	cbz	r5, 80072e8 <MCP_ReceivedPacket+0xfc>
 8007288:	2d08      	cmp	r5, #8
 800728a:	d129      	bne.n	80072e0 <MCP_ReceivedPacket+0xf4>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 800728c:	4620      	mov	r0, r4
 800728e:	f7fa ffb1 	bl	80021f4 <RI_SetRegCommandParser>
 8007292:	89e5      	ldrh	r5, [r4, #14]
 8007294:	68a3      	ldr	r3, [r4, #8]
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007296:	5558      	strb	r0, [r3, r5]
    pHandle->txLength++;
 8007298:	89e3      	ldrh	r3, [r4, #14]
 800729a:	3301      	adds	r3, #1
 800729c:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800729e:	b003      	add	sp, #12
 80072a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80072a2:	2d30      	cmp	r5, #48	; 0x30
 80072a4:	d008      	beq.n	80072b8 <MCP_ReceivedPacket+0xcc>
 80072a6:	2d38      	cmp	r5, #56	; 0x38
 80072a8:	d11a      	bne.n	80072e0 <MCP_ReceivedPacket+0xf4>
        (void)MCI_FaultAcknowledged(pMCI);
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7fa f8b0 	bl	8001410 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 80072b0:	4630      	mov	r0, r6
 80072b2:	89e5      	ldrh	r5, [r4, #14]
 80072b4:	68a3      	ldr	r3, [r4, #8]
        break;
 80072b6:	e7ee      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
        if (IDLE == MCI_GetSTMState(pMCI))
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7fa f867 	bl	800138c <MCI_GetSTMState>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d1cb      	bne.n	800725a <MCP_ReceivedPacket+0x6e>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80072c2:	4638      	mov	r0, r7
 80072c4:	f7fa f86c 	bl	80013a0 <MCI_StartMotor>
 80072c8:	f080 0001 	eor.w	r0, r0, #1
 80072cc:	b2c0      	uxtb	r0, r0
 80072ce:	89e5      	ldrh	r5, [r4, #14]
 80072d0:	68a3      	ldr	r3, [r4, #8]
 80072d2:	e7e0      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7fb fa81 	bl	80027dc <RI_GetRegCommandParser>
 80072da:	89e5      	ldrh	r5, [r4, #14]
 80072dc:	68a3      	ldr	r3, [r4, #8]
        break;
 80072de:	e7da      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
 80072e0:	68a3      	ldr	r3, [r4, #8]
    switch (command)
 80072e2:	2500      	movs	r5, #0
        MCPResponse = MCP_CMD_UNKNOWN;
 80072e4:	2002      	movs	r0, #2
 80072e6:	e7d6      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80072e8:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 80072ea:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80072ec:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 80072ee:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80072f0:	701a      	strb	r2, [r3, #0]
        MCPResponse = MCP_CMD_OK;
 80072f2:	4628      	mov	r0, r5
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	89e5      	ldrh	r5, [r4, #14]
      break;
 80072f8:	e7cd      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
        MCI_Clear_Iqdref(pMCI);
 80072fa:	4638      	mov	r0, r7
 80072fc:	f7fa f8f6 	bl	80014ec <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8007300:	4630      	mov	r0, r6
 8007302:	89e5      	ldrh	r5, [r4, #14]
 8007304:	68a3      	ldr	r3, [r4, #8]
        break;
 8007306:	e7c6      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
        if (RUN == MCI_GetSTMState(pMCI))
 8007308:	4638      	mov	r0, r7
 800730a:	f7fa f83f 	bl	800138c <MCI_GetSTMState>
 800730e:	2806      	cmp	r0, #6
 8007310:	d1a6      	bne.n	8007260 <MCP_ReceivedPacket+0x74>
          MCI_StopRamp(pMCI);
 8007312:	4638      	mov	r0, r7
 8007314:	f7fa f8a2 	bl	800145c <MCI_StopRamp>
        MCPResponse = MCP_CMD_OK;
 8007318:	4630      	mov	r0, r6
 800731a:	89e5      	ldrh	r5, [r4, #14]
 800731c:	68a3      	ldr	r3, [r4, #8]
 800731e:	e7ba      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4671      	mov	r1, lr
 8007326:	f104 030e 	add.w	r3, r4, #14
 800732a:	f7f9 ff69 	bl	8001200 <MC_ProfilerCommand>
 800732e:	89e5      	ldrh	r5, [r4, #14]
 8007330:	68a3      	ldr	r3, [r4, #8]
        break;
 8007332:	e7b0      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007334:	4907      	ldr	r1, [pc, #28]	; (8007354 <MCP_ReceivedPacket+0x168>)
 8007336:	f851 502c 	ldr.w	r5, [r1, ip, lsl #2]
 800733a:	b13d      	cbz	r5, 800734c <MCP_ReceivedPacket+0x160>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4671      	mov	r1, lr
 8007340:	f104 030e 	add.w	r3, r4, #14
 8007344:	47a8      	blx	r5
 8007346:	89e5      	ldrh	r5, [r4, #14]
 8007348:	68a3      	ldr	r3, [r4, #8]
 800734a:	e7a4      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800734c:	200d      	movs	r0, #13
 800734e:	e7a2      	b.n	8007296 <MCP_ReceivedPacket+0xaa>
 8007350:	200019a0 	.word	0x200019a0
 8007354:	200019ec 	.word	0x200019ec

08007358 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800735a:	7fc3      	ldrb	r3, [r0, #31]
 800735c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8007360:	429a      	cmp	r2, r3
 8007362:	d002      	beq.n	800736a <MCPA_dataLog+0x12>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8007364:	3301      	adds	r3, #1
 8007366:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8007368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 800736a:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8007372:	2d00      	cmp	r5, #0
 8007374:	d13b      	bne.n	80073ee <MCPA_dataLog+0x96>
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8007376:	4601      	mov	r1, r0
 8007378:	2209      	movs	r2, #9
 800737a:	f851 0b14 	ldr.w	r0, [r1], #20
 800737e:	6803      	ldr	r3, [r0, #0]
 8007380:	4798      	blx	r3
 8007382:	b388      	cbz	r0, 80073e8 <MCPA_dataLog+0x90>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007384:	4b51      	ldr	r3, [pc, #324]	; (80074cc <MCPA_dataLog+0x174>)
          logValue = (uint32_t *) pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8007386:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 800738c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007390:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8007394:	f884 5020 	strb.w	r5, [r4, #32]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007398:	429a      	cmp	r2, r3
          pHandle->bufferIndex = 4U;
 800739a:	f04f 0504 	mov.w	r5, #4
 800739e:	8325      	strh	r5, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80073a0:	d026      	beq.n	80073f0 <MCPA_dataLog+0x98>
            pHandle->HFNumBuff = pHandle->HFNum;
 80073a2:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 80073a6:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 80073aa:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
            pHandle->MFRateBuff = pHandle->MFRate;
 80073ae:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
            pHandle->MarkBuff = pHandle->Mark;
 80073b2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80073b6:	1842      	adds	r2, r0, r1
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80073b8:	8b63      	ldrh	r3, [r4, #26]
            pHandle->HFNumBuff = pHandle->HFNum;
 80073ba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 80073be:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80073c2:	0092      	lsls	r2, r2, #2
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80073c4:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80073c6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff = pHandle->HFRate;
 80073ca:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
            pHandle->MFRateBuff = pHandle->MFRate;
 80073ce:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80073d2:	f001 ff71 	bl	80092b8 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 80073d6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80073da:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80073de:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80073e2:	441a      	add	r2, r3
 80073e4:	f001 ff68 	bl	80092b8 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80073e8:	8b25      	ldrh	r5, [r4, #24]
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	d0bc      	beq.n	8007368 <MCPA_dataLog+0x10>
 80073ee:	6961      	ldr	r1, [r4, #20]
 80073f0:	8ba3      	ldrh	r3, [r4, #28]
 80073f2:	42ab      	cmp	r3, r5
 80073f4:	d31c      	bcc.n	8007430 <MCPA_dataLog+0xd8>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80073f6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80073fa:	1948      	adds	r0, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	d03e      	beq.n	800747e <MCPA_dataLog+0x126>
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007400:	68a6      	ldr	r6, [r4, #8]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007402:	2300      	movs	r3, #0
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007404:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8007408:	8812      	ldrh	r2, [r2, #0]
 800740a:	f820 2b02 	strh.w	r2, [r0], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800740e:	8b25      	ldrh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007410:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007414:	3301      	adds	r3, #1
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007416:	3502      	adds	r5, #2
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007418:	b2db      	uxtb	r3, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800741a:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800741c:	429a      	cmp	r2, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800741e:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007420:	d8f0      	bhi.n	8007404 <MCPA_dataLog+0xac>
        if (pHandle->MFRateBuff < 254U)
 8007422:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8007426:	8ba3      	ldrh	r3, [r4, #28]
 8007428:	28fd      	cmp	r0, #253	; 0xfd
 800742a:	d92d      	bls.n	8007488 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800742c:	42ab      	cmp	r3, r5
 800742e:	d29b      	bcs.n	8007368 <MCPA_dataLog+0x10>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007430:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8007434:	2bfe      	cmp	r3, #254	; 0xfe
 8007436:	d00c      	beq.n	8007452 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007438:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800743c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 800743e:	8b22      	ldrh	r2, [r4, #24]
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	3202      	adds	r2, #2
 8007444:	2309      	movs	r3, #9
 8007446:	b292      	uxth	r2, r2
 8007448:	6845      	ldr	r5, [r0, #4]
 800744a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	8323      	strh	r3, [r4, #24]
}
 8007450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007452:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007456:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800745a:	4418      	add	r0, r3
 800745c:	4298      	cmp	r0, r3
 800745e:	ddeb      	ble.n	8007438 <MCPA_dataLog+0xe0>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007460:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007462:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007464:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	514a      	str	r2, [r1, r5]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800746c:	5cf2      	ldrb	r2, [r6, r3]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800746e:	3301      	adds	r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007470:	4415      	add	r5, r2
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007472:	b2db      	uxtb	r3, r3
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007474:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007476:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007478:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800747a:	dbf3      	blt.n	8007464 <MCPA_dataLog+0x10c>
 800747c:	e7dc      	b.n	8007438 <MCPA_dataLog+0xe0>
        if (pHandle->MFRateBuff < 254U)
 800747e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8007482:	28fd      	cmp	r0, #253	; 0xfd
 8007484:	f63f af70 	bhi.w	8007368 <MCPA_dataLog+0x10>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8007488:	f894 5020 	ldrb.w	r5, [r4, #32]
 800748c:	4285      	cmp	r5, r0
 800748e:	d004      	beq.n	800749a <MCPA_dataLog+0x142>
            pHandle->MFIndex ++;
 8007490:	1c6a      	adds	r2, r5, #1
 8007492:	f884 2020 	strb.w	r2, [r4, #32]
 8007496:	8b25      	ldrh	r5, [r4, #24]
 8007498:	e7c8      	b.n	800742c <MCPA_dataLog+0xd4>
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800749a:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 800749e:	8b25      	ldrh	r5, [r4, #24]
 80074a0:	4416      	add	r6, r2
            pHandle->MFIndex = 0U;
 80074a2:	2000      	movs	r0, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074a4:	4296      	cmp	r6, r2
            pHandle->MFIndex = 0U;
 80074a6:	f884 0020 	strb.w	r0, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074aa:	ddbf      	ble.n	800742c <MCPA_dataLog+0xd4>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80074ac:	f8d4 c008 	ldr.w	ip, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80074b0:	6927      	ldr	r7, [r4, #16]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80074b2:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	5148      	str	r0, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80074ba:	5cb8      	ldrb	r0, [r7, r2]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074bc:	3201      	adds	r2, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80074be:	4405      	add	r5, r0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074c0:	b2d2      	uxtb	r2, r2
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80074c2:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074c4:	42b2      	cmp	r2, r6
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80074c6:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074c8:	dbf3      	blt.n	80074b2 <MCPA_dataLog+0x15a>
 80074ca:	e7af      	b.n	800742c <MCPA_dataLog+0xd4>
 80074cc:	200016b4 	.word	0x200016b4

080074d0 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 80074d0:	8b02      	ldrh	r2, [r0, #24]
 80074d2:	b19a      	cbz	r2, 80074fc <MCPA_flushDataLog+0x2c>
{
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 80074d6:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80074da:	6941      	ldr	r1, [r0, #20]
 80074dc:	2bfe      	cmp	r3, #254	; 0xfe
 80074de:	d00e      	beq.n	80074fe <MCPA_flushDataLog+0x2e>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80074e0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80074e4:	528b      	strh	r3, [r1, r2]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 80074e6:	8b02      	ldrh	r2, [r0, #24]
 80074e8:	4604      	mov	r4, r0
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	3202      	adds	r2, #2
 80074ee:	2309      	movs	r3, #9
 80074f0:	b292      	uxth	r2, r2
 80074f2:	6845      	ldr	r5, [r0, #4]
 80074f4:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	8323      	strh	r3, [r4, #24]
  }   
}
 80074fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fc:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80074fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007502:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
 8007506:	441d      	add	r5, r3
 8007508:	42ab      	cmp	r3, r5
 800750a:	dae9      	bge.n	80074e0 <MCPA_flushDataLog+0x10>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 800750c:	6887      	ldr	r7, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800750e:	6906      	ldr	r6, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007510:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
 8007514:	6824      	ldr	r4, [r4, #0]
 8007516:	508c      	str	r4, [r1, r2]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007518:	5cf4      	ldrb	r4, [r6, r3]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800751a:	3301      	adds	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800751c:	4422      	add	r2, r4
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800751e:	b2db      	uxtb	r3, r3
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007520:	b292      	uxth	r2, r2
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007522:	42ab      	cmp	r3, r5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007524:	8302      	strh	r2, [r0, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007526:	dbf3      	blt.n	8007510 <MCPA_flushDataLog+0x40>
 8007528:	e7da      	b.n	80074e0 <MCPA_flushDataLog+0x10>
 800752a:	bf00      	nop

0800752c <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 800752c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007530:	880f      	ldrh	r7, [r1, #0]
{
 8007532:	4604      	mov	r4, r0

    if (buffSize == 0)
 8007534:	2f00      	cmp	r7, #0
 8007536:	d03e      	beq.n	80075b6 <MCPA_cfgLog+0x8a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8007538:	6803      	ldr	r3, [r0, #0]
 800753a:	89db      	ldrh	r3, [r3, #14]
 800753c:	42bb      	cmp	r3, r7
 800753e:	d337      	bcc.n	80075b0 <MCPA_cfgLog+0x84>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8007540:	788b      	ldrb	r3, [r1, #2]
 8007542:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8007546:	78ca      	ldrb	r2, [r1, #3]
 8007548:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800754c:	790b      	ldrb	r3, [r1, #4]
 800754e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8007552:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8007554:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8007556:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 800755a:	4416      	add	r6, r2
 800755c:	429e      	cmp	r6, r3
 800755e:	dc53      	bgt.n	8007608 <MCPA_cfgLog+0xdc>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8007560:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007562:	2e00      	cmp	r6, #0
 8007564:	d053      	beq.n	800760e <MCPA_cfgLog+0xe2>
 8007566:	2500      	movs	r5, #0
 8007568:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 800756a:	462e      	mov	r6, r5
 800756c:	e010      	b.n	8007590 <MCPA_cfgLog+0x64>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800756e:	2002      	movs	r0, #2
 8007570:	68e3      	ldr	r3, [r4, #12]
 8007572:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8007574:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007576:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 800757a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
         logSize = logSize+pHandle->dataSizeTable[i];
 800757e:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007580:	3501      	adds	r5, #1
 8007582:	440b      	add	r3, r1
 8007584:	b2ed      	uxtb	r5, r5
         logSize = logSize+pHandle->dataSizeTable[i];
 8007586:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007588:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 800758a:	b296      	uxth	r6, r2
        pCfgData++;
 800758c:	4641      	mov	r1, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800758e:	da2a      	bge.n	80075e6 <MCPA_cfgLog+0xba>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007590:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	4648      	mov	r0, r9
 8007598:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800759c:	f7fb fd6e 	bl	800307c <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 80075a0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	d8e2      	bhi.n	800756e <MCPA_cfgLog+0x42>
 80075a8:	4648      	mov	r0, r9
 80075aa:	f7fb fd5b 	bl	8003064 <RI_GetIDSize>
 80075ae:	e7df      	b.n	8007570 <MCPA_cfgLog+0x44>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80075b0:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80075b6:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 80075b8:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80075bc:	b153      	cbz	r3, 80075d4 <MCPA_cfgLog+0xa8>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80075be:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80075c0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80075c4:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 80075c6:	8b22      	ldrh	r2, [r4, #24]
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	3202      	adds	r2, #2
 80075cc:	b292      	uxth	r2, r2
 80075ce:	6845      	ldr	r5, [r0, #4]
 80075d0:	2309      	movs	r3, #9
 80075d2:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 80075d4:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 80075d6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 80075da:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 80075dc:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 80075e0:	8320      	strh	r0, [r4, #24]
}
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	1db3      	adds	r3, r6, #6
     if (buffSize < (logSize + 2U + 4U))
 80075e8:	429f      	cmp	r7, r3
 80075ea:	d3e1      	bcc.n	80075b0 <MCPA_cfgLog+0x84>
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 80075ec:	1eba      	subs	r2, r7, #2
 80075ee:	1b92      	subs	r2, r2, r6
 80075f0:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 80075f2:	780b      	ldrb	r3, [r1, #0]
 80075f4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 80075f8:	b113      	cbz	r3, 8007600 <MCPA_cfgLog+0xd4>
  uint8_t result = MCP_CMD_OK;
 80075fa:	2000      	movs	r0, #0
}
 80075fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007600:	8b23      	ldrh	r3, [r4, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1db      	bne.n	80075be <MCPA_cfgLog+0x92>
 8007606:	e7e5      	b.n	80075d4 <MCPA_cfgLog+0xa8>
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8007608:	200a      	movs	r0, #10
}
 800760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800760e:	2306      	movs	r3, #6
 8007610:	e7ea      	b.n	80075e8 <MCPA_cfgLog+0xbc>
 8007612:	bf00      	nop

08007614 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8007614:	8a03      	ldrh	r3, [r0, #16]
 8007616:	8b42      	ldrh	r2, [r0, #26]
 8007618:	429a      	cmp	r2, r3
 800761a:	d306      	bcc.n	800762a <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800761c:	8b82      	ldrh	r2, [r0, #28]
 800761e:	429a      	cmp	r2, r3
 8007620:	d801      	bhi.n	8007626 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
    }
    else
    {
      hFault = pHandle->hFaultState;
 8007622:	8ac0      	ldrh	r0, [r0, #22]
 8007624:	4770      	bx	lr
      hFault = MC_NO_ERROR;
 8007626:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8007628:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 800762a:	2008      	movs	r0, #8
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop

08007630 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop

08007638 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8007638:	7803      	ldrb	r3, [r0, #0]
 800763a:	b123      	cbz	r3, 8007646 <NTC_Init+0xe>
      pHandle->hFaultState = MC_NO_ERROR;
 800763c:	2200      	movs	r2, #0
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800763e:	8a43      	ldrh	r3, [r0, #18]
      pHandle->hFaultState = MC_NO_ERROR;
 8007640:	82c2      	strh	r2, [r0, #22]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007642:	8203      	strh	r3, [r0, #16]
 8007644:	4770      	bx	lr
{
 8007646:	b510      	push	{r4, lr}
 8007648:	4604      	mov	r4, r0
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800764a:	3004      	adds	r0, #4
 800764c:	f7fb fda6 	bl	800319c <RCM_RegisterRegConv>
 8007650:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8007654:	4620      	mov	r0, r4
 8007656:	f7ff ffeb 	bl	8007630 <NTC_Clear>
}
 800765a:	bd10      	pop	{r4, pc}

0800765c <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800765c:	7803      	ldrb	r3, [r0, #0]
 800765e:	b11b      	cbz	r3, 8007668 <NTC_CalcAvTemp+0xc>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8007660:	2300      	movs	r3, #0
 8007662:	82c3      	strh	r3, [r0, #22]
 8007664:	4618      	mov	r0, r3
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8007666:	4770      	bx	lr
{
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800766c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007670:	f7fb fe6c 	bl	800334c <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8007674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007678:	4298      	cmp	r0, r3
 800767a:	d007      	beq.n	800768c <NTC_CalcAvTemp+0x30>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800767c:	8b22      	ldrh	r2, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800767e:	8a23      	ldrh	r3, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8007680:	1e51      	subs	r1, r2, #1
        wtemp += hAux;
 8007682:	fb01 0003 	mla	r0, r1, r3, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8007686:	fbb0 f0f2 	udiv	r0, r0, r2
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800768a:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800768c:	4620      	mov	r0, r4
 800768e:	f7ff ffc1 	bl	8007614 <NTC_SetFaultState>
 8007692:	82e0      	strh	r0, [r4, #22]
}
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop

08007698 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8007698:	7803      	ldrb	r3, [r0, #0]
 800769a:	b113      	cbz	r3, 80076a2 <NTC_GetAvTemp_C+0xa>
      wTemp = (wTemp / 65536) + (int32_t)pHandle->hT0;
#endif
    }
    else
    {
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800769c:	8a80      	ldrh	r0, [r0, #20]
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800769e:	b200      	sxth	r0, r0
 80076a0:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80076a2:	8a03      	ldrh	r3, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 80076a4:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 80076a6:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80076aa:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 80076ac:	1a5b      	subs	r3, r3, r1
      wTemp *= pHandle->hSensitivity;
 80076ae:	fb03 f302 	mul.w	r3, r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80076b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 80076b6:	b200      	sxth	r0, r0
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80076bc:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80076be:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80076c0:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80076c2:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80076c4:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 80076c6:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80076c8:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80076ca:	4770      	bx	lr

080076cc <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80076cc:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80076ce:	4770      	bx	lr

080076d0 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80076d0:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80076d2:	4770      	bx	lr

080076d4 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80076d4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80076dc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop

080076e4 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80076e4:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80076e6:	4770      	bx	lr

080076e8 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80076e8:	8b80      	ldrh	r0, [r0, #28]
 80076ea:	4770      	bx	lr

080076ec <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80076ec:	2301      	movs	r3, #1
 80076ee:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80076f0:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80076f2:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop

080076f8 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 80076f8:	8bc0      	ldrh	r0, [r0, #30]
 80076fa:	4770      	bx	lr

080076fc <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80076fc:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80076fe:	4770      	bx	lr

08007700 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8007700:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007702:	4770      	bx	lr

08007704 <PID_SetKIDivisorPOW2>:
{
 8007704:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007706:	2301      	movs	r3, #1
{
 8007708:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800770a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800770c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8007710:	8343      	strh	r3, [r0, #26]
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8007712:	83c4      	strh	r4, [r0, #30]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007714:	40a1      	lsls	r1, r4
{
 8007716:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007718:	f7ff fff2 	bl	8007700 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800771c:	4902      	ldr	r1, [pc, #8]	; (8007728 <PID_SetKIDivisorPOW2+0x24>)
 800771e:	4628      	mov	r0, r5
 8007720:	40a1      	lsls	r1, r4
 8007722:	f7ff ffeb 	bl	80076fc <PID_SetLowerIntegralTermLimit>
}
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	ffff8001 	.word	0xffff8001

0800772c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800772c:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800772e:	4770      	bx	lr

08007730 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8007730:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop

08007738 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8007738:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800773a:	4770      	bx	lr

0800773c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800773c:	2301      	movs	r3, #1
 800773e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007740:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007742:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop

08007748 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007748:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800774c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8007750:	b4f0      	push	{r4, r5, r6, r7}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007752:	fb01 f202 	mul.w	r2, r1, r2
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007756:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800775a:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
    if (0 == pHandle->hKiGain)
 800775e:	b18b      	cbz	r3, 8007784 <PI_Controller+0x3c>
 8007760:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007764:	fb01 f103 	mul.w	r1, r1, r3
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

      if (wIntegral_sum_temp < 0)
 8007768:	187b      	adds	r3, r7, r1
 800776a:	d424      	bmi.n	80077b6 <PI_Controller+0x6e>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 800776c:	2f00      	cmp	r7, #0
 800776e:	da04      	bge.n	800777a <PI_Controller+0x32>
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 8007770:	4f16      	ldr	r7, [pc, #88]	; (80077cc <PI_Controller+0x84>)
 8007772:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8007776:	bf28      	it	cs
 8007778:	463b      	movcs	r3, r7
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800777a:	42a3      	cmp	r3, r4
 800777c:	dc03      	bgt.n	8007786 <PI_Controller+0x3e>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800777e:	6904      	ldr	r4, [r0, #16]
 8007780:	429c      	cmp	r4, r3
 8007782:	dc00      	bgt.n	8007786 <PI_Controller+0x3e>
 8007784:	461c      	mov	r4, r3
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8007786:	8b81      	ldrh	r1, [r0, #28]
 8007788:	8bc3      	ldrh	r3, [r0, #30]
 800778a:	410a      	asrs	r2, r1
 800778c:	fa44 f303 	asr.w	r3, r4, r3
 8007790:	4413      	add	r3, r2
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8007792:	429d      	cmp	r5, r3
 8007794:	db08      	blt.n	80077a8 <PI_Controller+0x60>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
      wOutput_32 = hUpperOutputLimit;
    }
    else if (wOutput_32 < hLowerOutputLimit)
 8007796:	429e      	cmp	r6, r3
 8007798:	dd02      	ble.n	80077a0 <PI_Controller+0x58>
    {
      wDischarge = hLowerOutputLimit - wOutput_32;
 800779a:	1af3      	subs	r3, r6, r3
 800779c:	441c      	add	r4, r3
 800779e:	4633      	mov	r3, r6
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80077a0:	6084      	str	r4, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 80077a2:	b218      	sxth	r0, r3
}
 80077a4:	bcf0      	pop	{r4, r5, r6, r7}
 80077a6:	4770      	bx	lr
      wDischarge = hUpperOutputLimit - wOutput_32;
 80077a8:	1aeb      	subs	r3, r5, r3
 80077aa:	441c      	add	r4, r3
 80077ac:	462b      	mov	r3, r5
    pHandle->wIntegralTerm += wDischarge;
 80077ae:	6084      	str	r4, [r0, #8]
  return (returnValue);
 80077b0:	b218      	sxth	r0, r3
}
 80077b2:	bcf0      	pop	{r4, r5, r6, r7}
 80077b4:	4770      	bx	lr
        if (pHandle->wIntegralTerm > 0)
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	dddf      	ble.n	800777a <PI_Controller+0x32>
          if (wIntegral_Term > 0)
 80077ba:	2900      	cmp	r1, #0
 80077bc:	dddd      	ble.n	800777a <PI_Controller+0x32>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80077be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80077c2:	429c      	cmp	r4, r3
 80077c4:	d1df      	bne.n	8007786 <PI_Controller+0x3e>
            wIntegral_sum_temp = INT32_MAX;
 80077c6:	4623      	mov	r3, r4
 80077c8:	e7dc      	b.n	8007784 <PI_Controller+0x3c>
 80077ca:	bf00      	nop
 80077cc:	80000001 	.word	0x80000001

080077d0 <PID_Controller>:
#endif
    int32_t wDifferential_Term;
    int32_t wDeltaError;
    int32_t wTemp_output;

    if (0 == pHandle->hKdGain) /* derivative terms not used */
 80077d0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
{
 80077d4:	b570      	push	{r4, r5, r6, lr}
    if (0 == pHandle->hKdGain) /* derivative terms not used */
 80077d6:	b1b3      	cbz	r3, 8007806 <PID_Controller+0x36>
    {
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
    }
    else
    {
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 80077d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
      /* WARNING: the below instruction is not MISRA compliant, user should verify
         that Cortex-M3 assembly instruction ASR (arithmetic shift right)
         is used by the compiler to perform the shifts (instead of LSR
         logical shift right)*/
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 80077da:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80077dc:	4605      	mov	r5, r0
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 80077de:	1b0c      	subs	r4, r1, r4
      wDifferential_Term = pHandle->hKdGain * wDeltaError;
 80077e0:	fb03 f304 	mul.w	r3, r3, r4
#else
      wDifferential_Term /= ((int32_t)pHandle->hKdDivisor);
#endif

      pHandle->wPrevProcessVarError = wProcessVarError;
 80077e4:	62a9      	str	r1, [r5, #40]	; 0x28
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 80077e6:	fa43 f606 	asr.w	r6, r3, r6

      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 80077ea:	f7ff ffad 	bl	8007748 <PI_Controller>

      if (wTemp_output > pHandle->hUpperOutputLimit)
 80077ee:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 80077f2:	4430      	add	r0, r6
      if (wTemp_output > pHandle->hUpperOutputLimit)
 80077f4:	4283      	cmp	r3, r0
 80077f6:	db04      	blt.n	8007802 <PID_Controller+0x32>
      {
        wTemp_output = pHandle->hUpperOutputLimit;
      }
      else if (wTemp_output < pHandle->hLowerOutputLimit)
 80077f8:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80077fc:	4283      	cmp	r3, r0
 80077fe:	bfb8      	it	lt
 8007800:	4603      	movlt	r3, r0
    returnValue = (int16_t) wTemp_output;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8007802:	b218      	sxth	r0, r3
 8007804:	bd70      	pop	{r4, r5, r6, pc}
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
 8007806:	f7ff ff9f 	bl	8007748 <PI_Controller>
 800780a:	4603      	mov	r3, r0
}
 800780c:	b218      	sxth	r0, r3
 800780e:	bd70      	pop	{r4, r5, r6, pc}

08007810 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007810:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007812:	6884      	ldr	r4, [r0, #8]

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
    wAux /= 65536;

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8007814:	f9b0 1000 	ldrsh.w	r1, [r0]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007818:	8b25      	ldrh	r5, [r4, #24]
 800781a:	89e3      	ldrh	r3, [r4, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800781c:	89a2      	ldrh	r2, [r4, #12]
 800781e:	8ae4      	ldrh	r4, [r4, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007820:	fb13 f305 	smulbb	r3, r3, r5
    wAux /= 65536;
 8007824:	fb12 3304 	smlabb	r3, r2, r4, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfbc      	itt	lt
 800782c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007830:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8007832:	ebc1 4323 	rsb	r3, r1, r3, asr #16
 8007836:	eb01 1323 	add.w	r3, r1, r3, asr #4
 800783a:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 800783c:	bc30      	pop	{r4, r5}
 800783e:	4770      	bx	lr

08007840 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop

08007848 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4605      	mov	r5, r0
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800784c:	68c0      	ldr	r0, [r0, #12]
 800784e:	f9b5 4000 	ldrsh.w	r4, [r5]
 8007852:	f7ff fadb 	bl	8006e0c <VBS_GetAvBusVoltage_V>
 8007856:	fb04 f000 	mul.w	r0, r4, r0
 800785a:	ee07 0a90 	vmov	s15, r0
 800785e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007862:	edd5 7a01 	vldr	s15, [r5, #4]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8007866:	ee20 0a27 	vmul.f32	s0, s0, s15
 800786a:	bd38      	pop	{r3, r4, r5, pc}

0800786c <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800786c:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800786e:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <startTimers+0x64>)
 8007870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007872:	07d2      	lsls	r2, r2, #31
 8007874:	b082      	sub	sp, #8
 8007876:	d415      	bmi.n	80078a4 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007882:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007886:	f002 0201 	and.w	r2, r2, #1
 800788a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800788c:	9a01      	ldr	r2, [sp, #4]
 800788e:	694a      	ldr	r2, [r1, #20]
 8007890:	f042 0201 	orr.w	r2, r2, #1
 8007894:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8007896:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800789e:	b002      	add	sp, #8
 80078a0:	bc30      	pop	{r4, r5}
 80078a2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80078a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80078a8:	4c0a      	ldr	r4, [pc, #40]	; (80078d4 <startTimers+0x68>)
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	6859      	ldr	r1, [r3, #4]
 80078ae:	4d0a      	ldr	r5, [pc, #40]	; (80078d8 <startTimers+0x6c>)
 80078b0:	4021      	ands	r1, r4
 80078b2:	f041 0120 	orr.w	r1, r1, #32
 80078b6:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80078b8:	6958      	ldr	r0, [r3, #20]
 80078ba:	f040 0001 	orr.w	r0, r0, #1
 80078be:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	402a      	ands	r2, r5
 80078c4:	4021      	ands	r1, r4
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
}
 80078ca:	b002      	add	sp, #8
 80078cc:	bc30      	pop	{r4, r5}
 80078ce:	4770      	bx	lr
 80078d0:	40021000 	.word	0x40021000
 80078d4:	fdffff8f 	.word	0xfdffff8f
 80078d8:	02000070 	.word	0x02000070

080078dc <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80078dc:	3201      	adds	r2, #1
{
 80078de:	b470      	push	{r4, r5, r6}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80078e0:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80078e2:	f06f 0602 	mvn.w	r6, #2
 80078e6:	0154      	lsls	r4, r2, #5
 80078e8:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80078ea:	2500      	movs	r5, #0
    while (*cnt < NB_CONVERSIONS)
 80078ec:	e002      	b.n	80078f4 <waitForPolarizationEnd+0x18>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80078ee:	6902      	ldr	r2, [r0, #16]
 80078f0:	0792      	lsls	r2, r2, #30
 80078f2:	d404      	bmi.n	80078fe <waitForPolarizationEnd+0x22>
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	2a0f      	cmp	r2, #15
 80078f8:	d9f9      	bls.n	80078ee <waitForPolarizationEnd+0x12>
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 80078fa:	bc70      	pop	{r4, r5, r6}
 80078fc:	4770      	bx	lr
        hCalibrationPeriodCounter++;
 80078fe:	3501      	adds	r5, #1
 8007900:	b2ad      	uxth	r5, r5
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007902:	42ac      	cmp	r4, r5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007904:	6106      	str	r6, [r0, #16]
 8007906:	d8f5      	bhi.n	80078f4 <waitForPolarizationEnd+0x18>
          if (*cnt < NB_CONVERSIONS)
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	2a0f      	cmp	r2, #15
 800790c:	d8f2      	bhi.n	80078f4 <waitForPolarizationEnd+0x18>
            *SWerror = 1u;
 800790e:	2301      	movs	r3, #1
 8007910:	800b      	strh	r3, [r1, #0]
            break;
 8007912:	e7f2      	b.n	80078fa <waitForPolarizationEnd+0x1e>

08007914 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007914:	6883      	ldr	r3, [r0, #8]
 8007916:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800791a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800791e:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007920:	6883      	ldr	r3, [r0, #8]
 8007922:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8007924:	b082      	sub	sp, #8
 8007926:	d418      	bmi.n	800795a <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8007928:	4b24      	ldr	r3, [pc, #144]	; (80079bc <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800792a:	6882      	ldr	r2, [r0, #8]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4924      	ldr	r1, [pc, #144]	; (80079c0 <R3_2_ADCxInit+0xac>)
 8007930:	099b      	lsrs	r3, r3, #6
 8007932:	fba1 1303 	umull	r1, r3, r1, r3
 8007936:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800793a:	099b      	lsrs	r3, r3, #6
 800793c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007946:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8007948:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800794a:	9b01      	ldr	r3, [sp, #4]
 800794c:	b12b      	cbz	r3, 800795a <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	3b01      	subs	r3, #1
 8007952:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f9      	bne.n	800794e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800795a:	6883      	ldr	r3, [r0, #8]
 800795c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007968:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800796a:	6883      	ldr	r3, [r0, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	dbfc      	blt.n	800796a <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007970:	6803      	ldr	r3, [r0, #0]
 8007972:	07da      	lsls	r2, r3, #31
 8007974:	d408      	bmi.n	8007988 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8007976:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <R3_2_ADCxInit+0xb0>)
 8007978:	6883      	ldr	r3, [r0, #8]
 800797a:	4013      	ands	r3, r2
 800797c:	f043 0301 	orr.w	r3, r3, #1
 8007980:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007982:	6803      	ldr	r3, [r0, #0]
 8007984:	07db      	lsls	r3, r3, #31
 8007986:	d5f7      	bpl.n	8007978 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8007988:	6882      	ldr	r2, [r0, #8]
 800798a:	490e      	ldr	r1, [pc, #56]	; (80079c4 <R3_2_ADCxInit+0xb0>)
 800798c:	400a      	ands	r2, r1
 800798e:	f042 0208 	orr.w	r2, r2, #8
 8007992:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007994:	6882      	ldr	r2, [r0, #8]
 8007996:	400a      	ands	r2, r1
 8007998:	f042 0220 	orr.w	r2, r2, #32
 800799c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800799e:	68c3      	ldr	r3, [r0, #12]
 80079a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079ac:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 80079ae:	6883      	ldr	r3, [r0, #8]
 80079b0:	400b      	ands	r3, r1
 80079b2:	f043 0304 	orr.w	r3, r3, #4
 80079b6:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 80079b8:	b002      	add	sp, #8
 80079ba:	4770      	bx	lr
 80079bc:	200004d8 	.word	0x200004d8
 80079c0:	053e2d63 	.word	0x053e2d63
 80079c4:	7fffffc0 	.word	0x7fffffc0

080079c8 <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d042      	beq.n	8007a52 <R3_2_GetPhaseCurrents+0x8a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80079cc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 80079d0:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
{
 80079d4:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80079d6:	689c      	ldr	r4, [r3, #8]
 80079d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80079dc:	2a05      	cmp	r2, #5
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80079de:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80079e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80079e2:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80079e6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	d910      	bls.n	8007a1a <R3_2_GetPhaseCurrents+0x52>
 80079f8:	f9b1 6000 	ldrsh.w	r6, [r1]
 80079fc:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8007a00:	b2b3      	uxth	r3, r6
 8007a02:	fa1f f28c 	uxth.w	r2, ip
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007a06:	4413      	add	r3, r2
 8007a08:	425b      	negs	r3, r3
    pHandle->_Super.Ia = Iab->a;
 8007a0a:	f8a0 6050 	strh.w	r6, [r0, #80]	; 0x50
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007a0e:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    pHandle->_Super.Ib = Iab->b;
 8007a12:	f8a0 c052 	strh.w	ip, [r0, #82]	; 0x52
  }
}
 8007a16:	bcf0      	pop	{r4, r5, r6, r7}
 8007a18:	4770      	bx	lr
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	fa03 f202 	lsl.w	r2, r3, r2
 8007a20:	f012 0f21 	tst.w	r2, #33	; 0x21
 8007a24:	d016      	beq.n	8007a54 <R3_2_GetPhaseCurrents+0x8c>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007a26:	6f44      	ldr	r4, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8007a28:	4b4b      	ldr	r3, [pc, #300]	; (8007b58 <R3_2_GetPhaseCurrents+0x190>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007a2a:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	da37      	bge.n	8007aa0 <R3_2_GetPhaseCurrents+0xd8>
 8007a30:	461c      	mov	r4, r3
          Iab->b = -INT16_MAX;
 8007a32:	804b      	strh	r3, [r1, #2]
 8007a34:	469c      	mov	ip, r3
 8007a36:	f248 0201 	movw	r2, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007a3a:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8007a3c:	1b7d      	subs	r5, r7, r5
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8007a3e:	1b2c      	subs	r4, r5, r4
        if (Aux > INT16_MAX)
 8007a40:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007a44:	db25      	blt.n	8007a92 <R3_2_GetPhaseCurrents+0xca>
          Iab->a = INT16_MAX;
 8007a46:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	800c      	strh	r4, [r1, #0]
 8007a4e:	4626      	mov	r6, r4
 8007a50:	e7d9      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
 8007a52:	4770      	bx	lr
 8007a54:	f012 0f06 	tst.w	r2, #6
 8007a58:	d12c      	bne.n	8007ab4 <R3_2_GetPhaseCurrents+0xec>
 8007a5a:	f012 0f18 	tst.w	r2, #24
 8007a5e:	d0cb      	beq.n	80079f8 <R3_2_GetPhaseCurrents+0x30>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007a60:	6f04      	ldr	r4, [r0, #112]	; 0x70
        if (Aux < -INT16_MAX)
 8007a62:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007a66:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	db04      	blt.n	8007a76 <R3_2_GetPhaseCurrents+0xae>
        else  if (Aux > INT16_MAX)
 8007a6c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007a70:	db67      	blt.n	8007b42 <R3_2_GetPhaseCurrents+0x17a>
          Iab->a = INT16_MAX;
 8007a72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007a76:	800b      	strh	r3, [r1, #0]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007a78:	6f42      	ldr	r2, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8007a7a:	4b37      	ldr	r3, [pc, #220]	; (8007b58 <R3_2_GetPhaseCurrents+0x190>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007a7c:	1bd2      	subs	r2, r2, r7
        if (Aux < -INT16_MAX)
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	da4e      	bge.n	8007b20 <R3_2_GetPhaseCurrents+0x158>
 8007a82:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = -INT16_MAX;
 8007a86:	804b      	strh	r3, [r1, #2]
 8007a88:	469c      	mov	ip, r3
 8007a8a:	f248 0201 	movw	r2, #32769	; 0x8001
 8007a8e:	b2b3      	uxth	r3, r6
 8007a90:	e7b9      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
        else  if (Aux < -INT16_MAX)
 8007a92:	4e31      	ldr	r6, [pc, #196]	; (8007b58 <R3_2_GetPhaseCurrents+0x190>)
 8007a94:	42b4      	cmp	r4, r6
 8007a96:	da33      	bge.n	8007b00 <R3_2_GetPhaseCurrents+0x138>
          Iab->a = -INT16_MAX;
 8007a98:	800e      	strh	r6, [r1, #0]
 8007a9a:	f248 0301 	movw	r3, #32769	; 0x8001
 8007a9e:	e7b2      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
        else  if (Aux > INT16_MAX)
 8007aa0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007aa4:	db26      	blt.n	8007af4 <R3_2_GetPhaseCurrents+0x12c>
          Iab->b = INT16_MAX;
 8007aa6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007aaa:	461a      	mov	r2, r3
 8007aac:	804b      	strh	r3, [r1, #2]
 8007aae:	461c      	mov	r4, r3
 8007ab0:	469c      	mov	ip, r3
 8007ab2:	e7c2      	b.n	8007a3a <R3_2_GetPhaseCurrents+0x72>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007ab4:	6f04      	ldr	r4, [r0, #112]	; 0x70
        if (Aux < -INT16_MAX)
 8007ab6:	4b28      	ldr	r3, [pc, #160]	; (8007b58 <R3_2_GetPhaseCurrents+0x190>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007ab8:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	db14      	blt.n	8007ae8 <R3_2_GetPhaseCurrents+0x120>
        else  if (Aux > INT16_MAX)
 8007abe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007ac2:	db29      	blt.n	8007b18 <R3_2_GetPhaseCurrents+0x150>
          Iab->a = INT16_MAX;
 8007ac4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007ac8:	4613      	mov	r3, r2
 8007aca:	800a      	strh	r2, [r1, #0]
 8007acc:	4614      	mov	r4, r2
 8007ace:	4616      	mov	r6, r2
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007ad0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007ad2:	1aba      	subs	r2, r7, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8007ad4:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8007ad6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007ada:	db15      	blt.n	8007b08 <R3_2_GetPhaseCurrents+0x140>
          Iab->b = INT16_MAX;
 8007adc:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	804c      	strh	r4, [r1, #2]
 8007ae4:	46a4      	mov	ip, r4
 8007ae6:	e78e      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
 8007ae8:	461c      	mov	r4, r3
          Iab->a = -INT16_MAX;
 8007aea:	800b      	strh	r3, [r1, #0]
 8007aec:	461e      	mov	r6, r3
 8007aee:	f248 0301 	movw	r3, #32769	; 0x8001
 8007af2:	e7ed      	b.n	8007ad0 <R3_2_GetPhaseCurrents+0x108>
          Iab->b = (int16_t)Aux;
 8007af4:	fa0f fc84 	sxth.w	ip, r4
 8007af8:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007afc:	b2a2      	uxth	r2, r4
 8007afe:	e79c      	b.n	8007a3a <R3_2_GetPhaseCurrents+0x72>
          Iab->a = (int16_t)Aux;
 8007b00:	b226      	sxth	r6, r4
 8007b02:	800e      	strh	r6, [r1, #0]
 8007b04:	b2a3      	uxth	r3, r4
 8007b06:	e77e      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
        else  if (Aux < -INT16_MAX)
 8007b08:	4c13      	ldr	r4, [pc, #76]	; (8007b58 <R3_2_GetPhaseCurrents+0x190>)
 8007b0a:	42a2      	cmp	r2, r4
 8007b0c:	da13      	bge.n	8007b36 <R3_2_GetPhaseCurrents+0x16e>
          Iab->b = -INT16_MAX;
 8007b0e:	804c      	strh	r4, [r1, #2]
 8007b10:	46a4      	mov	ip, r4
 8007b12:	f248 0201 	movw	r2, #32769	; 0x8001
 8007b16:	e776      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
          Iab->a = (int16_t)Aux;
 8007b18:	b226      	sxth	r6, r4
 8007b1a:	800e      	strh	r6, [r1, #0]
 8007b1c:	b2a3      	uxth	r3, r4
 8007b1e:	e7d7      	b.n	8007ad0 <R3_2_GetPhaseCurrents+0x108>
        else  if (Aux > INT16_MAX)
 8007b20:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b24:	db0f      	blt.n	8007b46 <R3_2_GetPhaseCurrents+0x17e>
 8007b26:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = INT16_MAX;
 8007b2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007b2e:	804a      	strh	r2, [r1, #2]
 8007b30:	4694      	mov	ip, r2
 8007b32:	b2b3      	uxth	r3, r6
 8007b34:	e767      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
          Iab->b = (int16_t)Aux;
 8007b36:	fa0f fc82 	sxth.w	ip, r2
 8007b3a:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007b3e:	b292      	uxth	r2, r2
 8007b40:	e761      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
          Iab->a = (int16_t)Aux;
 8007b42:	800c      	strh	r4, [r1, #0]
 8007b44:	e798      	b.n	8007a78 <R3_2_GetPhaseCurrents+0xb0>
 8007b46:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = (int16_t)Aux;
 8007b4a:	fa0f fc82 	sxth.w	ip, r2
 8007b4e:	b2b3      	uxth	r3, r6
 8007b50:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007b54:	b292      	uxth	r2, r2
 8007b56:	e756      	b.n	8007a06 <R3_2_GetPhaseCurrents+0x3e>
 8007b58:	ffff8001 	.word	0xffff8001

08007b5c <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8007b5c:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b5e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007b62:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8007b66:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007b6a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b6e:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007b70:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b72:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007b74:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007b76:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007b7a:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b7e:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007b80:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b82:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007b86:	4904      	ldr	r1, [pc, #16]	; (8007b98 <R3_2_SetADCSampPointPolarization+0x3c>)
 8007b88:	685b      	ldr	r3, [r3, #4]
}
 8007b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007b8e:	420b      	tst	r3, r1
}
 8007b90:	bf14      	ite	ne
 8007b92:	2001      	movne	r0, #1
 8007b94:	2000      	moveq	r0, #0
 8007b96:	4770      	bx	lr
 8007b98:	02000070 	.word	0x02000070

08007b9c <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007b9c:	b339      	cbz	r1, 8007bee <R3_2_HFCurrentsPolarizationAB+0x52>
{
 8007b9e:	b470      	push	{r4, r5, r6}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007ba0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007ba4:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8007bae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8007bb2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007bb6:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007bba:	6853      	ldr	r3, [r2, #4]
 8007bbc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc4:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007bc6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007bca:	2b0f      	cmp	r3, #15
 8007bcc:	d80b      	bhi.n	8007be6 <R3_2_HFCurrentsPolarizationAB+0x4a>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007bce:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 8007bd2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007bd6:	4434      	add	r4, r6
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007bd8:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8007bda:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007bdc:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	600b      	str	r3, [r1, #0]
    Iab->b = 0;
  }
}
 8007bea:	bc70      	pop	{r4, r5, r6}
 8007bec:	4770      	bx	lr
 8007bee:	4770      	bx	lr

08007bf0 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007bf0:	b311      	cbz	r1, 8007c38 <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007bf2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8007bf6:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007bf8:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007bfc:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007bfe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c04:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007c08:	6853      	ldr	r3, [r2, #4]
 8007c0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c12:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007c14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007c18:	2b0f      	cmp	r3, #15
 8007c1a:	d808      	bhi.n	8007c2e <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8007c1c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007c20:	6f82      	ldr	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8007c22:	3301      	adds	r3, #1
 8007c24:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007c26:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8007c28:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007c2c:	6782      	str	r2, [r0, #120]	; 0x78
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	600b      	str	r3, [r1, #0]
    Iab->b = 0;
  }
}
 8007c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 8007c3c:	b470      	push	{r4, r5, r6}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007c3e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8007c42:	68a3      	ldr	r3, [r4, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007c44:	2501      	movs	r5, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c46:	f06f 0201 	mvn.w	r2, #1
 8007c4a:	f880 506b 	strb.w	r5, [r0, #107]	; 0x6b
 8007c4e:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c50:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c52:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c54:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	07d2      	lsls	r2, r2, #31
 8007c5a:	d5fc      	bpl.n	8007c56 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8007c5e:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
 8007c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c66:	2902      	cmp	r1, #2
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44
 8007c6a:	d10b      	bne.n	8007c84 <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007c6c:	e9d4 5108 	ldrd	r5, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007c72:	f8b4 60ac 	ldrh.w	r6, [r4, #172]	; 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007c76:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007c7a:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007c7e:	61ae      	str	r6, [r5, #24]
 8007c80:	6188      	str	r0, [r1, #24]
 8007c82:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 8007c84:	bc70      	pop	{r4, r5, r6}
 8007c86:	4770      	bx	lr

08007c88 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007c88:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007c8c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007c90:	688b      	ldr	r3, [r1, #8]
{
 8007c92:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked = true;
 8007c94:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007c96:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked = true;
 8007c98:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007c9c:	f880 506b 	strb.w	r5, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007ca0:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ca4:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8007ca8:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007caa:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007cac:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007cae:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007cb2:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	07d2      	lsls	r2, r2, #31
 8007cb8:	d5fc      	bpl.n	8007cb4 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007cba:	f06f 0201 	mvn.w	r2, #1
 8007cbe:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8007cc2:	f891 00c0 	ldrb.w	r0, [r1, #192]	; 0xc0
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007cc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cca:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8007cce:	2802      	cmp	r0, #2
 8007cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cd4:	645a      	str	r2, [r3, #68]	; 0x44
 8007cd6:	d008      	beq.n	8007cea <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007cd8:	f06f 0201 	mvn.w	r2, #1
 8007cdc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8007ce6:	bcf0      	pop	{r4, r5, r6, r7}
 8007ce8:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8007cea:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8007cee:	6a0d      	ldr	r5, [r1, #32]
 8007cf0:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
 8007cf4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8007cf6:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8007cfa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007cfc:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007d00:	f240 5755 	movw	r7, #1365	; 0x555
 8007d04:	ea1c 0f07 	tst.w	ip, r7
 8007d08:	d103      	bne.n	8007d12 <R3_2_SwitchOnPWM+0x8a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007d0a:	62ae      	str	r6, [r5, #40]	; 0x28
 8007d0c:	6284      	str	r4, [r0, #40]	; 0x28
 8007d0e:	6291      	str	r1, [r2, #40]	; 0x28
 8007d10:	e7e2      	b.n	8007cd8 <R3_2_SwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007d12:	61ae      	str	r6, [r5, #24]
 8007d14:	6184      	str	r4, [r0, #24]
 8007d16:	6191      	str	r1, [r2, #24]
 8007d18:	e7de      	b.n	8007cd8 <R3_2_SwitchOnPWM+0x50>
 8007d1a:	bf00      	nop

08007d1c <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d1c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8007d20:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	f022 0201 	bic.w	r2, r2, #1
{
 8007d28:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 8007d2a:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 8007d2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007d32:	2500      	movs	r5, #0
 8007d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d38:	f880 506b 	strb.w	r5, [r0, #107]	; 0x6b
 8007d3c:	645a      	str	r2, [r3, #68]	; 0x44
  if (true == pHandle->BrakeActionLock)
 8007d3e:	b91c      	cbnz	r4, 8007d48 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8007d40:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8007d44:	2a02      	cmp	r2, #2
 8007d46:	d00d      	beq.n	8007d64 <R3_2_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d48:	f06f 0201 	mvn.w	r2, #1
 8007d4c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	07d2      	lsls	r2, r2, #31
 8007d52:	d5fc      	bpl.n	8007d4e <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d54:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8007d58:	2200      	movs	r2, #0
 8007d5a:	6119      	str	r1, [r3, #16]
}
 8007d5c:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 8007d5e:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
}
 8007d62:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007d64:	e9d1 2408 	ldrd	r2, r4, [r1, #32]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007d68:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8007d6c:	6295      	str	r5, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007d6e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007d70:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007d74:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007d78:	62a5      	str	r5, [r4, #40]	; 0x28
 8007d7a:	6291      	str	r1, [r2, #40]	; 0x28
 8007d7c:	e7e4      	b.n	8007d48 <R3_2_SwitchOffPWM+0x2c>
 8007d7e:	bf00      	nop

08007d80 <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 8007d80:	b319      	cbz	r1, 8007dca <R3_2_RLGetPhaseCurrents+0x4a>
{
 8007d82:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d84:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8007d88:	6f43      	ldr	r3, [r0, #116]	; 0x74
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d8a:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007d8c:	686a      	ldr	r2, [r5, #4]
 8007d8e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007d92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d96:	606a      	str	r2, [r5, #4]
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8007d98:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a

    /* Check saturation */
    if (wAux > -INT16_MAX)
 8007d9c:	4a0e      	ldr	r2, [pc, #56]	; (8007dd8 <R3_2_RLGetPhaseCurrents+0x58>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8007d9e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007da2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007da4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007da8:	1a1b      	subs	r3, r3, r0
    if (wAux > -INT16_MAX)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	da04      	bge.n	8007db8 <R3_2_RLGetPhaseCurrents+0x38>
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <R3_2_RLGetPhaseCurrents+0x5c>)
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8007db0:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 8007db2:	804b      	strh	r3, [r1, #2]
  }
}
 8007db4:	bc30      	pop	{r4, r5}
 8007db6:	4770      	bx	lr
      if (wAux < INT16_MAX)
 8007db8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	dc05      	bgt.n	8007dcc <R3_2_RLGetPhaseCurrents+0x4c>
 8007dc0:	b21b      	sxth	r3, r3
    pStator_Currents->a = (int16_t)wAux;
 8007dc2:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 8007dc4:	804b      	strh	r3, [r1, #2]
}
 8007dc6:	bc30      	pop	{r4, r5}
 8007dc8:	4770      	bx	lr
 8007dca:	4770      	bx	lr
 8007dcc:	f647 73ff 	movw	r3, #32767	; 0x7fff
    pStator_Currents->a = (int16_t)wAux;
 8007dd0:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 8007dd2:	804b      	strh	r3, [r1, #2]
}
 8007dd4:	bc30      	pop	{r4, r5}
 8007dd6:	4770      	bx	lr
 8007dd8:	ffff8002 	.word	0xffff8002
 8007ddc:	ffff8001 	.word	0xffff8001

08007de0 <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007de0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked = true;
 8007de4:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007de6:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked = true;
 8007de8:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007dec:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007dee:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007df2:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007df4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007df6:	6913      	ldr	r3, [r2, #16]
 8007df8:	07db      	lsls	r3, r3, #31
 8007dfa:	d5fc      	bpl.n	8007df6 <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007dfc:	6c53      	ldr	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8007dfe:	f891 00c0 	ldrb.w	r0, [r1, #192]	; 0xc0
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e06:	2802      	cmp	r0, #2
 8007e08:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0a:	d000      	beq.n	8007e0e <R3_2_RLTurnOnLowSides+0x2e>
 8007e0c:	4770      	bx	lr
{
 8007e0e:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007e10:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007e14:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007e16:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007e1a:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007e1e:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007e22:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007e24:	6284      	str	r4, [r0, #40]	; 0x28
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8007e28:	bc70      	pop	{r4, r5, r6}
 8007e2a:	4770      	bx	lr

08007e2c <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d054      	beq.n	8007eda <R3_2_RLSwitchOnPWM+0xae>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e30:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8007e34:	688b      	ldr	r3, [r1, #8]
{
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007e3a:	f06f 0201 	mvn.w	r2, #1
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8007e3e:	2601      	movs	r6, #1
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007e40:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 8007e44:	f880 608c 	strb.w	r6, [r0, #140]	; 0x8c
 8007e48:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	07d6      	lsls	r6, r2, #31
 8007e4e:	d5fc      	bpl.n	8007e4a <R3_2_RLSwitchOnPWM+0x1e>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007e50:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007e54:	f06f 0701 	mvn.w	r7, #1
 8007e58:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e5a:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007e5c:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e5e:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	07d2      	lsls	r2, r2, #31
 8007e66:	d5fc      	bpl.n	8007e62 <R3_2_RLSwitchOnPWM+0x36>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007e68:	68da      	ldr	r2, [r3, #12]

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8007e6a:	f891 60c0 	ldrb.w	r6, [r1, #192]	; 0xc0
 8007e6e:	f042 0201 	orr.w	r2, r2, #1
 8007e72:	60da      	str	r2, [r3, #12]
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e7a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8007e7e:	2e02      	cmp	r6, #2
 8007e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
 8007e86:	d00f      	beq.n	8007ea8 <R3_2_RLSwitchOnPWM+0x7c>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 8007e8e:	68aa      	ldr	r2, [r5, #8]
 8007e90:	4912      	ldr	r1, [pc, #72]	; (8007edc <R3_2_RLSwitchOnPWM+0xb0>)
 8007e92:	400a      	ands	r2, r1
 8007e94:	f042 0208 	orr.w	r2, r2, #8
 8007e98:	60aa      	str	r2, [r5, #8]
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	400b      	ands	r3, r1
 8007e9e:	f043 0308 	orr.w	r3, r3, #8
 8007ea2:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8007ea8:	6a1a      	ldr	r2, [r3, #32]
 8007eaa:	f8d1 e020 	ldr.w	lr, [r1, #32]
 8007eae:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8007eb0:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8007eb2:	f8b1 80ac 	ldrh.w	r8, [r1, #172]	; 0xac
 8007eb6:	f8b1 c0ae 	ldrh.w	ip, [r1, #174]	; 0xae
 8007eba:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007ebe:	f240 5355 	movw	r3, #1365	; 0x555
 8007ec2:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007ec4:	bf15      	itete	ne
 8007ec6:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007eca:	f8ce 8028 	streq.w	r8, [lr, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007ece:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007ed2:	f8c7 c028 	streq.w	ip, [r7, #40]	; 0x28
 8007ed6:	62b1      	str	r1, [r6, #40]	; 0x28
 8007ed8:	e7d6      	b.n	8007e88 <R3_2_RLSwitchOnPWM+0x5c>
 8007eda:	4770      	bx	lr
 8007edc:	7fffffc0 	.word	0x7fffffc0

08007ee0 <R3_2_Init>:
  if (MC_NULL == pHandle)
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f000 81d5 	beq.w	8008290 <R3_2_Init+0x3b0>
{
 8007ee6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007eea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
      if (TIM1 ==  TIMx)
 8007eee:	f8df b32c 	ldr.w	fp, [pc, #812]	; 800821c <R3_2_Init+0x33c>
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 8007ef2:	681d      	ldr	r5, [r3, #0]
    DAC_TypeDef *DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 8007ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007ef6:	686a      	ldr	r2, [r5, #4]
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007ef8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
{
 8007efc:	b091      	sub	sp, #68	; 0x44
 8007efe:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 8007f02:	9101      	str	r1, [sp, #4]
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007f04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f06:	9102      	str	r1, [sp, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007f08:	2704      	movs	r7, #4
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007f0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f0c:	9103      	str	r1, [sp, #12]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007f0e:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8007f12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007f14:	9104      	str	r1, [sp, #16]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8007f16:	e9d3 9804 	ldrd	r9, r8, [r3, #16]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007f1a:	e9d3 ec06 	ldrd	lr, ip, [r3, #24]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007f1e:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007f20:	602f      	str	r7, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007f22:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007f24:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007f26:	f022 0220 	bic.w	r2, r2, #32
 8007f2a:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007f2c:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007f2e:	6872      	ldr	r2, [r6, #4]
 8007f30:	f022 0204 	bic.w	r2, r2, #4
 8007f34:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007f36:	6037      	str	r7, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007f38:	6872      	ldr	r2, [r6, #4]
 8007f3a:	f022 0220 	bic.w	r2, r2, #32
 8007f3e:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007f40:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007f42:	49b3      	ldr	r1, [pc, #716]	; (8008210 <R3_2_Init+0x330>)
 8007f44:	690a      	ldr	r2, [r1, #16]
      if (TIM1 ==  TIMx)
 8007f46:	455c      	cmp	r4, fp
 8007f48:	bf0c      	ite	eq
 8007f4a:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8007f4e:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8007f52:	610a      	str	r2, [r1, #16]
      if (OPAMPParams != NULL)
 8007f54:	f1ba 0f00 	cmp.w	sl, #0
 8007f58:	d011      	beq.n	8007f7e <R3_2_Init+0x9e>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8007f5a:	e9da 7103 	ldrd	r7, r1, [sl, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8007f5e:	683a      	ldr	r2, [r7, #0]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8007f60:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
 8007f64:	f042 0201 	orr.w	r2, r2, #1
 8007f68:	603a      	str	r2, [r7, #0]
 8007f6a:	680a      	ldr	r2, [r1, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	600a      	str	r2, [r1, #0]
 8007f72:	f8da 2000 	ldr.w	r2, [sl]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	f8ca 2000 	str.w	r2, [sl]
      if (COMP_OCPAx != NULL)
 8007f7e:	f1b9 0f00 	cmp.w	r9, #0
 8007f82:	d051      	beq.n	8008028 <R3_2_Init+0x148>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8007f84:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8007f88:	2a01      	cmp	r2, #1
 8007f8a:	d041      	beq.n	8008010 <R3_2_Init+0x130>
 8007f8c:	9a01      	ldr	r2, [sp, #4]
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	d03e      	beq.n	8008010 <R3_2_Init+0x130>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8007f92:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8007f94:	9705      	str	r7, [sp, #20]
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 8007f96:	f8b3 70bc 	ldrh.w	r7, [r3, #188]	; 0xbc
 8007f9a:	4639      	mov	r1, r7
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8007f9c:	9f05      	ldr	r7, [sp, #20]
 8007f9e:	ea4f 4a97 	mov.w	sl, r7, lsr #18
 8007fa2:	f00a 0a3c 	and.w	sl, sl, #60	; 0x3c
 8007fa6:	f102 0708 	add.w	r7, r2, #8
  SET_BIT(DACx->SWTRIGR,
 8007faa:	9a05      	ldr	r2, [sp, #20]
 8007fac:	f002 0b03 	and.w	fp, r2, #3
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007fb0:	f85a 2007 	ldr.w	r2, [sl, r7]
 8007fb4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007fb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	f84a 2007 	str.w	r2, [sl, r7]
  SET_BIT(DACx->SWTRIGR,
 8007fc2:	9f01      	ldr	r7, [sp, #4]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	ea4b 0202 	orr.w	r2, fp, r2
 8007fca:	607a      	str	r2, [r7, #4]
  return ((READ_BIT(DACx->CR,
 8007fcc:	9a05      	ldr	r2, [sp, #20]
 8007fce:	f002 0110 	and.w	r1, r2, #16
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	2701      	movs	r7, #1
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	fa07 f101 	lsl.w	r1, r7, r1
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007fdc:	ea31 0202 	bics.w	r2, r1, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007fe0:	4a8c      	ldr	r2, [pc, #560]	; (8008214 <R3_2_Init+0x334>)
 8007fe2:	f000 8194 	beq.w	800830e <R3_2_Init+0x42e>
  SET_BIT(DACx->CR,
 8007fe6:	9f01      	ldr	r7, [sp, #4]
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8008218 <R3_2_Init+0x338>
 8007fee:	683f      	ldr	r7, [r7, #0]
 8007ff0:	fbaa a202 	umull	sl, r2, sl, r2
 8007ff4:	4339      	orrs	r1, r7
 8007ff6:	0cd2      	lsrs	r2, r2, #19
 8007ff8:	9f01      	ldr	r7, [sp, #4]
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	6039      	str	r1, [r7, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8007ffe:	9207      	str	r2, [sp, #28]
    while (wait_loop_index != 0UL)
 8008000:	9a07      	ldr	r2, [sp, #28]
 8008002:	b12a      	cbz	r2, 8008010 <R3_2_Init+0x130>
      wait_loop_index--;
 8008004:	9a07      	ldr	r2, [sp, #28]
 8008006:	3a01      	subs	r2, #1
 8008008:	9207      	str	r2, [sp, #28]
    while (wait_loop_index != 0UL)
 800800a:	9a07      	ldr	r2, [sp, #28]
 800800c:	2a00      	cmp	r2, #0
 800800e:	d1f9      	bne.n	8008004 <R3_2_Init+0x124>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008010:	f8d9 2000 	ldr.w	r2, [r9]
 8008014:	f042 0201 	orr.w	r2, r2, #1
 8008018:	f8c9 2000 	str.w	r2, [r9]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800801c:	f8d9 2000 	ldr.w	r2, [r9]
 8008020:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008024:	f8c9 2000 	str.w	r2, [r9]
      if (COMP_OCPBx != NULL)
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d04c      	beq.n	80080c8 <R3_2_Init+0x1e8>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800802e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8008032:	2a01      	cmp	r2, #1
 8008034:	d03c      	beq.n	80080b0 <R3_2_Init+0x1d0>
 8008036:	9f02      	ldr	r7, [sp, #8]
 8008038:	2f00      	cmp	r7, #0
 800803a:	d039      	beq.n	80080b0 <R3_2_Init+0x1d0>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800803c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 800803e:	f8b3 b0bc 	ldrh.w	fp, [r3, #188]	; 0xbc
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008042:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8008046:	3708      	adds	r7, #8
 8008048:	f009 093c 	and.w	r9, r9, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 800804c:	f002 0a03 	and.w	sl, r2, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008050:	f859 1007 	ldr.w	r1, [r9, r7]
 8008054:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8008058:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800805c:	ea4b 0101 	orr.w	r1, fp, r1
 8008060:	f849 1007 	str.w	r1, [r9, r7]
  SET_BIT(DACx->SWTRIGR,
 8008064:	9f02      	ldr	r7, [sp, #8]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	ea4a 0101 	orr.w	r1, sl, r1
 800806c:	6079      	str	r1, [r7, #4]
  return ((READ_BIT(DACx->CR,
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	f002 0210 	and.w	r2, r2, #16
 8008074:	2701      	movs	r7, #1
 8008076:	6809      	ldr	r1, [r1, #0]
 8008078:	fa07 f202 	lsl.w	r2, r7, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800807c:	ea32 0101 	bics.w	r1, r2, r1
 8008080:	f000 8158 	beq.w	8008334 <R3_2_Init+0x454>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008084:	4963      	ldr	r1, [pc, #396]	; (8008214 <R3_2_Init+0x334>)
  SET_BIT(DACx->CR,
 8008086:	9f02      	ldr	r7, [sp, #8]
 8008088:	6809      	ldr	r1, [r1, #0]
 800808a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8008218 <R3_2_Init+0x338>
 800808e:	683f      	ldr	r7, [r7, #0]
 8008090:	fba9 9101 	umull	r9, r1, r9, r1
 8008094:	433a      	orrs	r2, r7
 8008096:	0cc9      	lsrs	r1, r1, #19
 8008098:	9f02      	ldr	r7, [sp, #8]
 800809a:	00c9      	lsls	r1, r1, #3
 800809c:	603a      	str	r2, [r7, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800809e:	9109      	str	r1, [sp, #36]	; 0x24
    while (wait_loop_index != 0UL)
 80080a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a2:	b12a      	cbz	r2, 80080b0 <R3_2_Init+0x1d0>
      wait_loop_index--;
 80080a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a6:	3a01      	subs	r2, #1
 80080a8:	9209      	str	r2, [sp, #36]	; 0x24
    while (wait_loop_index != 0UL)
 80080aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ac:	2a00      	cmp	r2, #0
 80080ae:	d1f9      	bne.n	80080a4 <R3_2_Init+0x1c4>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80080b0:	f8d8 2000 	ldr.w	r2, [r8]
 80080b4:	f042 0201 	orr.w	r2, r2, #1
 80080b8:	f8c8 2000 	str.w	r2, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80080bc:	f8d8 2000 	ldr.w	r2, [r8]
 80080c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80080c4:	f8c8 2000 	str.w	r2, [r8]
      if (COMP_OCPCx != NULL)
 80080c8:	f1be 0f00 	cmp.w	lr, #0
 80080cc:	d04c      	beq.n	8008168 <R3_2_Init+0x288>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 80080ce:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80080d2:	2a01      	cmp	r2, #1
 80080d4:	d03c      	beq.n	8008150 <R3_2_Init+0x270>
 80080d6:	9f03      	ldr	r7, [sp, #12]
 80080d8:	2f00      	cmp	r7, #0
 80080da:	d039      	beq.n	8008150 <R3_2_Init+0x270>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 80080dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 80080de:	f8b3 a0bc 	ldrh.w	sl, [r3, #188]	; 0xbc
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80080e2:	ea4f 4892 	mov.w	r8, r2, lsr #18
 80080e6:	3708      	adds	r7, #8
 80080e8:	f008 083c 	and.w	r8, r8, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 80080ec:	f002 0903 	and.w	r9, r2, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80080f0:	f858 1007 	ldr.w	r1, [r8, r7]
 80080f4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80080f8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80080fc:	ea4a 0101 	orr.w	r1, sl, r1
 8008100:	f848 1007 	str.w	r1, [r8, r7]
  SET_BIT(DACx->SWTRIGR,
 8008104:	9f03      	ldr	r7, [sp, #12]
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	ea49 0101 	orr.w	r1, r9, r1
 800810c:	6079      	str	r1, [r7, #4]
  return ((READ_BIT(DACx->CR,
 800810e:	9903      	ldr	r1, [sp, #12]
 8008110:	f002 0210 	and.w	r2, r2, #16
 8008114:	2701      	movs	r7, #1
 8008116:	6809      	ldr	r1, [r1, #0]
 8008118:	fa07 f202 	lsl.w	r2, r7, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800811c:	ea32 0101 	bics.w	r1, r2, r1
 8008120:	f000 811c 	beq.w	800835c <R3_2_Init+0x47c>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008124:	493b      	ldr	r1, [pc, #236]	; (8008214 <R3_2_Init+0x334>)
  SET_BIT(DACx->CR,
 8008126:	9f03      	ldr	r7, [sp, #12]
 8008128:	6809      	ldr	r1, [r1, #0]
 800812a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8008218 <R3_2_Init+0x338>
 800812e:	683f      	ldr	r7, [r7, #0]
 8008130:	fba8 8101 	umull	r8, r1, r8, r1
 8008134:	433a      	orrs	r2, r7
 8008136:	0cc9      	lsrs	r1, r1, #19
 8008138:	9f03      	ldr	r7, [sp, #12]
 800813a:	00c9      	lsls	r1, r1, #3
 800813c:	603a      	str	r2, [r7, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800813e:	910b      	str	r1, [sp, #44]	; 0x2c
    while (wait_loop_index != 0UL)
 8008140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008142:	b12a      	cbz	r2, 8008150 <R3_2_Init+0x270>
      wait_loop_index--;
 8008144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008146:	3a01      	subs	r2, #1
 8008148:	920b      	str	r2, [sp, #44]	; 0x2c
    while (wait_loop_index != 0UL)
 800814a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800814c:	2a00      	cmp	r2, #0
 800814e:	d1f9      	bne.n	8008144 <R3_2_Init+0x264>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008150:	f8de 2000 	ldr.w	r2, [lr]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	f8ce 2000 	str.w	r2, [lr]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800815c:	f8de 2000 	ldr.w	r2, [lr]
 8008160:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008164:	f8ce 2000 	str.w	r2, [lr]
      if (COMP_OVPx != NULL)
 8008168:	f1bc 0f00 	cmp.w	ip, #0
 800816c:	d047      	beq.n	80081fe <R3_2_Init+0x31e>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800816e:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 8008172:	2a01      	cmp	r2, #1
 8008174:	d037      	beq.n	80081e6 <R3_2_Init+0x306>
 8008176:	9904      	ldr	r1, [sp, #16]
 8008178:	2900      	cmp	r1, #0
 800817a:	d034      	beq.n	80081e6 <R3_2_Init+0x306>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800817c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 800817e:	f8b3 80be 	ldrh.w	r8, [r3, #190]	; 0xbe
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008182:	0c97      	lsrs	r7, r2, #18
 8008184:	f007 073c 	and.w	r7, r7, #60	; 0x3c
 8008188:	3108      	adds	r1, #8
  SET_BIT(DACx->SWTRIGR,
 800818a:	f002 0e03 	and.w	lr, r2, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800818e:	587b      	ldr	r3, [r7, r1]
 8008190:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008198:	ea48 0303 	orr.w	r3, r8, r3
 800819c:	507b      	str	r3, [r7, r1]
  SET_BIT(DACx->SWTRIGR,
 800819e:	9f04      	ldr	r7, [sp, #16]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	ea4e 0303 	orr.w	r3, lr, r3
 80081a6:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(DACx->CR,
 80081a8:	f002 0210 	and.w	r2, r2, #16
 80081ac:	2101      	movs	r1, #1
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	fa01 f202 	lsl.w	r2, r1, r2
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80081b4:	ea32 0303 	bics.w	r3, r2, r3
 80081b8:	f000 80e4 	beq.w	8008384 <R3_2_Init+0x4a4>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 80081bc:	4b15      	ldr	r3, [pc, #84]	; (8008214 <R3_2_Init+0x334>)
 80081be:	4639      	mov	r1, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4f15      	ldr	r7, [pc, #84]	; (8008218 <R3_2_Init+0x338>)
  SET_BIT(DACx->CR,
 80081c4:	6809      	ldr	r1, [r1, #0]
 80081c6:	fba7 7303 	umull	r7, r3, r7, r3
 80081ca:	430a      	orrs	r2, r1
 80081cc:	0cdb      	lsrs	r3, r3, #19
 80081ce:	9904      	ldr	r1, [sp, #16]
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	600a      	str	r2, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 80081d4:	930d      	str	r3, [sp, #52]	; 0x34
    while (wait_loop_index != 0UL)
 80081d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d8:	b12b      	cbz	r3, 80081e6 <R3_2_Init+0x306>
      wait_loop_index--;
 80081da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081dc:	3b01      	subs	r3, #1
 80081de:	930d      	str	r3, [sp, #52]	; 0x34
    while (wait_loop_index != 0UL)
 80081e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1f9      	bne.n	80081da <R3_2_Init+0x2fa>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80081e6:	f8dc 3000 	ldr.w	r3, [ip]
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	f8cc 3000 	str.w	r3, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80081f2:	f8dc 3000 	ldr.w	r3, [ip]
 80081f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081fa:	f8cc 3000 	str.w	r3, [ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081fe:	68ab      	ldr	r3, [r5, #8]
 8008200:	07da      	lsls	r2, r3, #31
 8008202:	4607      	mov	r7, r0
 8008204:	d576      	bpl.n	80082f4 <R3_2_Init+0x414>
 8008206:	68b3      	ldr	r3, [r6, #8]
 8008208:	07db      	lsls	r3, r3, #31
 800820a:	d56f      	bpl.n	80082ec <R3_2_Init+0x40c>
 800820c:	e008      	b.n	8008220 <R3_2_Init+0x340>
 800820e:	bf00      	nop
 8008210:	e0042000 	.word	0xe0042000
 8008214:	200004d8 	.word	0x200004d8
 8008218:	431bde83 	.word	0x431bde83
 800821c:	40012c00 	.word	0x40012c00
  volatile uint32_t Brk2Timeout = 1000;
 8008220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008224:	930f      	str	r3, [sp, #60]	; 0x3c
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008226:	6823      	ldr	r3, [r4, #0]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008228:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823c:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800823e:	69a3      	ldr	r3, [r4, #24]
 8008240:	f043 0308 	orr.w	r3, r3, #8
 8008244:	61a3      	str	r3, [r4, #24]
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800824c:	61a3      	str	r3, [r4, #24]
 800824e:	69e3      	ldr	r3, [r4, #28]
 8008250:	f043 0308 	orr.w	r3, r3, #8
 8008254:	61e3      	str	r3, [r4, #28]
 8008256:	69e3      	ldr	r3, [r4, #28]
 8008258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800825c:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800825e:	6963      	ldr	r3, [r4, #20]
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	6163      	str	r3, [r4, #20]
 8008266:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 800826a:	2b02      	cmp	r3, #2
 800826c:	d011      	beq.n	8008292 <R3_2_Init+0x3b2>
    if (M1 == pHandle->_Super.Motor)
 800826e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8008272:	b9bb      	cbnz	r3, 80082a4 <R3_2_Init+0x3c4>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8008274:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8008278:	2b01      	cmp	r3, #1
 800827a:	d00f      	beq.n	800829c <R3_2_Init+0x3bc>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800827c:	2b03      	cmp	r3, #3
 800827e:	d111      	bne.n	80082a4 <R3_2_Init+0x3c4>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008280:	2101      	movs	r1, #1
 8008282:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008284:	6961      	ldr	r1, [r4, #20]
 8008286:	f041 0101 	orr.w	r1, r1, #1
 800828a:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800828c:	6323      	str	r3, [r4, #48]	; 0x30
 800828e:	e009      	b.n	80082a4 <R3_2_Init+0x3c4>
 8008290:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8008292:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 8008296:	2b01      	cmp	r3, #1
 8008298:	f000 8088 	beq.w	80083ac <R3_2_Init+0x4cc>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800829c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80082a0:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80082a2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80082a4:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80082a8:	6123      	str	r3, [r4, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 80082aa:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80082ae:	b183      	cbz	r3, 80082d2 <R3_2_Init+0x3f2>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80082b0:	6923      	ldr	r3, [r4, #16]
    while ((Brk2Timeout != 0u) && (1U == result))
 80082b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b8:	b15a      	cbz	r2, 80082d2 <R3_2_Init+0x3f2>
 80082ba:	b153      	cbz	r3, 80082d2 <R3_2_Init+0x3f2>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80082bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082c0:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 80082c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c4:	3b01      	subs	r3, #1
 80082c6:	930f      	str	r3, [sp, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	f413 7f80 	tst.w	r3, #256	; 0x100
    while ((Brk2Timeout != 0u) && (1U == result))
 80082ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d0:	d11a      	bne.n	8008308 <R3_2_Init+0x428>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d8:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80082da:	6a23      	ldr	r3, [r4, #32]
 80082dc:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80082e0:	f043 0305 	orr.w	r3, r3, #5
 80082e4:	6223      	str	r3, [r4, #32]
}
 80082e6:	b011      	add	sp, #68	; 0x44
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 80082ec:	4630      	mov	r0, r6
 80082ee:	f7ff fb11 	bl	8007914 <R3_2_ADCxInit>
 80082f2:	e795      	b.n	8008220 <R3_2_Init+0x340>
        R3_2_ADCxInit(ADCx_1);
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7ff fb0d 	bl	8007914 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80082fe:	686b      	ldr	r3, [r5, #4]
 8008300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008304:	606b      	str	r3, [r5, #4]
 8008306:	e77e      	b.n	8008206 <R3_2_Init+0x326>
    while ((Brk2Timeout != 0u) && (1U == result))
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1d9      	bne.n	80082c0 <R3_2_Init+0x3e0>
 800830c:	e7e1      	b.n	80082d2 <R3_2_Init+0x3f2>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800830e:	492d      	ldr	r1, [pc, #180]	; (80083c4 <R3_2_Init+0x4e4>)
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	fba1 1202 	umull	r1, r2, r1, r2
 8008316:	0cd2      	lsrs	r2, r2, #19
 8008318:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800831c:	9208      	str	r2, [sp, #32]
    while (wait_loop_index != 0UL)
 800831e:	9a08      	ldr	r2, [sp, #32]
 8008320:	2a00      	cmp	r2, #0
 8008322:	f43f ae75 	beq.w	8008010 <R3_2_Init+0x130>
      wait_loop_index--;
 8008326:	9a08      	ldr	r2, [sp, #32]
 8008328:	3a01      	subs	r2, #1
 800832a:	9208      	str	r2, [sp, #32]
    while (wait_loop_index != 0UL)
 800832c:	9a08      	ldr	r2, [sp, #32]
 800832e:	2a00      	cmp	r2, #0
 8008330:	d1f9      	bne.n	8008326 <R3_2_Init+0x446>
 8008332:	e66d      	b.n	8008010 <R3_2_Init+0x130>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008334:	4a24      	ldr	r2, [pc, #144]	; (80083c8 <R3_2_Init+0x4e8>)
 8008336:	4923      	ldr	r1, [pc, #140]	; (80083c4 <R3_2_Init+0x4e4>)
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	fba1 1202 	umull	r1, r2, r1, r2
 800833e:	0cd2      	lsrs	r2, r2, #19
 8008340:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008344:	920a      	str	r2, [sp, #40]	; 0x28
    while (wait_loop_index != 0UL)
 8008346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008348:	2a00      	cmp	r2, #0
 800834a:	f43f aeb1 	beq.w	80080b0 <R3_2_Init+0x1d0>
      wait_loop_index--;
 800834e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008350:	3a01      	subs	r2, #1
 8008352:	920a      	str	r2, [sp, #40]	; 0x28
    while (wait_loop_index != 0UL)
 8008354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1f9      	bne.n	800834e <R3_2_Init+0x46e>
 800835a:	e6a9      	b.n	80080b0 <R3_2_Init+0x1d0>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800835c:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <R3_2_Init+0x4e8>)
 800835e:	4919      	ldr	r1, [pc, #100]	; (80083c4 <R3_2_Init+0x4e4>)
 8008360:	6812      	ldr	r2, [r2, #0]
 8008362:	fba1 1202 	umull	r1, r2, r1, r2
 8008366:	0cd2      	lsrs	r2, r2, #19
 8008368:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800836c:	920c      	str	r2, [sp, #48]	; 0x30
    while (wait_loop_index != 0UL)
 800836e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008370:	2a00      	cmp	r2, #0
 8008372:	f43f aeed 	beq.w	8008150 <R3_2_Init+0x270>
      wait_loop_index--;
 8008376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008378:	3a01      	subs	r2, #1
 800837a:	920c      	str	r2, [sp, #48]	; 0x30
    while (wait_loop_index != 0UL)
 800837c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800837e:	2a00      	cmp	r2, #0
 8008380:	d1f9      	bne.n	8008376 <R3_2_Init+0x496>
 8008382:	e6e5      	b.n	8008150 <R3_2_Init+0x270>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <R3_2_Init+0x4e8>)
 8008386:	4a0f      	ldr	r2, [pc, #60]	; (80083c4 <R3_2_Init+0x4e4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	fba2 2303 	umull	r2, r3, r2, r3
 800838e:	0cdb      	lsrs	r3, r3, #19
 8008390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008394:	930e      	str	r3, [sp, #56]	; 0x38
    while (wait_loop_index != 0UL)
 8008396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008398:	2b00      	cmp	r3, #0
 800839a:	f43f af24 	beq.w	80081e6 <R3_2_Init+0x306>
      wait_loop_index--;
 800839e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a0:	3b01      	subs	r3, #1
 80083a2:	930e      	str	r3, [sp, #56]	; 0x38
    while (wait_loop_index != 0UL)
 80083a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f9      	bne.n	800839e <R3_2_Init+0x4be>
 80083aa:	e71c      	b.n	80081e6 <R3_2_Init+0x306>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 80083ac:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 80083b0:	2903      	cmp	r1, #3
 80083b2:	f47f af73 	bne.w	800829c <R3_2_Init+0x3bc>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80083b6:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80083b8:	6963      	ldr	r3, [r4, #20]
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80083c0:	6321      	str	r1, [r4, #48]	; 0x30
 80083c2:	e76b      	b.n	800829c <R3_2_Init+0x3bc>
 80083c4:	431bde83 	.word	0x431bde83
 80083c8:	200004d8 	.word	0x200004d8

080083cc <R3_2_SetOffsetCalib>:
{
 80083cc:	b410      	push	{r4}
  pHandle->PhaseBOffset = offsets->phaseBOffset;
 80083ce:	e9d1 3400 	ldrd	r3, r4, [r1]
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 80083d2:	688a      	ldr	r2, [r1, #8]
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80083d4:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 80083d6:	2301      	movs	r3, #1
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 80083d8:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 80083dc:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80083e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop

080083e8 <R3_2_GetOffsetCalib>:
{
 80083e8:	b410      	push	{r4}
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 80083ea:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
  offsets->phaseCOffset = pHandle->PhaseCOffset;
 80083ee:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80083f0:	608b      	str	r3, [r1, #8]
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 80083f2:	e9c1 4200 	strd	r4, r2, [r1]
}
 80083f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <R3_2_CurrentReadingPolarization>:
{
 80083fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80083fe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  if (true == pHandle->_Super.offsetCalibStatus)
 8008402:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
{
 8008406:	b083      	sub	sp, #12
 8008408:	4604      	mov	r4, r0
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 800840a:	e9d2 7600 	ldrd	r7, r6, [r2]
  if (true == pHandle->_Super.offsetCalibStatus)
 800840e:	b1ab      	cbz	r3, 800843c <R3_2_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	4950      	ldr	r1, [pc, #320]	; (8008554 <R3_2_CurrentReadingPolarization+0x158>)
 8008414:	400a      	ands	r2, r1
 8008416:	f042 0208 	orr.w	r2, r2, #8
 800841a:	60ba      	str	r2, [r7, #8]
 800841c:	68b3      	ldr	r3, [r6, #8]
 800841e:	400b      	ands	r3, r1
 8008420:	f043 0308 	orr.w	r3, r3, #8
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008424:	2280      	movs	r2, #128	; 0x80
 8008426:	60b3      	str	r3, [r6, #8]
 8008428:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 800842c:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 800842e:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8008430:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 8008434:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008438:	b003      	add	sp, #12
 800843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800843c:	6895      	ldr	r5, [r2, #8]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800843e:	6801      	ldr	r1, [r0, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008440:	6942      	ldr	r2, [r0, #20]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008442:	9100      	str	r1, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008444:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8008446:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 800844a:	6a2a      	ldr	r2, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800844c:	f8df c114 	ldr.w	ip, [pc, #276]	; 8008564 <R3_2_CurrentReadingPolarization+0x168>
    pHandle->PhaseAOffset = 0U;
 8008450:	6703      	str	r3, [r0, #112]	; 0x70
 8008452:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
 8008456:	f022 0205 	bic.w	r2, r2, #5
    pHandle->PhaseCOffset = 0U;
 800845a:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800845e:	493e      	ldr	r1, [pc, #248]	; (8008558 <R3_2_CurrentReadingPolarization+0x15c>)
 8008460:	622a      	str	r2, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8008462:	2304      	movs	r3, #4
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008464:	2280      	movs	r2, #128	; 0x80
 8008466:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800846a:	f8c0 c000 	str.w	ip, [r0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800846e:	6141      	str	r1, [r0, #20]
  pHandle->PolarizationSector=SECTOR_5;
 8008470:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8008474:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008478:	f7ff fc06 	bl	8007c88 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800847c:	4a37      	ldr	r2, [pc, #220]	; (800855c <R3_2_CurrentReadingPolarization+0x160>)
 800847e:	686b      	ldr	r3, [r5, #4]
 8008480:	4013      	ands	r3, r2
 8008482:	2b70      	cmp	r3, #112	; 0x70
 8008484:	d1fb      	bne.n	800847e <R3_2_CurrentReadingPolarization+0x82>
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	4932      	ldr	r1, [pc, #200]	; (8008554 <R3_2_CurrentReadingPolarization+0x158>)
    waitForPolarizationEnd(TIMx,
 800848a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800848e:	400a      	ands	r2, r1
 8008490:	f042 0208 	orr.w	r2, r2, #8
 8008494:	60ba      	str	r2, [r7, #8]
 8008496:	68b3      	ldr	r3, [r6, #8]
 8008498:	400b      	ands	r3, r1
 800849a:	f043 0308 	orr.w	r3, r3, #8
 800849e:	60b3      	str	r3, [r6, #8]
 80084a0:	f104 0780 	add.w	r7, r4, #128	; 0x80
 80084a4:	f104 0644 	add.w	r6, r4, #68	; 0x44
 80084a8:	4631      	mov	r1, r6
 80084aa:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 80084ae:	463b      	mov	r3, r7
 80084b0:	4628      	mov	r0, r5
 80084b2:	f7ff fa13 	bl	80078dc <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7ff fc30 	bl	8007d1c <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 80084bc:	2300      	movs	r3, #0
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80084be:	4a28      	ldr	r2, [pc, #160]	; (8008560 <R3_2_CurrentReadingPolarization+0x164>)
    pHandle->PolarizationCounter = 0U;
 80084c0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 80084c4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 80084c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80084cc:	6022      	str	r2, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff fbda 	bl	8007c88 <R3_2_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 80084d4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80084d8:	4631      	mov	r1, r6
 80084da:	463b      	mov	r3, r7
 80084dc:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7ff f9fb 	bl	80078dc <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80084e6:	4620      	mov	r0, r4
 80084e8:	f7ff fc18 	bl	8007d1c <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80084ec:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80084f0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80084f2:	9e00      	ldr	r6, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80084f4:	9801      	ldr	r0, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80084f6:	6026      	str	r6, [r4, #0]
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80084f8:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80084fa:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80084fc:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008500:	091b      	lsrs	r3, r3, #4
 8008502:	67a3      	str	r3, [r4, #120]	; 0x78
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008504:	69ab      	ldr	r3, [r5, #24]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008506:	6160      	str	r0, [r4, #20]
 8008508:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 800850c:	2201      	movs	r2, #1
 800850e:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 8008512:	61ab      	str	r3, [r5, #24]
 8008514:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8008516:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800851a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800851e:	61aa      	str	r2, [r5, #24]
 8008520:	69ea      	ldr	r2, [r5, #28]
 8008522:	f022 0208 	bic.w	r2, r2, #8
 8008526:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008528:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800852a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800852c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800852e:	69ab      	ldr	r3, [r5, #24]
 8008530:	f043 0308 	orr.w	r3, r3, #8
 8008534:	61ab      	str	r3, [r5, #24]
 8008536:	69ab      	ldr	r3, [r5, #24]
 8008538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800853c:	61ab      	str	r3, [r5, #24]
 800853e:	69eb      	ldr	r3, [r5, #28]
 8008540:	f043 0308 	orr.w	r3, r3, #8
 8008544:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008546:	6a2b      	ldr	r3, [r5, #32]
 8008548:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800854c:	f043 0305 	orr.w	r3, r3, #5
 8008550:	622b      	str	r3, [r5, #32]
 8008552:	e76b      	b.n	800842c <R3_2_CurrentReadingPolarization+0x30>
 8008554:	7fffffc0 	.word	0x7fffffc0
 8008558:	08007b5d 	.word	0x08007b5d
 800855c:	02000070 	.word	0x02000070
 8008560:	08007bf1 	.word	0x08007bf1
 8008564:	08007b9d 	.word	0x08007b9d

08008568 <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 8008568:	2800      	cmp	r0, #0
 800856a:	d037      	beq.n	80085dc <R3_2_SetADCSampPointSectX+0x74>
{
 800856c:	b470      	push	{r4, r5, r6}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800856e:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8008572:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8008576:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 800857a:	1aca      	subs	r2, r1, r3
 800857c:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8008580:	b292      	uxth	r2, r2
 8008582:	42b2      	cmp	r2, r6
 8008584:	d916      	bls.n	80085b4 <R3_2_SetADCSampPointSectX+0x4c>
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8008586:	1e4b      	subs	r3, r1, #1
      pHandle->_Super.Sector = SECTOR_5;
 8008588:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800858a:	b29b      	uxth	r3, r3
      pHandle->_Super.Sector = SECTOR_5;
 800858c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008590:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8008592:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8008594:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8008598:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800859c:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800859e:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80085a0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80085a2:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80085a4:	6852      	ldr	r2, [r2, #4]
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <R3_2_SetADCSampPointSectX+0x80>)
 80085a8:	421a      	tst	r2, r3
    returnValue = 0U;
 80085aa:	bf14      	ite	ne
 80085ac:	2001      	movne	r0, #1
 80085ae:	2000      	moveq	r0, #0
}
 80085b0:	bc70      	pop	{r4, r5, r6}
 80085b2:	4770      	bx	lr
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 80085b4:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
 80085b8:	1b5d      	subs	r5, r3, r5
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 80085ba:	b2ad      	uxth	r5, r5
 80085bc:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 80085c0:	d80d      	bhi.n	80085de <R3_2_SetADCSampPointSectX+0x76>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80085c2:	4433      	add	r3, r6
 80085c4:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 80085c6:	4299      	cmp	r1, r3
 80085c8:	d8e2      	bhi.n	8008590 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80085ca:	43db      	mvns	r3, r3
 80085cc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80085d0:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 80085d4:	b29b      	uxth	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 80085d6:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
 80085da:	e7d9      	b.n	8008590 <R3_2_SetADCSampPointSectX+0x28>
}
 80085dc:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80085de:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	e7d3      	b.n	8008590 <R3_2_SetADCSampPointSectX+0x28>
 80085e8:	02000070 	.word	0x02000070

080085ec <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 80085ec:	4602      	mov	r2, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d039      	beq.n	8008666 <R3_2_TIMx_UP_IRQHandler+0x7a>
{
 80085f2:	b4f0      	push	{r4, r5, r6, r7}
 80085f4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80085f8:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 80085fc:	009d      	lsls	r5, r3, #2
 80085fe:	1974      	adds	r4, r6, r5
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008600:	68f0      	ldr	r0, [r6, #12]
 8008602:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008604:	68b6      	ldr	r6, [r6, #8]
    if (OPAMPParams != NULL)
 8008606:	b1a8      	cbz	r0, 8008634 <R3_2_TIMx_UP_IRQHandler+0x48>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8008608:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1fc      	bne.n	8008608 <R3_2_TIMx_UP_IRQHandler+0x1c>
 800860e:	1943      	adds	r3, r0, r5
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8008610:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 8008612:	1c6f      	adds	r7, r5, #1
 8008614:	d005      	beq.n	8008622 <R3_2_TIMx_UP_IRQHandler+0x36>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008616:	68df      	ldr	r7, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8008618:	6838      	ldr	r0, [r7, #0]
 800861a:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 800861e:	4328      	orrs	r0, r5
 8008620:	6038      	str	r0, [r7, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8008622:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 8008624:	1c45      	adds	r5, r0, #1
 8008626:	d005      	beq.n	8008634 <R3_2_TIMx_UP_IRQHandler+0x48>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008628:	6a5d      	ldr	r5, [r3, #36]	; 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8008630:	4303      	orrs	r3, r0
 8008632:	602b      	str	r3, [r5, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008634:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008638:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800863c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800863e:	6e64      	ldr	r4, [r4, #100]	; 0x64
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008640:	4318      	orrs	r0, r3
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008642:	432b      	orrs	r3, r5
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008644:	64c8      	str	r0, [r1, #76]	; 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008646:	64e3      	str	r3, [r4, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008648:	6873      	ldr	r3, [r6, #4]
 800864a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800864e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008652:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008656:	2180      	movs	r1, #128	; 0x80
 8008658:	6073      	str	r3, [r6, #4]
    tempPointer = &(pHandle->_Super.Motor);
 800865a:	f102 0068 	add.w	r0, r2, #104	; 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800865e:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
}
 8008662:	bcf0      	pop	{r4, r5, r6, r7}
 8008664:	4770      	bx	lr
 8008666:	4770      	bx	lr

08008668 <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 8008668:	b168      	cbz	r0, 8008686 <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 800866a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800866e:	b92b      	cbnz	r3, 800867c <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008670:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008674:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008678:	2a02      	cmp	r2, #2
 800867a:	d005      	beq.n	8008688 <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 800867c:	2301      	movs	r3, #1
 800867e:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tempPointer = &(pHandle->_Super.Motor);
 8008682:	3068      	adds	r0, #104	; 0x68
 8008684:	4770      	bx	lr
}
 8008686:	4770      	bx	lr
{
 8008688:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800868a:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800868e:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008694:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008696:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800869a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800869e:	628c      	str	r4, [r1, #40]	; 0x28
 80086a0:	6293      	str	r3, [r2, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 80086a8:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 80086aa:	3068      	adds	r0, #104	; 0x68
}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop

080086b0 <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 80086b0:	4603      	mov	r3, r0
 80086b2:	b170      	cbz	r0, 80086d2 <R3_2_BRK_IRQHandler+0x22>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80086b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80086b8:	6890      	ldr	r0, [r2, #8]
 80086ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
    pHandle->OverVoltageFlag = true;
 80086bc:	2101      	movs	r1, #1
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80086be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086c2:	6442      	str	r2, [r0, #68]	; 0x44
    tempPointer = &(pHandle->_Super.Motor);
 80086c4:	f103 0068 	add.w	r0, r3, #104	; 0x68
    pHandle->OverVoltageFlag = true;
 80086c8:	f883 1083 	strb.w	r1, [r3, #131]	; 0x83
    pHandle->BrakeActionLock = true;
 80086cc:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
 80086d0:	4770      	bx	lr
}
 80086d2:	4770      	bx	lr

080086d4 <R3_2_IsOverCurrentOccurred>:
{
 80086d4:	4602      	mov	r2, r0
  if (true == pHandle->OverVoltageFlag)
 80086d6:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 80086da:	b160      	cbz	r0, 80086f6 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 80086dc:	2300      	movs	r3, #0
 80086de:	f882 3083 	strb.w	r3, [r2, #131]	; 0x83
 80086e2:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 80086e4:	2002      	movs	r0, #2
  if (true == pHandle->OverCurrentFlag)
 80086e6:	f892 3082 	ldrb.w	r3, [r2, #130]	; 0x82
 80086ea:	b11b      	cbz	r3, 80086f4 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 80086ec:	2300      	movs	r3, #0
    retVal |= MC_BREAK_IN;
 80086ee:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 80086f0:	f882 3082 	strb.w	r3, [r2, #130]	; 0x82
}
 80086f4:	4770      	bx	lr
 80086f6:	2140      	movs	r1, #64	; 0x40
 80086f8:	e7f5      	b.n	80086e6 <R3_2_IsOverCurrentOccurred+0x12>
 80086fa:	bf00      	nop

080086fc <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 80086fc:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8008700:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8008702:	2900      	cmp	r1, #0
 8008704:	d13d      	bne.n	8008782 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008706:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800870a:	6893      	ldr	r3, [r2, #8]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 800870c:	f892 50c0 	ldrb.w	r5, [r2, #192]	; 0xc0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008716:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800871a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800871e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008720:	6a1a      	ldr	r2, [r3, #32]
 8008722:	f042 0201 	orr.w	r2, r2, #1
 8008726:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008728:	6a1a      	ldr	r2, [r3, #32]
 800872a:	2d01      	cmp	r5, #1
 800872c:	f022 0204 	bic.w	r2, r2, #4
 8008730:	621a      	str	r2, [r3, #32]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008732:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008736:	6359      	str	r1, [r3, #52]	; 0x34
 8008738:	d030      	beq.n	800879c <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 800873a:	2d02      	cmp	r5, #2
 800873c:	d10f      	bne.n	800875e <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008744:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800874c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	f042 0210 	orr.w	r2, r2, #16
 8008754:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008756:	6a1a      	ldr	r2, [r3, #32]
 8008758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800875c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800875e:	6862      	ldr	r2, [r4, #4]
 8008760:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008764:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008768:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800876c:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800876e:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008770:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008776:	621a      	str	r2, [r3, #32]
 8008778:	6a1a      	ldr	r2, [r3, #32]
 800877a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800877e:	621a      	str	r2, [r3, #32]
 8008780:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008782:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008784:	490f      	ldr	r1, [pc, #60]	; (80087c4 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008786:	4a10      	ldr	r2, [pc, #64]	; (80087c8 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008788:	4c10      	ldr	r4, [pc, #64]	; (80087cc <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800878a:	6003      	str	r3, [r0, #0]
  pHandle->_Super.RLDetectionMode = true;
 800878c:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800878e:	6104      	str	r4, [r0, #16]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008790:	e9c0 2101 	strd	r2, r1, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8008794:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8008798:	bc30      	pop	{r4, r5}
 800879a:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80087a2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80087a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80087ac:	6a1a      	ldr	r2, [r3, #32]
 80087ae:	f022 0210 	bic.w	r2, r2, #16
 80087b2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80087b4:	6a1a      	ldr	r2, [r3, #32]
 80087b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ba:	621a      	str	r2, [r3, #32]
 80087bc:	e7cf      	b.n	800875e <R3_2_RLDetectionModeEnable+0x62>
 80087be:	bf00      	nop
 80087c0:	08007d81 	.word	0x08007d81
 80087c4:	08007e2d 	.word	0x08007e2d
 80087c8:	08007d1d 	.word	0x08007d1d
 80087cc:	08007de1 	.word	0x08007de1

080087d0 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 80087d0:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d03c      	beq.n	8008852 <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80087d8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80087dc:	6893      	ldr	r3, [r2, #8]
{
 80087de:	b470      	push	{r4, r5, r6}
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 80087e0:	f892 50c0 	ldrb.w	r5, [r2, #192]	; 0xc0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80087e4:	4c3f      	ldr	r4, [pc, #252]	; (80088e4 <R3_2_RLDetectionModeDisable+0x114>)
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	f8b0 607c 	ldrh.w	r6, [r0, #124]	; 0x7c
 80087ec:	4022      	ands	r2, r4
 80087ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80087f2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80087f4:	6a19      	ldr	r1, [r3, #32]
 80087f6:	2d01      	cmp	r5, #1
 80087f8:	f041 0101 	orr.w	r1, r1, #1
 80087fc:	6219      	str	r1, [r3, #32]
 80087fe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008802:	d027      	beq.n	8008854 <R3_2_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8008804:	2d02      	cmp	r5, #2
 8008806:	d049      	beq.n	800889c <R3_2_RLDetectionModeDisable+0xcc>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008808:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800880a:	6999      	ldr	r1, [r3, #24]
 800880c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008810:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008814:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008818:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800881a:	6a19      	ldr	r1, [r3, #32]
 800881c:	f041 0110 	orr.w	r1, r1, #16
 8008820:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008822:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008824:	69d9      	ldr	r1, [r3, #28]
 8008826:	400c      	ands	r4, r1
 8008828:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800882c:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800882e:	6a19      	ldr	r1, [r3, #32]
 8008830:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008834:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008836:	492c      	ldr	r1, [pc, #176]	; (80088e8 <R3_2_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008838:	4a2c      	ldr	r2, [pc, #176]	; (80088ec <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800883a:	63de      	str	r6, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800883c:	4d2c      	ldr	r5, [pc, #176]	; (80088f0 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800883e:	4c2d      	ldr	r4, [pc, #180]	; (80088f4 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008840:	6005      	str	r5, [r0, #0]
    pHandle->_Super.RLDetectionMode = false;
 8008842:	2300      	movs	r3, #0
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008844:	6104      	str	r4, [r0, #16]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008846:	e9c0 2101 	strd	r2, r1, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 800884a:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 800884e:	bc70      	pop	{r4, r5, r6}
 8008850:	4770      	bx	lr
 8008852:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008854:	6a19      	ldr	r1, [r3, #32]
 8008856:	f041 0104 	orr.w	r1, r1, #4
 800885a:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800885c:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800885e:	6999      	ldr	r1, [r3, #24]
 8008860:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008864:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008868:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800886c:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800886e:	6a19      	ldr	r1, [r3, #32]
 8008870:	f041 0110 	orr.w	r1, r1, #16
 8008874:	6219      	str	r1, [r3, #32]
 8008876:	6a19      	ldr	r1, [r3, #32]
 8008878:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800887c:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800887e:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008880:	69d9      	ldr	r1, [r3, #28]
 8008882:	400c      	ands	r4, r1
 8008884:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008888:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800888a:	6a19      	ldr	r1, [r3, #32]
 800888c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008890:	6219      	str	r1, [r3, #32]
 8008892:	6a19      	ldr	r1, [r3, #32]
 8008894:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008898:	6219      	str	r1, [r3, #32]
 800889a:	e7cc      	b.n	8008836 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800889c:	6a19      	ldr	r1, [r3, #32]
 800889e:	f021 0104 	bic.w	r1, r1, #4
 80088a2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80088a4:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80088a6:	6999      	ldr	r1, [r3, #24]
 80088a8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80088ac:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80088b0:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80088b4:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80088b6:	6a19      	ldr	r1, [r3, #32]
 80088b8:	f041 0110 	orr.w	r1, r1, #16
 80088bc:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80088be:	6a19      	ldr	r1, [r3, #32]
 80088c0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80088c4:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80088c6:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80088c8:	69d9      	ldr	r1, [r3, #28]
 80088ca:	400c      	ands	r4, r1
 80088cc:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80088d0:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80088d2:	6a19      	ldr	r1, [r3, #32]
 80088d4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80088d8:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80088da:	6a19      	ldr	r1, [r3, #32]
 80088dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80088e0:	6219      	str	r1, [r3, #32]
 80088e2:	e7a8      	b.n	8008836 <R3_2_RLDetectionModeDisable+0x66>
 80088e4:	fffeff8c 	.word	0xfffeff8c
 80088e8:	08007c89 	.word	0x08007c89
 80088ec:	08007d1d 	.word	0x08007d1d
 80088f0:	080079c9 	.word	0x080079c9
 80088f4:	08007c3d 	.word	0x08007c3d

080088f8 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 80088f8:	4603      	mov	r3, r0
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d038      	beq.n	8008970 <R3_2_RLDetectionModeSetDuty+0x78>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80088fe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008902:	6892      	ldr	r2, [r2, #8]
{
 8008904:	b470      	push	{r4, r5, r6}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008906:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800890a:	f8b0 5064 	ldrh.w	r5, [r0, #100]	; 0x64
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800890e:	69d0      	ldr	r0, [r2, #28]
 8008910:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008914:	fb04 f101 	mul.w	r1, r4, r1
 8008918:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 800891c:	0c09      	lsrs	r1, r1, #16
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800891e:	1b64      	subs	r4, r4, r5
 8008920:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8008924:	f8b3 5066 	ldrh.w	r5, [r3, #102]	; 0x66
    pHandle->_Super.CntPhA = (uint16_t)val;
 8008928:	87d9      	strh	r1, [r3, #62]	; 0x3e
    pHandle->ADCRegularLocked = true;
 800892a:	2601      	movs	r6, #1
 800892c:	f883 608c 	strb.w	r6, [r3, #140]	; 0x8c
 8008930:	61d0      	str	r0, [r2, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008932:	6414      	str	r4, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008934:	63d5      	str	r5, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008936:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008938:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800893a:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
 800893e:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8008942:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008946:	f041 0170 	orr.w	r1, r1, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 800894a:	2403      	movs	r4, #3
 800894c:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800894e:	42b0      	cmp	r0, r6
    pHdl->Sector = SECTOR_4;
 8008950:	f883 406a 	strb.w	r4, [r3, #106]	; 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008954:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008956:	d006      	beq.n	8008966 <R3_2_RLDetectionModeSetDuty+0x6e>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008958:	4b06      	ldr	r3, [pc, #24]	; (8008974 <R3_2_RLDetectionModeSetDuty+0x7c>)
 800895a:	421a      	tst	r2, r3
      hAux = MC_DURATION;
 800895c:	bf14      	ite	ne
 800895e:	4630      	movne	r0, r6
 8008960:	2000      	moveq	r0, #0
}
 8008962:	bc70      	pop	{r4, r5, r6}
 8008964:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8008966:	2200      	movs	r2, #0
 8008968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800896c:	bc70      	pop	{r4, r5, r6}
 800896e:	4770      	bx	lr
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	02000070 	.word	0x02000070

08008978 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008978:	8b42      	ldrh	r2, [r0, #26]
 800897a:	8c01      	ldrh	r1, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800897c:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800897e:	440a      	add	r2, r1
 8008980:	0852      	lsrs	r2, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008982:	b18b      	cbz	r3, 80089a8 <RVBS_Clear+0x30>
{
 8008984:	b410      	push	{r4}
    {
      pHandle->aBuffer[index] = aux;
 8008986:	6a44      	ldr	r4, [r0, #36]	; 0x24
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008988:	2300      	movs	r3, #0
      pHandle->aBuffer[index] = aux;
 800898a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800898e:	3301      	adds	r3, #1
 8008990:	8b01      	ldrh	r1, [r0, #24]
 8008992:	b29b      	uxth	r3, r3
 8008994:	4299      	cmp	r1, r3
 8008996:	d8f8      	bhi.n	800898a <RVBS_Clear+0x12>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8008998:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800899a:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 800899c:	80c2      	strh	r2, [r0, #6]
    pHandle->index = 0U;
 800899e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 80089a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a6:	4770      	bx	lr
    pHandle->index = 0U;
 80089a8:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80089aa:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 80089ac:	80c2      	strh	r2, [r0, #6]
    pHandle->index = 0U;
 80089ae:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80089b2:	4770      	bx	lr

080089b4 <RVBS_Init>:
{
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80089b8:	300c      	adds	r0, #12
 80089ba:	f7fa fbef 	bl	800319c <RCM_RegisterRegConv>
 80089be:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 80089c2:	4620      	mov	r0, r4
 80089c4:	f7ff ffd8 	bl	8008978 <RVBS_Clear>
}
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	bf00      	nop

080089cc <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 80089cc:	b410      	push	{r4}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80089ce:	8b41      	ldrh	r1, [r0, #26]
 80089d0:	8b84      	ldrh	r4, [r0, #28]
 80089d2:	88c2      	ldrh	r2, [r0, #6]
 80089d4:	42a1      	cmp	r1, r4
{
 80089d6:	4603      	mov	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80089d8:	d00f      	beq.n	80089fa <RVBS_CheckFaultState+0x2e>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80089da:	8c00      	ldrh	r0, [r0, #32]
 80089dc:	4290      	cmp	r0, r2
 80089de:	d808      	bhi.n	80089f2 <RVBS_CheckFaultState+0x26>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80089e0:	7f98      	ldrb	r0, [r3, #30]
 80089e2:	b9a0      	cbnz	r0, 8008a0e <RVBS_CheckFaultState+0x42>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 80089e4:	4294      	cmp	r4, r2
 80089e6:	d918      	bls.n	8008a1a <RVBS_CheckFaultState+0x4e>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 80089e8:	2201      	movs	r2, #1
 80089ea:	779a      	strb	r2, [r3, #30]
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80089ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f0:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 80089f2:	2004      	movs	r0, #4
}
 80089f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f8:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80089fa:	4291      	cmp	r1, r2
 80089fc:	d30d      	bcc.n	8008a1a <RVBS_CheckFaultState+0x4e>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80089fe:	8c00      	ldrh	r0, [r0, #32]
}
 8008a00:	f85d 4b04 	ldr.w	r4, [sp], #4
        fault = MC_UNDER_VOLT;
 8008a04:	4290      	cmp	r0, r2
 8008a06:	bf8c      	ite	hi
 8008a08:	2004      	movhi	r0, #4
 8008a0a:	2000      	movls	r0, #0
}
 8008a0c:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008a0e:	4291      	cmp	r1, r2
 8008a10:	d307      	bcc.n	8008a22 <RVBS_CheckFaultState+0x56>
        fault = MC_NO_ERROR;
 8008a12:	2000      	movs	r0, #0
}
 8008a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a18:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8008a1a:	2002      	movs	r0, #2
}
 8008a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a20:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8008a22:	2200      	movs	r2, #0
 8008a24:	779a      	strb	r2, [r3, #30]
          fault = MC_OVER_VOLT;
 8008a26:	2002      	movs	r0, #2
 8008a28:	e7e4      	b.n	80089f4 <RVBS_CheckFaultState+0x28>
 8008a2a:	bf00      	nop

08008a2c <RVBS_CalcAvVbus>:
{
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008a30:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8008a34:	f7fa fc8a 	bl	800334c <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8008a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a3c:	4298      	cmp	r0, r3
 8008a3e:	d024      	beq.n	8008a8a <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8008a40:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8008a44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008a46:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008a4a:	8b25      	ldrh	r5, [r4, #24]
 8008a4c:	f015 03ff 	ands.w	r3, r5, #255	; 0xff
 8008a50:	d00d      	beq.n	8008a6e <RVBS_CalcAvVbus+0x42>
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	eb02 0643 	add.w	r6, r2, r3, lsl #1
 8008a5a:	3a02      	subs	r2, #2
      wtemp = 0u;
 8008a5c:	2300      	movs	r3, #0
        wtemp += pHandle->aBuffer[i];
 8008a5e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008a62:	42b2      	cmp	r2, r6
        wtemp += pHandle->aBuffer[i];
 8008a64:	440b      	add	r3, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008a66:	d1fa      	bne.n	8008a5e <RVBS_CalcAvVbus+0x32>
 8008a68:	fbb3 f3f5 	udiv	r3, r3, r5
 8008a6c:	b29b      	uxth	r3, r3
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008a6e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008a72:	80e3      	strh	r3, [r4, #6]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008a74:	3d01      	subs	r5, #1
 8008a76:	42aa      	cmp	r2, r5
        pHandle->index++;
 8008a78:	bf34      	ite	cc
 8008a7a:	3201      	addcc	r2, #1
        pHandle->index = 0U;
 8008a7c:	2300      	movcs	r3, #0
      pHandle->_Super.LatestConv = hAux;
 8008a7e:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8008a80:	bf34      	ite	cc
 8008a82:	f884 2029 	strbcc.w	r2, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8008a86:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff ff9e 	bl	80089cc <RVBS_CheckFaultState>
 8008a90:	8120      	strh	r0, [r4, #8]
}
 8008a92:	bd70      	pop	{r4, r5, r6, pc}

08008a94 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8008a94:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8008a96:	2201      	movs	r2, #1
 8008a98:	6142      	str	r2, [r0, #20]
    pHandle->TargetFinal = 0;
 8008a9a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8008a9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8008aa2:	4770      	bx	lr

08008aa4 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8008aa4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop

08008aac <SPD_GetMecAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->wMecAngle);
#else
  return (pHandle->wMecAngle);
#endif
}
 8008aac:	6880      	ldr	r0, [r0, #8]
 8008aae:	4770      	bx	lr

08008ab0 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008ab0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8008ab8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop

08008ac0 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008ac0:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 8008ac4:	b430      	push	{r4, r5}
 8008ac6:	b28a      	uxth	r2, r1
    if (*pMecSpeedUnit < 0)
 8008ac8:	2900      	cmp	r1, #0
    {
      hAux = -(*pMecSpeedUnit);
 8008aca:	bfb8      	it	lt
 8008acc:	4252      	neglt	r2, r2
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008ace:	8ac5      	ldrh	r5, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008ad0:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008ad2:	7803      	ldrb	r3, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008ad4:	8a81      	ldrh	r1, [r0, #20]
      hAux = -(*pMecSpeedUnit);
 8008ad6:	bfb8      	it	lt
 8008ad8:	b292      	uxthlt	r2, r2
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008ada:	4295      	cmp	r5, r2
 8008adc:	d819      	bhi.n	8008b12 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	bf2c      	ite	cs
 8008ae2:	2200      	movcs	r2, #0
 8008ae4:	2201      	movcc	r2, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8008ae6:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 8008aea:	b2a9      	uxth	r1, r5
 8008aec:	2d00      	cmp	r5, #0
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8008aee:	bfb8      	it	lt
 8008af0:	4249      	neglt	r1, r1
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008af2:	8b05      	ldrh	r5, [r0, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8008af4:	bfb8      	it	lt
 8008af6:	b289      	uxthlt	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008af8:	428d      	cmp	r5, r1
 8008afa:	d300      	bcc.n	8008afe <SPD_IsMecSpeedReliable+0x3e>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8008afc:	b15a      	cbz	r2, 8008b16 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d901      	bls.n	8008b06 <SPD_IsMecSpeedReliable+0x46>
      {
        bSpeedErrorNumber++;
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2db      	uxtb	r3, r3
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008b06:	7003      	strb	r3, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008b08:	1b18      	subs	r0, r3, r4
 8008b0a:	bf18      	it	ne
 8008b0c:	2001      	movne	r0, #1
 8008b0e:	bc30      	pop	{r4, r5}
 8008b10:	4770      	bx	lr
      SpeedError = true;
 8008b12:	2201      	movs	r2, #1
 8008b14:	e7e7      	b.n	8008ae6 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8008b16:	429c      	cmp	r4, r3
 8008b18:	bf88      	it	hi
 8008b1a:	2300      	movhi	r3, #0
 8008b1c:	e7f3      	b.n	8008b06 <SPD_IsMecSpeedReliable+0x46>
 8008b1e:	bf00      	nop

08008b20 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8008b20:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8008b24:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 8008b28:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8008b2c:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8008b30:	b200      	sxth	r0, r0
 8008b32:	4770      	bx	lr

08008b34 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 8008b34:	b430      	push	{r4, r5}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008b36:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008b3a:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
    pHandle->PISpeed = pPI;
 8008b3e:	6101      	str	r1, [r0, #16]
    pHandle->TargetFinal = 0;
 8008b40:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008b42:	042d      	lsls	r5, r5, #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008b44:	0424      	lsls	r4, r4, #16
    pHandle->Mode = pHandle->ModeDefault;
 8008b46:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
    pHandle->SPD = SPD_Handle;
 8008b4a:	6142      	str	r2, [r0, #20]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008b4c:	e9c0 5401 	strd	r5, r4, [r0, #4]
    pHandle->Mode = pHandle->ModeDefault;
 8008b50:	7001      	strb	r1, [r0, #0]
    pHandle->TargetFinal = 0;
 8008b52:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8008b54:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008b56:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008b58:	bc30      	pop	{r4, r5}
 8008b5a:	4770      	bx	lr

08008b5c <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8008b5c:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008b5e:	4770      	bx	lr

08008b60 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8008b60:	6940      	ldr	r0, [r0, #20]
 8008b62:	4770      	bx	lr

08008b64 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008b64:	7803      	ldrb	r3, [r0, #0]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d000      	beq.n	8008b6c <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008b6a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8008b6c:	6900      	ldr	r0, [r0, #16]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	f7fe bdb8 	b.w	80076e4 <PID_SetIntegralTerm>

08008b74 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8008b74:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop

08008b7c <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8008b7c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008b84:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8008b86:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008b88:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008b8a:	4770      	bx	lr

08008b8c <STC_ExecRamp>:
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008b8c:	7803      	ldrb	r3, [r0, #0]
 8008b8e:	2b04      	cmp	r3, #4
{
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008b98:	d01c      	beq.n	8008bd4 <STC_ExecRamp+0x48>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008b9a:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8008b9c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008ba0:	428b      	cmp	r3, r1
 8008ba2:	db1c      	blt.n	8008bde <STC_ExecRamp+0x52>
      {
        allowedRange = false;
      }
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8008ba4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	dc18      	bgt.n	8008bde <STC_ExecRamp+0x52>
      {
        allowedRange = false;
      }
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8008bac:	8c23      	ldrh	r3, [r4, #32]
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	dd03      	ble.n	8008bba <STC_ExecRamp+0x2e>
      {
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8008bb2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008bb6:	428b      	cmp	r3, r1
 8008bb8:	db11      	blt.n	8008bde <STC_ExecRamp+0x52>
    }

    if (true == allowedRange)
    {
      /* Interrupts the execution of any previous ramp command */
      if (0U == hDurationms)
 8008bba:	b996      	cbnz	r6, 8008be2 <STC_ExecRamp+0x56>
      {
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008bbc:	7823      	ldrb	r3, [r4, #0]
 8008bbe:	042d      	lsls	r5, r5, #16
 8008bc0:	2b03      	cmp	r3, #3
        }
        else
        {
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
        }
        pHandle->RampRemainingStep = 0U;
 8008bc2:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008bc6:	bf0c      	ite	eq
 8008bc8:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8008bca:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8008bcc:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8008bce:	61a3      	str	r3, [r4, #24]
 8008bd0:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8008bd4:	f7ff ffd2 	bl	8008b7c <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8008bd8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008bda:	42ab      	cmp	r3, r5
 8008bdc:	da12      	bge.n	8008c04 <STC_ExecRamp+0x78>
        allowedRange = false;
 8008bde:	2000      	movs	r0, #0
}
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008be2:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8008be4:	4a0b      	ldr	r2, [pc, #44]	; (8008c14 <STC_ExecRamp+0x88>)
        pHandle->TargetFinal = hTargetFinal;
 8008be6:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008be8:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8008bf2:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008bf4:	1a2d      	subs	r5, r5, r0
 8008bf6:	042d      	lsls	r5, r5, #16
        pHandle->RampRemainingStep++;
 8008bf8:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008bfa:	fb95 f5f3 	sdiv	r5, r5, r3
        pHandle->IncDecAmount = wAux1;
 8008bfe:	2001      	movs	r0, #1
 8008c00:	61a5      	str	r5, [r4, #24]
}
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8008c04:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	dce8      	bgt.n	8008bde <STC_ExecRamp+0x52>
      if (0U == hDurationms)
 8008c0c:	2e00      	cmp	r6, #0
 8008c0e:	d1e8      	bne.n	8008be2 <STC_ExecRamp+0x56>
 8008c10:	e7d4      	b.n	8008bbc <STC_ExecRamp+0x30>
 8008c12:	bf00      	nop
 8008c14:	10624dd3 	.word	0x10624dd3

08008c18 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008c1c:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008c1e:	4770      	bx	lr

08008c20 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008c20:	b570      	push	{r4, r5, r6, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8008c22:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008c26:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8008c28:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8008c2a:	2a04      	cmp	r2, #4
 8008c2c:	bf18      	it	ne
 8008c2e:	460d      	movne	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d90a      	bls.n	8008c4a <STC_CalcTorqueReference+0x2a>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8008c34:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8008c36:	3b01      	subs	r3, #1
 8008c38:	60c3      	str	r3, [r0, #12]
      wCurrentReference += pHandle->IncDecAmount;
 8008c3a:	440d      	add	r5, r1
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8008c3c:	2a03      	cmp	r2, #3
 8008c3e:	ea4f 4625 	mov.w	r6, r5, asr #16
 8008c42:	d00c      	beq.n	8008c5e <STC_CalcTorqueReference+0x3e>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8008c44:	6085      	str	r5, [r0, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8008c46:	b230      	sxth	r0, r6
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8008c48:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8008c4a:	d1f7      	bne.n	8008c3c <STC_CalcTorqueReference+0x1c>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008c4c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8008c50:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008c52:	042d      	lsls	r5, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008c54:	2a03      	cmp	r2, #3
      pHandle->RampRemainingStep = 0U;
 8008c56:	60c3      	str	r3, [r0, #12]
 8008c58:	ea4f 4625 	mov.w	r6, r5, asr #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008c5c:	d1f2      	bne.n	8008c44 <STC_CalcTorqueReference+0x24>
 8008c5e:	4604      	mov	r4, r0
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8008c60:	6940      	ldr	r0, [r0, #20]
 8008c62:	f7ff ff25 	bl	8008ab0 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8008c66:	1a30      	subs	r0, r6, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8008c68:	b201      	sxth	r1, r0
 8008c6a:	6920      	ldr	r0, [r4, #16]
 8008c6c:	f7fe fd6c 	bl	8007748 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8008c70:	0403      	lsls	r3, r0, #16
 8008c72:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8008c76:	bd70      	pop	{r4, r5, r6, pc}

08008c78 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8008c78:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008c80:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8008c84:	2000      	movs	r0, #0
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f362 000f 	bfi	r0, r2, #0, #16
 8008c8c:	0c1b      	lsrs	r3, r3, #16
{
 8008c8e:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8008c90:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008c94:	b002      	add	sp, #8
 8008c96:	4770      	bx	lr

08008c98 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8008c9c:	6940      	ldr	r0, [r0, #20]
 8008c9e:	f7ff ff07 	bl	8008ab0 <SPD_GetAvrgMecSpeedUnit>
 8008ca2:	0400      	lsls	r0, r0, #16
 8008ca4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
 
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t *pPIDPosReg, SpeednTorqCtrl_Handle_t *pSTC, ENCODER_Handle_t *pENC)
{
 8008ca8:	b410      	push	{r4}
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 8008caa:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->MovementDuration = 0.0f;
 8008cac:	2400      	movs	r4, #0
  pHandle->ReceivedTh = 0.0f;
 8008cae:	2300      	movs	r3, #0
  pHandle->MovementDuration = 0.0f;
 8008cb0:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 8008cb2:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 8008cb4:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 8008cb6:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8008cb8:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 8008cba:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 8008cbc:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 8008cbe:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 8008cc0:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->Jerk = 0.0f;
 8008cc2:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 8008cc4:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 8008cc6:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8008cc8:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 8008cca:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 8008ccc:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 8008cce:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->ElapseTime = 0.0f;
 8008cd0:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;
 8008cd2:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->ReceivedTh = 0.0f;
 8008cd6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->TcTick = 0;
 8008cda:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->PositionControlRegulation = DISABLE;
 8008cdc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008ce0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  pHandle->MecAngleOffset = 0;
 8008ce4:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8008ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop

08008cf0 <TC_MoveCommand>:
  * This function implements the Trajectory Control mode. When fDuration is different from 0,
  * the trajectory of the movement, and therefore its acceleration and speed, are computed. 
  * 
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8008cf0:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008cf2:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8008cf6:	2803      	cmp	r0, #3
 8008cf8:	d061      	beq.n	8008dbe <TC_MoveCommand+0xce>
  {
    /* Back to Move command as the movement duration is different from 0 */
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8008cfa:	b108      	cbz	r0, 8008d00 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 8008cfc:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 8008cfe:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8008d00:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d08:	ddf9      	ble.n	8008cfe <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008d0a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008d0e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8008dcc <TC_MoveCommand+0xdc>
    pHandle->StartingAngle = startingAngle;
 8008d12:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008d16:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8008d1a:	ee27 6a06 	vmul.f32	s12, s14, s12
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008d1e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008d22:	ee81 7a06 	vdiv.f32	s14, s2, s12
    pHandle->ElapseTime = 0.0f;
 8008d26:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 8008d28:	2001      	movs	r0, #1
 8008d2a:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 8008d2e:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 8008d32:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8008d36:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008d38:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008d3c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008d40:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008d48:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008d4c:	ee27 7a06 	vmul.f32	s14, s14, s12
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008d50:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008d54:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 8008d58:	ee70 2a20 	vadd.f32	s5, s0, s1
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008d5c:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8008d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008d64:	ee33 4aa3 	vadd.f32	s8, s7, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008d68:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008d6c:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008d70:	eec0 3aa6 	vdiv.f32	s7, s1, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008d74:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008d78:	ee24 4a23 	vmul.f32	s8, s8, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008d7c:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008d80:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008d84:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->AngleStep = angleStep;
 8008d88:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->Theta = startingAngle;
 8008d8c:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 8008d90:	edc3 2a02 	vstr	s5, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008d94:	ed83 7a00 	vstr	s14, [r3]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008d98:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8008d9c:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008da0:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008da4:	ed83 4a0e 	vstr	s8, [r3, #56]	; 0x38
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008da8:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008dac:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008db0:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008db4:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008db8:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
 8008dbc:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008dbe:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc6:	dca0      	bgt.n	8008d0a <TC_MoveCommand+0x1a>
 8008dc8:	e798      	b.n	8008cfc <TC_MoveCommand+0xc>
 8008dca:	bf00      	nop
 8008dcc:	3de38e39 	.word	0x3de38e39

08008dd0 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;

  // Estimate speed
  if (pHandle->ReceivedTh > 0)
 8008dd0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008dd4:	b363      	cbz	r3, 8008e30 <TC_FollowCommand+0x60>
  {
    // Calculate dt
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008dd6:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 8008dda:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 8008de2:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008de4:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8008de8:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 8008dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df2:	dd29      	ble.n	8008e48 <TC_FollowCommand+0x78>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8008df4:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 8008df8:	ee70 6a66 	vsub.f32	s13, s0, s13
    }
  }

  // Estimated acceleration
  if (pHandle->ReceivedTh > 1)
 8008dfc:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8008dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1)
 8008e02:	d917      	bls.n	8008e34 <TC_FollowCommand+0x64>
  {
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 8008e04:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 8008e08:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008e0c:	eec6 6a27 	vdiv.f32	s13, s12, s15
    }
  }

  // Update state variable
  pHandle->ThetaPrev  = Angle;
 8008e10:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 8008e14:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;

  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 8008e18:	2200      	movs	r2, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8008e1a:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 8008e1c:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 8008e20:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 8008e24:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->MovementDuration = 0;
 8008e28:	6002      	str	r2, [r0, #0]
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8008e2a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  return;
}
 8008e2e:	4770      	bx	lr
  float omega = 0, acceleration = 0, dt = 0;
 8008e30:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8008e58 <TC_FollowCommand+0x88>
  pHandle->ThetaPrev  = Angle;
 8008e34:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
    pHandle->ReceivedTh++;
 8008e38:	3301      	adds	r3, #1
 8008e3a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 8008e3e:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    pHandle->ReceivedTh++;
 8008e42:	eddf 6a05 	vldr	s13, [pc, #20]	; 8008e58 <TC_FollowCommand+0x88>
 8008e46:	e7e7      	b.n	8008e18 <TC_FollowCommand+0x48>
  if (pHandle->ReceivedTh > 1)
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d9f1      	bls.n	8008e30 <TC_FollowCommand+0x60>
  float omega = 0, acceleration = 0, dt = 0;
 8008e4c:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8008e58 <TC_FollowCommand+0x88>
 8008e50:	eef0 6a47 	vmov.f32	s13, s14
 8008e54:	e7dc      	b.n	8008e10 <TC_FollowCommand+0x40>
 8008e56:	bf00      	nop
 8008e58:	00000000 	.word	0x00000000

08008e5c <TC_PositionRegulation>:
/**
  * @brief  Proceeds on the position control loop.
  * @param  pHandle: handler of the current instance of the Position Control component.
  */
void TC_PositionRegulation(PosCtrl_Handle_t *pHandle)
{
 8008e5c:	b538      	push	{r3, r4, r5, lr}
  int32_t wMecAngleRef;
  int32_t wMecAngle;
  int32_t wError;
  int32_t hTorqueRef_Pos;

  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 8008e5e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d039      	beq.n	8008eda <TC_PositionRegulation+0x7e>
  {
    TC_MoveExecution(pHandle);
  }

  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d003      	beq.n	8008e72 <TC_PositionRegulation+0x16>
  {
    TC_FollowExecution(pHandle);
  }

  if (pHandle->PositionControlRegulation == ENABLE)
 8008e6a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8008e6e:	b9a3      	cbnz	r3, 8008e9a <TC_PositionRegulation+0x3e>

    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
  }

}
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
  * @brief  Updates the angular position.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_FollowExecution(PosCtrl_Handle_t *pHandle)
{
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008e72:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 8008e76:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8008e7a:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8008e7e:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 8008e82:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008e86:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8008e8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008e8e:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8008e92:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0ea      	beq.n	8008e70 <TC_PositionRegulation+0x14>
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8008e9a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008ff0 <TC_PositionRegulation+0x194>
 8008e9e:	edd0 7a12 	vldr	s15, [r0, #72]	; 0x48
 8008ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008eac:	6e80      	ldr	r0, [r0, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8008eae:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008eb2:	f7ff fe55 	bl	8008b60 <STC_GetSpeedSensor>
 8008eb6:	f7ff fdf9 	bl	8008aac <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008eba:	1a29      	subs	r1, r5, r0
 8008ebc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008ebe:	f7fe fc87 	bl	80077d0 <PID_Controller>
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008ec2:	2104      	movs	r1, #4
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008ec4:	4605      	mov	r5, r0
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008ec6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008ec8:	f7ff fe5c 	bl	8008b84 <STC_SetControlMode>
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8008ecc:	4629      	mov	r1, r5
 8008ece:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008ed0:	2200      	movs	r2, #0
}
 8008ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8008ed6:	f7ff be59 	b.w	8008b8c <STC_ExecRamp>
  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 8008eda:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8008ede:	edd0 5a04 	vldr	s11, [r0, #16]
 8008ee2:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8008ee6:	ed90 6a00 	vldr	s12, [r0]
 8008eea:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef2:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008ef6:	ee36 5a27 	vadd.f32	s10, s12, s15
 8008efa:	d529      	bpl.n	8008f50 <TC_PositionRegulation+0xf4>
 8008efc:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 8008f00:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8008f04:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8008f08:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008f0c:	ee66 5a27 	vmul.f32	s11, s12, s15
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008f10:	ee37 7a25 	vadd.f32	s14, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8008f14:	edd0 5a12 	vldr	s11, [r0, #72]	; 0x48
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008f18:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8008f1c:	eee7 5a27 	vfma.f32	s11, s14, s15
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008f20:	eef4 6ac5 	vcmpe.f32	s13, s10
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8008f28:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
  pHandle->ElapseTime += pHandle->SamplingTime;
 8008f2c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8008f30:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008f34:	dd99      	ble.n	8008e6a <TC_PositionRegulation+0xe>
    if (TC_ZERO_ALIGNMENT_START == pHandle->AlignmentStatus)
 8008f36:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8008f3a:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 8008f3c:	bf04      	itt	eq
 8008f3e:	2305      	moveq	r3, #5
 8008f40:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 8008f44:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008f46:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8008f48:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008f4a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8008f4e:	e78c      	b.n	8008e6a <TC_PositionRegulation+0xe>
  else if (pHandle->ElapseTime < pHandle->SubStep[1])       /* 2nd Sub-Step interval time of acceleration phase */
 8008f50:	edd0 5a05 	vldr	s11, [r0, #20]
 8008f54:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5c:	d414      	bmi.n	8008f88 <TC_PositionRegulation+0x12c>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])       /* 3rd Sub-Step interval time of acceleration phase */
 8008f5e:	edd0 5a06 	vldr	s11, [r0, #24]
 8008f62:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6a:	d414      	bmi.n	8008f96 <TC_PositionRegulation+0x13a>
  else if (pHandle->ElapseTime <
 8008f6c:	edd0 5a07 	vldr	s11, [r0, #28]
 8008f70:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f78:	d51a      	bpl.n	8008fb0 <TC_PositionRegulation+0x154>
    pHandle->Omega = pHandle->CruiseSpeed;
 8008f7a:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8008ff4 <TC_PositionRegulation+0x198>
 8008f7e:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8008f82:	eeb0 6a65 	vmov.f32	s12, s11
 8008f86:	e7c3      	b.n	8008f10 <TC_PositionRegulation+0xb4>
 8008f88:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8008f8c:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8008f90:	ee66 5a27 	vmul.f32	s11, s12, s15
 8008f94:	e7bc      	b.n	8008f10 <TC_PositionRegulation+0xb4>
 8008f96:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 8008f9a:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8008f9e:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8008fa2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008fa6:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008faa:	ee66 5a27 	vmul.f32	s11, s12, s15
 8008fae:	e7af      	b.n	8008f10 <TC_PositionRegulation+0xb4>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])       /* 1st Sub-Step interval time of deceleration phase */
 8008fb0:	edd0 5a08 	vldr	s11, [r0, #32]
 8008fb4:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbc:	d4eb      	bmi.n	8008f96 <TC_PositionRegulation+0x13a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
 8008fbe:	edd0 5a09 	vldr	s11, [r0, #36]	; 0x24
 8008fc2:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fca:	d4dd      	bmi.n	8008f88 <TC_PositionRegulation+0x12c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 8008fcc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8008fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd4:	d492      	bmi.n	8008efc <TC_PositionRegulation+0xa0>
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008fd6:	eef4 6ac5 	vcmpe.f32	s13, s10
    pHandle->Theta = pHandle->FinalAngle;
 8008fda:	6882      	ldr	r2, [r0, #8]
  pHandle->ElapseTime += pHandle->SamplingTime;
 8008fdc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8008fe0:	2302      	movs	r3, #2
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Theta = pHandle->FinalAngle;
 8008fe6:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8008fe8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008fec:	dca3      	bgt.n	8008f36 <TC_PositionRegulation+0xda>
 8008fee:	e73c      	b.n	8008e6a <TC_PositionRegulation+0xe>
 8008ff0:	4622f983 	.word	0x4622f983
 8008ff4:	00000000 	.word	0x00000000

08008ff8 <TC_EncAlignmentCommand>:
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 8008ff8:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d012      	beq.n	8009026 <TC_EncAlignmentCommand+0x2e>
{
 8009000:	b510      	push	{r4, lr}
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 8009002:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8009006:	2b04      	cmp	r3, #4
{
 8009008:	b082      	sub	sp, #8
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800900a:	d010      	beq.n	800902e <TC_EncAlignmentCommand+0x36>
      pHandle->pENC->_Super.wMecAngle = 0;
 800900c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800900e:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8009010:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 8009012:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 8009014:	60a3      	str	r3, [r4, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009016:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800901a:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 800901e:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
}
 8009022:	b002      	add	sp, #8
 8009024:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009026:	2300      	movs	r3, #0
 8009028:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800902c:	4770      	bx	lr
      pHandle->EncoderAbsoluteAligned = false;
 800902e:	2300      	movs	r3, #0
 8009030:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 8009034:	4604      	mov	r4, r0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8009036:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009038:	f7ff fd92 	bl	8008b60 <STC_GetSpeedSensor>
 800903c:	f7ff fd36 	bl	8008aac <SPD_GetMecAngle>
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8009040:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8009044:	9001      	str	r0, [sp, #4]
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8009046:	2b03      	cmp	r3, #3
 8009048:	d005      	beq.n	8009056 <TC_EncAlignmentCommand+0x5e>
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800904a:	b123      	cbz	r3, 8009056 <TC_EncAlignmentCommand+0x5e>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 800904c:	2301      	movs	r3, #1
 800904e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8009052:	b002      	add	sp, #8
 8009054:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8009056:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800905a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009120 <TC_EncAlignmentCommand+0x128>
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800905e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009124 <TC_EncAlignmentCommand+0x12c>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8009062:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009128 <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009066:	eddf 4a31 	vldr	s9, [pc, #196]	; 800912c <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 800906a:	eddf 5a31 	vldr	s11, [pc, #196]	; 8009130 <TC_EncAlignmentCommand+0x138>
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800906e:	eec7 6a06 	vdiv.f32	s13, s14, s12
    pHandle->ElapseTime = 0.0f;
 8009072:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 8009074:	2201      	movs	r2, #1
 8009076:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800907a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 800907e:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8009080:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8009082:	63e3      	str	r3, [r4, #60]	; 0x3c
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8009084:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009088:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800908c:	ee26 6a07 	vmul.f32	s12, s12, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009090:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8009094:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->AngleStep = angleStep;
 8009098:	edc4 5a03 	vstr	s11, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800909c:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80090a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80090a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80090a8:	ee27 7a05 	vmul.f32	s14, s14, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80090ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80090b0:	eef0 3a08 	vmov.f32	s7, #8	; 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80090b4:	ee26 5a27 	vmul.f32	s10, s12, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80090b8:	ee36 6a06 	vadd.f32	s12, s12, s12
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80090bc:	ee84 3a85 	vdiv.f32	s6, s9, s10
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80090c0:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80090c4:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80090c8:	eeb2 5a00 	vmov.f32	s10, #32	; 0x41000000  8.0
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80090cc:	ee26 6a03 	vmul.f32	s12, s12, s6
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80090d0:	ee77 2aa7 	vadd.f32	s5, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80090d4:	ee67 3aa3 	vmul.f32	s7, s15, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80090d8:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80090dc:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80090e0:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->FinalAngle = startingAngle + angleStep;
 80090e4:	ee77 5a25 	vadd.f32	s11, s14, s11
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80090e8:	edc4 6a00 	vstr	s13, [r4]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80090ec:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80090f0:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80090f4:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80090f8:	ed84 3a0d 	vstr	s6, [r4, #52]	; 0x34
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80090fc:	edc4 2a05 	vstr	s5, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009100:	edc4 3a06 	vstr	s7, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009104:	ed84 4a07 	vstr	s8, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009108:	edc4 4a08 	vstr	s9, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800910c:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
    pHandle->StartingAngle = startingAngle;
 8009110:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->Theta = startingAngle;
 8009114:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 8009118:	edc4 5a02 	vstr	s11, [r4, #8]
 800911c:	e796      	b.n	800904c <TC_EncAlignmentCommand+0x54>
 800911e:	bf00      	nop
 8009120:	3e638e39 	.word	0x3e638e39
 8009124:	3de38e39 	.word	0x3de38e39
 8009128:	38c90fdb 	.word	0x38c90fdb
 800912c:	3f060a92 	.word	0x3f060a92
 8009130:	40c90fdb 	.word	0x40c90fdb

08009134 <TC_EncoderReset>:
  * @brief  Set the absolute zero mechanical position.
  * @param  pHandle: handler of the current instance of the Position Control component.
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 8009134:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
 8009138:	b93a      	cbnz	r2, 800914a <TC_EncoderReset+0x16>
{
 800913a:	b430      	push	{r4, r5}
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 800913c:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
 8009140:	2c01      	cmp	r4, #1
 8009142:	4603      	mov	r3, r0
 8009144:	d002      	beq.n	800914c <TC_EncoderReset+0x18>
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
    pHandle->Theta = 0.0f;
    ENC_SetMecAngle(pHandle->pENC, pHandle->MecAngleOffset);
  }
}
 8009146:	bc30      	pop	{r4, r5}
 8009148:	4770      	bx	lr
 800914a:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 800914c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800914e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8009152:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->Theta = 0.0f;
 8009156:	2500      	movs	r5, #0
    pHandle->pENC->_Super.wMecAngle = 0;
 8009158:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 800915a:	f883 4052 	strb.w	r4, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800915e:	2402      	movs	r4, #2
    pHandle->Theta = 0.0f;
 8009160:	649d      	str	r5, [r3, #72]	; 0x48
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8009162:	f883 4062 	strb.w	r4, [r3, #98]	; 0x62
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009166:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800916a:	bc30      	pop	{r4, r5}
    ENC_SetMecAngle(pHandle->pENC, pHandle->MecAngleOffset);
 800916c:	f7fe b81a 	b.w	80071a4 <ENC_SetMecAngle>

08009170 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 8009170:	b508      	push	{r3, lr}

  return ((float)((SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16));
 8009172:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009174:	f7ff fcf4 	bl	8008b60 <STC_GetSpeedSensor>
 8009178:	f7ff fc98 	bl	8008aac <SPD_GetMecAngle>
 800917c:	ee07 0a10 	vmov	s14, r0
 8009180:	eddf 7a03 	vldr	s15, [pc, #12]	; 8009190 <TC_GetCurrentPosition+0x20>
 8009184:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 8009188:	ee20 0a27 	vmul.f32	s0, s0, s15
 800918c:	bd08      	pop	{r3, pc}
 800918e:	bf00      	nop
 8009190:	38c90fdb 	.word	0x38c90fdb

08009194 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 8009194:	ed90 0a02 	vldr	s0, [r0, #8]
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop

0800919c <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 800919c:	ed90 0a00 	vldr	s0, [r0]
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop

080091a4 <TC_GetControlPositionStatus>:
  * @retval Position Control Status
  */
PosCtrlStatus_t TC_GetControlPositionStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->PositionCtrlStatus);
}
 80091a4:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <TC_GetAlignmentStatus>:
  * @param  pHandle handler of the current instance of the Position Control component.
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 80091ac:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <TC_IncTick>:
  * @brief  Increments Tick counter used in follow mode.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 80091b4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80091b6:	3301      	adds	r3, #1
 80091b8:	6583      	str	r3, [r0, #88]	; 0x58
}
 80091ba:	4770      	bx	lr

080091bc <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80091bc:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80091be:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 80091c0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80091c2:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80091c4:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80091c6:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80091c8:	8243      	strh	r3, [r0, #18]
    pHandle->wElSpeedDpp32 = 0;
 80091ca:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->hRemainingStep = 0U;
 80091ce:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->hElAngleAccu = 0;
 80091d0:	8603      	strh	r3, [r0, #48]	; 0x30
    pHandle->bTransitionStarted = false;
 80091d2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    pHandle->bTransitionEnded = false;
 80091d6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    pHandle->bTransitionLocked = false;
 80091da:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

    pHandle->bCopyObserver = false;
 80091de:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80091e2:	4770      	bx	lr

080091e4 <VSS_Init>:
{
 80091e4:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80091e6:	f7ff ffe9 	bl	80091bc <VSS_Clear>
}
 80091ea:	bd08      	pop	{r3, pc}

080091ec <VSS_SetMecAngle>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 80091ec:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
    pHandle->_Super.hElAngle = hMecAngle;
 80091ee:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80091f0:	7843      	ldrb	r3, [r0, #1]
 80091f2:	fb91 f1f3 	sdiv	r1, r1, r3
 80091f6:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop

080091fc <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80091fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009200:	bb33      	cbnz	r3, 8009250 <VSS_SetMecAcceleration+0x54>
 8009202:	8b43      	ldrh	r3, [r0, #26]
{
 8009204:	b470      	push	{r4, r5, r6}
 8009206:	69c4      	ldr	r4, [r0, #28]
 8009208:	7845      	ldrb	r5, [r0, #1]
 800920a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	fb04 f401 	mul.w	r4, r4, r1
 8009214:	fb94 f4f3 	sdiv	r4, r4, r3
    {
      if (0U == hDurationms)
 8009218:	b192      	cbz	r2, 8009240 <VSS_SetMecAcceleration+0x44>

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
      }
      else
      {
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800921a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800921c:	4e13      	ldr	r6, [pc, #76]	; (800926c <VSS_SetMecAcceleration+0x70>)
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	fba6 2303 	umull	r2, r3, r6, r3
 8009226:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800922a:	3301      	adds	r3, #1
 800922c:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800922e:	8503      	strh	r3, [r0, #40]	; 0x28
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009230:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        if (0U == hNbrStep)
 8009234:	b96b      	cbnz	r3, 8009252 <VSS_SetMecAcceleration+0x56>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
        }

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009236:	0436      	lsls	r6, r6, #16
 8009238:	6246      	str	r6, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800923a:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800923c:	bc70      	pop	{r4, r5, r6}
 800923e:	4770      	bx	lr
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009240:	fb14 f405 	smulbb	r4, r4, r5
 8009244:	81c4      	strh	r4, [r0, #14]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009246:	8181      	strh	r1, [r0, #12]
        pHandle->hRemainingStep = 0U;
 8009248:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800924a:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 800924c:	bc70      	pop	{r4, r5, r6}
 800924e:	4770      	bx	lr
 8009250:	4770      	bx	lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009252:	fb96 f2f5 	sdiv	r2, r6, r5
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8009256:	1aa4      	subs	r4, r4, r2
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8009258:	0422      	lsls	r2, r4, #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800925a:	0436      	lsls	r6, r6, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800925c:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8009260:	fb05 f303 	mul.w	r3, r5, r3
 8009264:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009266:	6246      	str	r6, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009268:	8541      	strh	r1, [r0, #42]	; 0x2a
 800926a:	e7e7      	b.n	800923c <VSS_SetMecAcceleration+0x40>
 800926c:	10624dd3 	.word	0x10624dd3

08009270 <__libc_init_array>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4e0d      	ldr	r6, [pc, #52]	; (80092a8 <__libc_init_array+0x38>)
 8009274:	4c0d      	ldr	r4, [pc, #52]	; (80092ac <__libc_init_array+0x3c>)
 8009276:	1ba4      	subs	r4, r4, r6
 8009278:	10a4      	asrs	r4, r4, #2
 800927a:	2500      	movs	r5, #0
 800927c:	42a5      	cmp	r5, r4
 800927e:	d109      	bne.n	8009294 <__libc_init_array+0x24>
 8009280:	4e0b      	ldr	r6, [pc, #44]	; (80092b0 <__libc_init_array+0x40>)
 8009282:	4c0c      	ldr	r4, [pc, #48]	; (80092b4 <__libc_init_array+0x44>)
 8009284:	f000 f82c 	bl	80092e0 <_init>
 8009288:	1ba4      	subs	r4, r4, r6
 800928a:	10a4      	asrs	r4, r4, #2
 800928c:	2500      	movs	r5, #0
 800928e:	42a5      	cmp	r5, r4
 8009290:	d105      	bne.n	800929e <__libc_init_array+0x2e>
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009298:	4798      	blx	r3
 800929a:	3501      	adds	r5, #1
 800929c:	e7ee      	b.n	800927c <__libc_init_array+0xc>
 800929e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092a2:	4798      	blx	r3
 80092a4:	3501      	adds	r5, #1
 80092a6:	e7f2      	b.n	800928e <__libc_init_array+0x1e>
 80092a8:	080096ec 	.word	0x080096ec
 80092ac:	080096ec 	.word	0x080096ec
 80092b0:	080096ec 	.word	0x080096ec
 80092b4:	080096f0 	.word	0x080096f0

080092b8 <memcpy>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	1e43      	subs	r3, r0, #1
 80092bc:	440a      	add	r2, r1
 80092be:	4291      	cmp	r1, r2
 80092c0:	d100      	bne.n	80092c4 <memcpy+0xc>
 80092c2:	bd10      	pop	{r4, pc}
 80092c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092cc:	e7f7      	b.n	80092be <memcpy+0x6>

080092ce <memset>:
 80092ce:	4402      	add	r2, r0
 80092d0:	4603      	mov	r3, r0
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d100      	bne.n	80092d8 <memset+0xa>
 80092d6:	4770      	bx	lr
 80092d8:	f803 1b01 	strb.w	r1, [r3], #1
 80092dc:	e7f9      	b.n	80092d2 <memset+0x4>
	...

080092e0 <_init>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	bf00      	nop
 80092e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e6:	bc08      	pop	{r3}
 80092e8:	469e      	mov	lr, r3
 80092ea:	4770      	bx	lr

080092ec <_fini>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr
